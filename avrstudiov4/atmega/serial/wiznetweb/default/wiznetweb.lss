
wiznetweb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  000016f0  00001784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  0080022a  0080022a  000018ae  2**0
                  ALLOC
  3 .stab         00000f54  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003a9  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e8  00000000  00000000  00002bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023bc  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb0  00000000  00000000  00005154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001002  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00007108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  0000750c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c6  00000000  00000000  00007b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000090fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__ctors_end>
       4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
       8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
       c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      10:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      18:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      20:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      24:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      28:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      2c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      30:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      38:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      3c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      40:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_16>
      44:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      4c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      54:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      58:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      5c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      60:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      64:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>

00000068 <__c.1968>:
      68:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      78:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      88:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000095 <__c.1970>:
      95:	3c 68 74 6d 6c 3e 3c 62 6f 64 79 3e 3c 73 70 61     <html><body><spa
      a5:	6e 20 73 74 79 6c 65 3d 22 63 6f 6c 6f 72 3a 23     n style="color:#
      b5:	30 30 30 30 41 30 22 3e 0d 0a 00                    0000A0">...

000000c0 <__c.1972>:
      c0:	3c 68 31 3e 45 6d 62 65 64 64 65 64 20 57 65 62     <h1>Embedded Web
      d0:	20 53 65 72 76 65 72 3c 2f 68 31 3e 0d 0a 00         Server</h1>...

000000df <__c.1974>:
      df:	3c 68 33 3e 41 56 52 4a 61 7a 7a 20 4d 65 67 61     <h3>AVRJazz Mega
      ef:	33 32 38 20 61 6e 64 20 57 49 5a 38 31 31 4d 4a     328 and WIZ811MJ
      ff:	3c 2f 68 33 3e 0d 0a 00                             </h3>...

00000107 <__c.1976>:
     107:	3c 70 3e 3c 66 6f 72 6d 20 6d 65 74 68 6f 64 3d     <p><form method=
     117:	22 50 4f 53 54 22 3e 0d 0a 00                       "POST">...

00000121 <__c.1978>:
     121:	3c 73 74 72 6f 6e 67 3e 54 65 6d 70 3a 20 3c 69     <strong>Temp: <i
     131:	6e 70 75 74 20 74 79 70 65 3d 22 74 65 78 74 22     nput type="text"
     141:	20 73 69 7a 65 3d 32 20 76 61 6c 75 65 3d 22 00      size=2 value=".

00000151 <__c.1980>:
     151:	22 3e 20 3c 73 75 70 3e 4f 3c 2f 73 75 70 3e 43     "> <sup>O</sup>C
     161:	0d 0a 00                                            ...

00000164 <__c.1982>:
     164:	63 68 65 63 6b 65 64 00                             checked.

0000016c <__c.1984>:
     16c:	63 68 65 63 6b 65 64 00                             checked.

00000174 <__c.1986>:
     174:	3c 70 3e 3c 69 6e 70 75 74 20 74 79 70 65 3d 22     <p><input type="
     184:	72 61 64 69 6f 22 20 6e 61 6d 65 3d 22 72 61 64     radio" name="rad
     194:	69 6f 22 20 76 61 6c 75 65 3d 22 30 22 20 00        io" value="0" .

000001a3 <__c.1988>:
     1a3:	3e 42 6c 69 6e 6b 69 6e 67 20 4c 45 44 0d 0a 00     >Blinking LED...

000001b3 <__c.1990>:
     1b3:	3c 62 72 3e 3c 69 6e 70 75 74 20 74 79 70 65 3d     <br><input type=
     1c3:	22 72 61 64 69 6f 22 20 6e 61 6d 65 3d 22 72 61     "radio" name="ra
     1d3:	64 69 6f 22 20 76 61 6c 75 65 3d 22 31 22 20 00     dio" value="1" .

000001e3 <__c.1992>:
     1e3:	3e 53 63 61 6e 6e 69 6e 67 20 4c 45 44 0d 0a 00     >Scanning LED...

000001f3 <__c.1994>:
     1f3:	3c 2f 73 74 72 6f 6e 67 3e 3c 70 3e 0d 0a 00        </strong><p>...

00000202 <__c.1996>:
     202:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     212:	6d 69 74 22 3e 0d 0a 00                             mit">...

0000021a <__c.1998>:
     21a:	3c 2f 66 6f 72 6d 3e 3c 2f 73 70 61 6e 3e 3c 2f     </form></span></
     22a:	62 6f 64 79 3e 3c 2f 68 74 6d 6c 3e 0d 0a 00 00     body></html>....

0000023a <__ctors_end>:
     23a:	11 24       	eor	r1, r1
     23c:	1f be       	out	0x3f, r1	; 63
     23e:	cf ef       	ldi	r28, 0xFF	; 255
     240:	d8 e0       	ldi	r29, 0x08	; 8
     242:	de bf       	out	0x3e, r29	; 62
     244:	cd bf       	out	0x3d, r28	; 61

00000246 <__do_copy_data>:
     246:	12 e0       	ldi	r17, 0x02	; 2
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b1 e0       	ldi	r27, 0x01	; 1
     24c:	e0 ef       	ldi	r30, 0xF0	; 240
     24e:	f6 e1       	ldi	r31, 0x16	; 22
     250:	02 c0       	rjmp	.+4      	; 0x256 <__do_copy_data+0x10>
     252:	05 90       	lpm	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	aa 32       	cpi	r26, 0x2A	; 42
     258:	b1 07       	cpc	r27, r17
     25a:	d9 f7       	brne	.-10     	; 0x252 <__do_copy_data+0xc>

0000025c <__do_clear_bss>:
     25c:	14 e0       	ldi	r17, 0x04	; 4
     25e:	aa e2       	ldi	r26, 0x2A	; 42
     260:	b2 e0       	ldi	r27, 0x02	; 2
     262:	01 c0       	rjmp	.+2      	; 0x266 <.do_clear_bss_start>

00000264 <.do_clear_bss_loop>:
     264:	1d 92       	st	X+, r1

00000266 <.do_clear_bss_start>:
     266:	a0 33       	cpi	r26, 0x30	; 48
     268:	b1 07       	cpc	r27, r17
     26a:	e1 f7       	brne	.-8      	; 0x264 <.do_clear_bss_loop>
     26c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <main>
     270:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <_exit>

00000274 <__bad_interrupt>:
     274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000278 <SPI_Write>:
#endif

void SPI_Write(uint16_t addr,uint8_t data)
{
  // Activate the CS pin
  SPI_PORT &= ~(1<<SPI_CS);
     278:	2a 98       	cbi	0x05, 2	; 5

  // Start Wiznet W5100 Write OpCode transmission
  SPDR = WIZNET_WRITE_OPCODE;
     27a:	20 ef       	ldi	r18, 0xF0	; 240
     27c:	2e bd       	out	0x2e, r18	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <SPI_Write+0x6>

  // Start Wiznet W5100 Address High Bytes transmission
  SPDR = (addr & 0xFF00) >> 8;
     284:	9e bd       	out	0x2e, r25	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     286:	0d b4       	in	r0, 0x2d	; 45
     288:	07 fe       	sbrs	r0, 7
     28a:	fd cf       	rjmp	.-6      	; 0x286 <SPI_Write+0xe>

  // Start Wiznet W5100 Address Low Bytes transmission
  SPDR = addr & 0x00FF;
     28c:	8e bd       	out	0x2e, r24	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     28e:	0d b4       	in	r0, 0x2d	; 45
     290:	07 fe       	sbrs	r0, 7
     292:	fd cf       	rjmp	.-6      	; 0x28e <SPI_Write+0x16>

  // Start Data transmission
  SPDR = data;
     294:	6e bd       	out	0x2e, r22	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     296:	0d b4       	in	r0, 0x2d	; 45
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <SPI_Write+0x1e>

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
     29c:	2a 9a       	sbi	0x05, 2	; 5
}
     29e:	08 95       	ret

000002a0 <SPI_Read>:

unsigned char SPI_Read(uint16_t addr)
{
  // Activate the CS pin
  SPI_PORT &= ~(1<<SPI_CS);
     2a0:	2a 98       	cbi	0x05, 2	; 5

  // Start Wiznet W5100 Read OpCode transmission
  SPDR = WIZNET_READ_OPCODE;
     2a2:	2f e0       	ldi	r18, 0x0F	; 15
     2a4:	2e bd       	out	0x2e, r18	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     2a6:	0d b4       	in	r0, 0x2d	; 45
     2a8:	07 fe       	sbrs	r0, 7
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <SPI_Read+0x6>

  // Start Wiznet W5100 Address High Bytes transmission
  SPDR = (addr & 0xFF00) >> 8;
     2ac:	9e bd       	out	0x2e, r25	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     2ae:	0d b4       	in	r0, 0x2d	; 45
     2b0:	07 fe       	sbrs	r0, 7
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <SPI_Read+0xe>

  // Start Wiznet W5100 Address Low Bytes transmission
  SPDR = addr & 0x00FF;
     2b4:	8e bd       	out	0x2e, r24	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     2b6:	0d b4       	in	r0, 0x2d	; 45
     2b8:	07 fe       	sbrs	r0, 7
     2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <SPI_Read+0x16>

  // Send Dummy transmission for reading the data
  SPDR = 0x00;
     2bc:	1e bc       	out	0x2e, r1	; 46

  // Wait for transmission complete
  while(!(SPSR & (1<<SPIF)));
     2be:	0d b4       	in	r0, 0x2d	; 45
     2c0:	07 fe       	sbrs	r0, 7
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <SPI_Read+0x1e>

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
     2c4:	2a 9a       	sbi	0x05, 2	; 5

  return(SPDR);
     2c6:	8e b5       	in	r24, 0x2e	; 46
}
     2c8:	08 95       	ret

000002ca <W5100_Init>:
  unsigned char ip_addr[] = {192,168,1,150};
  unsigned char sub_mask[] = {255,255,255,0};
  unsigned char gtw_addr[] = {192,168,1,1};

  // Setting the Wiznet W5100 Mode Register: 0x0000
  SPI_Write(MR,0x80);            // MR = 0b10000000;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	60 e8       	ldi	r22, 0x80	; 128
     2d0:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

  // Setting the Wiznet W5100 Gateway Address (GAR): 0x0001 to 0x0004
  SPI_Write(GAR + 0,gtw_addr[0]);
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	60 ec       	ldi	r22, 0xC0	; 192
     2da:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(GAR + 1,gtw_addr[1]);
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	68 ea       	ldi	r22, 0xA8	; 168
     2e4:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(GAR + 2,gtw_addr[2]);
     2e8:	83 e0       	ldi	r24, 0x03	; 3
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(GAR + 3,gtw_addr[3]);
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

  // Setting the Wiznet W5100 Source Address Register (SAR): 0x0009 to 0x000E
  SPI_Write(SAR + 0,mac_addr[0]);
     2fc:	89 e0       	ldi	r24, 0x09	; 9
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SAR + 1,mac_addr[1]);
     306:	8a e0       	ldi	r24, 0x0A	; 10
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	66 e1       	ldi	r22, 0x16	; 22
     30c:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SAR + 2,mac_addr[2]);
     310:	8b e0       	ldi	r24, 0x0B	; 11
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	66 e3       	ldi	r22, 0x36	; 54
     316:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SAR + 3,mac_addr[3]);
     31a:	8c e0       	ldi	r24, 0x0C	; 12
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	6e ed       	ldi	r22, 0xDE	; 222
     320:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SAR + 4,mac_addr[4]);
     324:	8d e0       	ldi	r24, 0x0D	; 13
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	68 e5       	ldi	r22, 0x58	; 88
     32a:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SAR + 5,mac_addr[5]);
     32e:	8e e0       	ldi	r24, 0x0E	; 14
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	66 ef       	ldi	r22, 0xF6	; 246
     334:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

  // Setting the Wiznet W5100 Sub Mask Address (SUBR): 0x0005 to 0x0008
  SPI_Write(SUBR + 0,sub_mask[0]);
     338:	85 e0       	ldi	r24, 0x05	; 5
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	6f ef       	ldi	r22, 0xFF	; 255
     33e:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SUBR + 1,sub_mask[1]);
     342:	86 e0       	ldi	r24, 0x06	; 6
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	6f ef       	ldi	r22, 0xFF	; 255
     348:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SUBR + 2,sub_mask[2]);
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	6f ef       	ldi	r22, 0xFF	; 255
     352:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SUBR + 3,sub_mask[3]);
     356:	88 e0       	ldi	r24, 0x08	; 8
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

  // Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
  SPI_Write(SIPR + 0,ip_addr[0]);
     360:	8f e0       	ldi	r24, 0x0F	; 15
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	60 ec       	ldi	r22, 0xC0	; 192
     366:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SIPR + 1,ip_addr[1]);
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	68 ea       	ldi	r22, 0xA8	; 168
     370:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SIPR + 2,ip_addr[2]);
     374:	81 e1       	ldi	r24, 0x11	; 17
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(SIPR + 3,ip_addr[3]);
     37e:	82 e1       	ldi	r24, 0x12	; 18
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	66 e9       	ldi	r22, 0x96	; 150
     384:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

  // Setting the Wiznet W5100 RX and TX Memory Size (2KB),
  SPI_Write(RMSR,NET_MEMALLOC);
     388:	8a e1       	ldi	r24, 0x1A	; 26
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	65 e0       	ldi	r22, 0x05	; 5
     38e:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
  SPI_Write(TMSR,NET_MEMALLOC);
     392:	8b e1       	ldi	r24, 0x1B	; 27
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	65 e0       	ldi	r22, 0x05	; 5
     398:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
}
     39c:	08 95       	ret

0000039e <close>:

void close(uint8_t sock)
{
   if (sock != 0) return;
     39e:	88 23       	and	r24, r24
     3a0:	59 f4       	brne	.+22     	; 0x3b8 <close+0x1a>

   // Send Close Command
   SPI_Write(S0_CR,CR_CLOSE);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	60 e1       	ldi	r22, 0x10	; 16
     3a8:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

   // Waiting until the S0_CR is clear
   while(SPI_Read(S0_CR));
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	94 e0       	ldi	r25, 0x04	; 4
     3b0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     3b4:	88 23       	and	r24, r24
     3b6:	d1 f7       	brne	.-12     	; 0x3ac <close+0xe>
     3b8:	08 95       	ret

000003ba <disconnect>:
}

void disconnect(uint8_t sock)
{
   if (sock != 0) return;
     3ba:	88 23       	and	r24, r24
     3bc:	59 f4       	brne	.+22     	; 0x3d4 <disconnect+0x1a>

   // Send Disconnect Command
   SPI_Write(S0_CR,CR_DISCON);
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	94 e0       	ldi	r25, 0x04	; 4
     3c2:	68 e0       	ldi	r22, 0x08	; 8
     3c4:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

   // Wait for Disconecting Process
   while(SPI_Read(S0_CR));
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	94 e0       	ldi	r25, 0x04	; 4
     3cc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     3d0:	88 23       	and	r24, r24
     3d2:	d1 f7       	brne	.-12     	; 0x3c8 <disconnect+0xe>
     3d4:	08 95       	ret

000003d6 <socket>:
}

uint8_t socket(uint8_t sock,uint8_t eth_protocol,uint16_t tcp_port)
{
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	d6 2f       	mov	r29, r22
     3de:	c4 2f       	mov	r28, r20
     3e0:	15 2f       	mov	r17, r21
    uint8_t retval=0;

    if (sock != 0) return retval;
     3e2:	88 23       	and	r24, r24
     3e4:	59 f5       	brne	.+86     	; 0x43c <socket+0x66>

    // Make sure we close the socket first
    if (SPI_Read(S0_SR) == SOCK_CLOSED) {
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	94 e0       	ldi	r25, 0x04	; 4
     3ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     3ee:	88 23       	and	r24, r24
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <socket+0x20>
      close(sock);
     3f2:	0e 94 cf 01 	call	0x39e	; 0x39e <close>
    }

    // Assigned Socket 0 Mode Register
    SPI_Write(S0_MR,eth_protocol);
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	94 e0       	ldi	r25, 0x04	; 4
     3fa:	6d 2f       	mov	r22, r29
     3fc:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

    // Now open the Socket 0
    SPI_Write(S0_PORT,((tcp_port & 0xFF00) >> 8 ));
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	94 e0       	ldi	r25, 0x04	; 4
     404:	61 2f       	mov	r22, r17
     406:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
    SPI_Write(S0_PORT + 1,(tcp_port & 0x00FF));
     40a:	85 e0       	ldi	r24, 0x05	; 5
     40c:	94 e0       	ldi	r25, 0x04	; 4
     40e:	6c 2f       	mov	r22, r28
     410:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
    SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	94 e0       	ldi	r25, 0x04	; 4
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

    // Wait for Opening Process
    while(SPI_Read(S0_CR));
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     426:	88 23       	and	r24, r24
     428:	d1 f7       	brne	.-12     	; 0x41e <socket+0x48>

    // Check for Init Status
    if (SPI_Read(S0_SR) == SOCK_INIT)
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     432:	83 31       	cpi	r24, 0x13	; 19
     434:	29 f0       	breq	.+10     	; 0x440 <socket+0x6a>
      retval=1;
    else
      close(sock);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 cf 01 	call	0x39e	; 0x39e <close>

uint8_t socket(uint8_t sock,uint8_t eth_protocol,uint16_t tcp_port)
{
    uint8_t retval=0;

    if (sock != 0) return retval;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	01 c0       	rjmp	.+2      	; 0x442 <socket+0x6c>
    // Wait for Opening Process
    while(SPI_Read(S0_CR));

    // Check for Init Status
    if (SPI_Read(S0_SR) == SOCK_INIT)
      retval=1;
     440:	81 e0       	ldi	r24, 0x01	; 1
    else
      close(sock);

    return retval;
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	08 95       	ret

0000044a <listen>:

uint8_t listen(uint8_t sock)
{
   uint8_t retval = 0;

   if (sock != 0) return retval;
     44a:	88 23       	and	r24, r24
     44c:	d1 f4       	brne	.+52     	; 0x482 <listen+0x38>

   if (SPI_Read(S0_SR) == SOCK_INIT) {
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	94 e0       	ldi	r25, 0x04	; 4
     452:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     456:	83 31       	cpi	r24, 0x13	; 19
     458:	a1 f4       	brne	.+40     	; 0x482 <listen+0x38>
     // Send the LISTEN Command
     SPI_Write(S0_CR,CR_LISTEN);
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	94 e0       	ldi	r25, 0x04	; 4
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

     // Wait for Listening Process
     while(SPI_Read(S0_CR));
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	94 e0       	ldi	r25, 0x04	; 4
     468:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     46c:	88 23       	and	r24, r24
     46e:	d1 f7       	brne	.-12     	; 0x464 <listen+0x1a>

     // Check for Listen Status
     if (SPI_Read(S0_SR) == SOCK_LISTEN)
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	94 e0       	ldi	r25, 0x04	; 4
     474:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     478:	84 31       	cpi	r24, 0x14	; 20
     47a:	29 f0       	breq	.+10     	; 0x486 <listen+0x3c>
       retval=1;
     else
       close(sock);
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 cf 01 	call	0x39e	; 0x39e <close>
    return retval;
}

uint8_t listen(uint8_t sock)
{
   uint8_t retval = 0;
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
     // Wait for Listening Process
     while(SPI_Read(S0_CR));

     // Check for Listen Status
     if (SPI_Read(S0_SR) == SOCK_LISTEN)
       retval=1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     else
       close(sock);
    }
    return retval;
}
     488:	08 95       	ret

0000048a <send>:

uint16_t send(uint8_t sock,const uint8_t *buf,uint16_t buflen)
{
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	5b 01       	movw	r10, r22
     4a0:	6a 01       	movw	r12, r20
    uint16_t ptr,offaddr,realaddr,txsize,timeout;

    if (buflen <= 0 || sock != 0) return 0;
     4a2:	41 15       	cp	r20, r1
     4a4:	51 05       	cpc	r21, r1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <send+0x20>
     4a8:	69 c0       	rjmp	.+210    	; 0x57c <send+0xf2>
     4aa:	88 23       	and	r24, r24
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <send+0x26>
     4ae:	66 c0       	rjmp	.+204    	; 0x57c <send+0xf2>
#if _DEBUG_MODE
    printf("Send Size: %d\n",buflen);
#endif

    // Make sure the TX Free Size Register is available
    txsize=SPI_Read(SO_TX_FSR);
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     4b8:	d8 2f       	mov	r29, r24
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	c8 2f       	mov	r28, r24
     4be:	81 e2       	ldi	r24, 0x21	; 33
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     4c6:	c8 0f       	add	r28, r24
     4c8:	d1 1d       	adc	r29, r1
#if _DEBUG_MODE
    printf("TX Free Size: %d\n",txsize);
#endif

    timeout=0;
    while (txsize < buflen) {
     4ca:	0a ee       	ldi	r16, 0xEA	; 234
     4cc:	13 e0       	ldi	r17, 0x03	; 3
     4ce:	1a c0       	rjmp	.+52     	; 0x504 <send+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	ef ec       	ldi	r30, 0xCF	; 207
     4d2:	f7 e0       	ldi	r31, 0x07	; 7
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <send+0x4a>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <send+0x50>
     4da:	00 00       	nop
      _delay_ms(1);

     txsize=SPI_Read(SO_TX_FSR);
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	94 e0       	ldi	r25, 0x04	; 4
     4e0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     4e4:	f8 2e       	mov	r15, r24
     4e6:	ee 24       	eor	r14, r14
     4e8:	81 e2       	ldi	r24, 0x21	; 33
     4ea:	94 e0       	ldi	r25, 0x04	; 4
     4ec:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     4f0:	e7 01       	movw	r28, r14
     4f2:	c8 0f       	add	r28, r24
     4f4:	d1 1d       	adc	r29, r1
     4f6:	01 50       	subi	r16, 0x01	; 1
     4f8:	10 40       	sbci	r17, 0x00	; 0

     // Timeout for approx 1000 ms
     if (timeout++ > 1000) {
     4fa:	21 f4       	brne	.+8      	; 0x504 <send+0x7a>
#if _DEBUG_MODE
       printf("TX Free Size Error!\n");
#endif
       // Disconnect the connection
       disconnect(sock);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disconnect>
     502:	3c c0       	rjmp	.+120    	; 0x57c <send+0xf2>
#if _DEBUG_MODE
    printf("TX Free Size: %d\n",txsize);
#endif

    timeout=0;
    while (txsize < buflen) {
     504:	cc 15       	cp	r28, r12
     506:	dd 05       	cpc	r29, r13
     508:	18 f3       	brcs	.-58     	; 0x4d0 <send+0x46>
       return 0;
     }
   }

   // Read the Tx Write Pointer
   ptr = SPI_Read(S0_TX_WR);
     50a:	84 e2       	ldi	r24, 0x24	; 36
     50c:	94 e0       	ldi	r25, 0x04	; 4
     50e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     512:	c8 2f       	mov	r28, r24
   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     514:	85 e2       	ldi	r24, 0x25	; 37
     516:	94 e0       	ldi	r25, 0x04	; 4
     518:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     51c:	3c 2f       	mov	r19, r28
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	79 01       	movw	r14, r18
     522:	e8 0e       	add	r14, r24
     524:	f1 1c       	adc	r15, r1
     526:	e7 01       	movw	r28, r14
     528:	86 01       	movw	r16, r12
#if _DEBUG_MODE
    printf("TX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
      buflen--;
     52a:	01 50       	subi	r16, 0x01	; 1
     52c:	10 40       	sbci	r17, 0x00	; 0
      // Calculate the real W5100 physical Tx Buffer Address
      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     52e:	ce 01       	movw	r24, r28
     530:	97 70       	andi	r25, 0x07	; 7

      // Copy the application data to the W5100 Tx Buffer
      SPI_Write(realaddr,*buf);
     532:	80 50       	subi	r24, 0x00	; 0
     534:	90 4c       	sbci	r25, 0xC0	; 192
     536:	f5 01       	movw	r30, r10
     538:	61 91       	ld	r22, Z+
     53a:	5f 01       	movw	r10, r30
     53c:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
      offaddr++;
     540:	21 96       	adiw	r28, 0x01	; 1
   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
#if _DEBUG_MODE
    printf("TX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
     542:	01 15       	cp	r16, r1
     544:	11 05       	cpc	r17, r1
     546:	89 f7       	brne	.-30     	; 0x52a <send+0xa0>
     548:	ec 0c       	add	r14, r12
     54a:	fd 1c       	adc	r15, r13
      offaddr++;
      buf++;
    }

    // Increase the S0_TX_WR value, so it point to the next transmit
    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     54c:	84 e2       	ldi	r24, 0x24	; 36
     54e:	94 e0       	ldi	r25, 0x04	; 4
     550:	6f 2d       	mov	r22, r15
     552:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     556:	85 e2       	ldi	r24, 0x25	; 37
     558:	94 e0       	ldi	r25, 0x04	; 4
     55a:	6e 2d       	mov	r22, r14
     55c:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

    // Now Send the SEND command
    SPI_Write(S0_CR,CR_SEND);
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	94 e0       	ldi	r25, 0x04	; 4
     564:	60 e2       	ldi	r22, 0x20	; 32
     566:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

    // Wait for Sending Process
    while(SPI_Read(S0_CR));
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	94 e0       	ldi	r25, 0x04	; 4
     56e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     572:	88 23       	and	r24, r24
     574:	d1 f7       	brne	.-12     	; 0x56a <send+0xe0>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <send+0xf6>

uint16_t send(uint8_t sock,const uint8_t *buf,uint16_t buflen)
{
    uint16_t ptr,offaddr,realaddr,txsize,timeout;

    if (buflen <= 0 || sock != 0) return 0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0

    // Wait for Sending Process
    while(SPI_Read(S0_CR));

    return 1;
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	08 95       	ret

00000596 <recv>:

uint16_t recv(uint8_t sock,uint8_t *buf,uint16_t buflen)
{
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	4b 01       	movw	r8, r22
     5b0:	ea 01       	movw	r28, r20
    uint16_t ptr,offaddr,realaddr;

    if (buflen <= 0 || sock != 0) return 1;
     5b2:	20 97       	sbiw	r28, 0x00	; 0
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <recv+0x22>
     5b6:	44 c0       	rjmp	.+136    	; 0x640 <recv+0xaa>
     5b8:	88 23       	and	r24, r24
     5ba:	09 f0       	breq	.+2      	; 0x5be <recv+0x28>
     5bc:	41 c0       	rjmp	.+130    	; 0x640 <recv+0xaa>

    // If the request size > MAX_BUF,just truncate it
    if (buflen > MAX_BUF)
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	41 30       	cpi	r20, 0x01	; 1
     5c2:	58 07       	cpc	r21, r24
     5c4:	10 f0       	brcs	.+4      	; 0x5ca <recv+0x34>
      buflen=MAX_BUF - 2;
     5c6:	ce ef       	ldi	r28, 0xFE	; 254
     5c8:	d1 e0       	ldi	r29, 0x01	; 1

    // Read the Rx Read Pointer
    ptr = SPI_Read(S0_RX_RD);
     5ca:	88 e2       	ldi	r24, 0x28	; 40
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     5d2:	e8 2e       	mov	r14, r24
    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     5d4:	89 e2       	ldi	r24, 0x29	; 41
     5d6:	94 e0       	ldi	r25, 0x04	; 4
     5d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     5dc:	1e 2d       	mov	r17, r14
     5de:	00 e0       	ldi	r16, 0x00	; 0
     5e0:	58 01       	movw	r10, r16
     5e2:	a8 0e       	add	r10, r24
     5e4:	b1 1c       	adc	r11, r1
     5e6:	85 01       	movw	r16, r10
     5e8:	7e 01       	movw	r14, r28
     5ea:	64 01       	movw	r12, r8
#if _DEBUG_MODE
    printf("RX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
      buflen--;
     5ec:	08 94       	sec
     5ee:	e1 08       	sbc	r14, r1
     5f0:	f1 08       	sbc	r15, r1
      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     5f2:	c8 01       	movw	r24, r16
     5f4:	97 70       	andi	r25, 0x07	; 7
      *buf = SPI_Read(realaddr);
     5f6:	80 50       	subi	r24, 0x00	; 0
     5f8:	90 4a       	sbci	r25, 0xA0	; 160
     5fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     5fe:	f6 01       	movw	r30, r12
     600:	81 93       	st	Z+, r24
     602:	6f 01       	movw	r12, r30
      offaddr++;
     604:	0f 5f       	subi	r16, 0xFF	; 255
     606:	1f 4f       	sbci	r17, 0xFF	; 255
    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
#if _DEBUG_MODE
    printf("RX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
     608:	e1 14       	cp	r14, r1
     60a:	f1 04       	cpc	r15, r1
     60c:	79 f7       	brne	.-34     	; 0x5ec <recv+0x56>
     60e:	85 01       	movw	r16, r10
     610:	0c 0f       	add	r16, r28
     612:	1d 1f       	adc	r17, r29
      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
      *buf = SPI_Read(realaddr);
      offaddr++;
      buf++;
    }
    *buf='\0';        // String terminated character
     614:	c8 0d       	add	r28, r8
     616:	d9 1d       	adc	r29, r9
     618:	18 82       	st	Y, r1

    // Increase the S0_RX_RD value, so it point to the next receive
    SPI_Write(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	94 e0       	ldi	r25, 0x04	; 4
     61e:	61 2f       	mov	r22, r17
     620:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     624:	89 e2       	ldi	r24, 0x29	; 41
     626:	94 e0       	ldi	r25, 0x04	; 4
     628:	60 2f       	mov	r22, r16
     62a:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>

    // Now Send the RECV command
    SPI_Write(S0_CR,CR_RECV);
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	94 e0       	ldi	r25, 0x04	; 4
     632:	60 e4       	ldi	r22, 0x40	; 64
     634:	0e 94 3c 01 	call	0x278	; 0x278 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     638:	fd e0       	ldi	r31, 0x0D	; 13
     63a:	fa 95       	dec	r31
     63c:	f1 f7       	brne	.-4      	; 0x63a <recv+0xa4>
     63e:	00 00       	nop
    _delay_us(5);    // Wait for Receive Process

    return 1;
}
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	08 95       	ret

0000065e <recv_size>:

uint16_t recv_size(void)
{
     65e:	cf 93       	push	r28
  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     660:	86 e2       	ldi	r24, 0x26	; 38
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     668:	c8 2f       	mov	r28, r24
     66a:	87 e2       	ldi	r24, 0x27	; 39
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
     672:	3c 2f       	mov	r19, r28
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	a9 01       	movw	r20, r18
     678:	48 0f       	add	r20, r24
     67a:	51 1d       	adc	r21, r1
     67c:	ca 01       	movw	r24, r20
}
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <strindex>:

int strindex(char *s,char *t)
{
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	16 2f       	mov	r17, r22
     694:	07 2f       	mov	r16, r23
  uint16_t i,n;

  n=strlen(t);
     696:	e6 2f       	mov	r30, r22
     698:	f7 2f       	mov	r31, r23
     69a:	ef 01       	movw	r28, r30
     69c:	09 90       	ld	r0, Y+
     69e:	00 20       	and	r0, r0
     6a0:	e9 f7       	brne	.-6      	; 0x69c <strindex+0x1a>
     6a2:	21 97       	sbiw	r28, 0x01	; 1
     6a4:	ce 1b       	sub	r28, r30
     6a6:	df 0b       	sbc	r29, r31
     6a8:	7c 01       	movw	r14, r24
  for(i=0;*(s+i); i++) {
     6aa:	cc 24       	eor	r12, r12
     6ac:	dd 24       	eor	r13, r13
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <strindex+0x46>
    if (strncmp(s+i,t,n) == 0)
     6b0:	61 2f       	mov	r22, r17
     6b2:	70 2f       	mov	r23, r16
     6b4:	ae 01       	movw	r20, r28
     6b6:	0e 94 c8 08 	call	0x1190	; 0x1190 <strncmp>
     6ba:	00 97       	sbiw	r24, 0x00	; 0
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <strindex+0x40>
      return i;
     6be:	c6 01       	movw	r24, r12
     6c0:	0d c0       	rjmp	.+26     	; 0x6dc <strindex+0x5a>
int strindex(char *s,char *t)
{
  uint16_t i,n;

  n=strlen(t);
  for(i=0;*(s+i); i++) {
     6c2:	08 94       	sec
     6c4:	c1 1c       	adc	r12, r1
     6c6:	d1 1c       	adc	r13, r1
     6c8:	c7 01       	movw	r24, r14
     6ca:	08 94       	sec
     6cc:	e1 1c       	adc	r14, r1
     6ce:	f1 1c       	adc	r15, r1
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 81       	ld	r18, Z
     6d4:	22 23       	and	r18, r18
     6d6:	61 f7       	brne	.-40     	; 0x6b0 <strindex+0x2e>
    if (strncmp(s+i,t,n) == 0)
      return i;
  }
  return -1;
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	9f ef       	ldi	r25, 0xFF	; 255
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	2f 93       	push	r18
     6fa:	3f 93       	push	r19
     6fc:	4f 93       	push	r20
     6fe:	5f 93       	push	r21
     700:	6f 93       	push	r22
     702:	7f 93       	push	r23
     704:	8f 93       	push	r24
     706:	9f 93       	push	r25
     708:	af 93       	push	r26
     70a:	bf 93       	push	r27
     70c:	ef 93       	push	r30
     70e:	ff 93       	push	r31
  static unsigned char tenms=1;

  tenms++;                  // Read ADC every 20 x 10ms = 200 milisecond
     710:	80 91 21 01 	lds	r24, 0x0121
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 21 01 	sts	0x0121, r24
  if (tenms >= 20) {
     71a:	84 31       	cpi	r24, 0x14	; 20
     71c:	08 f4       	brcc	.+2      	; 0x720 <__vector_16+0x32>
     71e:	51 c0       	rjmp	.+162    	; 0x7c2 <__vector_16+0xd4>
    cli();                                // Disable Interupt
     720:	f8 94       	cli

    // Select the LED Mode here
    if (ledmode == 1) {
     722:	80 91 2e 04 	lds	r24, 0x042E
     726:	90 91 2a 02 	lds	r25, 0x022A
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	b9 f4       	brne	.+46     	; 0x75c <__vector_16+0x6e>
      if (ledeye <= 0) ledeye=0x01;
     72e:	20 91 2f 04 	lds	r18, 0x042F
     732:	22 23       	and	r18, r18
     734:	11 f4       	brne	.+4      	; 0x73a <__vector_16+0x4c>
     736:	80 93 2f 04 	sts	0x042F, r24
     73a:	80 91 2f 04 	lds	r24, 0x042F

      if (ledsign == 0) {
	PORTD=ledeye;
     73e:	8b b9       	out	0x0b, r24	; 11

    // Select the LED Mode here
    if (ledmode == 1) {
      if (ledeye <= 0) ledeye=0x01;

      if (ledsign == 0) {
     740:	99 23       	and	r25, r25
     742:	31 f4       	brne	.+12     	; 0x750 <__vector_16+0x62>
	PORTD=ledeye;
	ledeye=ledeye << 1;
     744:	88 0f       	add	r24, r24
     746:	80 93 2f 04 	sts	0x042F, r24
	if (ledeye >= 0x80) ledsign=1;
     74a:	87 ff       	sbrs	r24, 7
     74c:	12 c0       	rjmp	.+36     	; 0x772 <__vector_16+0x84>
     74e:	09 c0       	rjmp	.+18     	; 0x762 <__vector_16+0x74>
      } else {
	PORTD=ledeye;
	ledeye=ledeye >> 1;
     750:	86 95       	lsr	r24
     752:	80 93 2f 04 	sts	0x042F, r24
	if (ledeye <= 0x01) ledsign=0;
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	60 f4       	brcc	.+24     	; 0x772 <__vector_16+0x84>
     75a:	09 c0       	rjmp	.+18     	; 0x76e <__vector_16+0x80>
      }
    } else {
      if (ledsign == 0) {
     75c:	99 23       	and	r25, r25
     75e:	29 f4       	brne	.+10     	; 0x76a <__vector_16+0x7c>
	PORTD=0x00;
     760:	1b b8       	out	0x0b, r1	; 11
	ledsign=1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	80 93 2a 02 	sts	0x022A, r24
     768:	04 c0       	rjmp	.+8      	; 0x772 <__vector_16+0x84>
      } else {
	PORTD=0xFF;
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	8b b9       	out	0x0b, r24	; 11
	ledsign=0;
     76e:	10 92 2a 02 	sts	0x022A, r1
      }
    }

    // Set ADMUX Channel for LM35DZ Input
    ADMUX=0x01;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 7c 00 	sts	0x007C, r24

    // Start conversion by setting ADSC on ADCSRA Register
    ADCSRA |= (1<<ADSC);
     778:	80 91 7a 00 	lds	r24, 0x007A
     77c:	80 64       	ori	r24, 0x40	; 64
     77e:	80 93 7a 00 	sts	0x007A, r24

    // wait until convertion complete ADSC=0 -> Complete
    while (ADCSRA & (1<<ADSC));
     782:	80 91 7a 00 	lds	r24, 0x007A
     786:	86 fd       	sbrc	r24, 6
     788:	fc cf       	rjmp	.-8      	; 0x782 <__vector_16+0x94>

    // Get the ADC Result
    tempvalue = ADCW;
     78a:	60 91 78 00 	lds	r22, 0x0078
     78e:	70 91 79 00 	lds	r23, 0x0079

    // ADC = (Vin x 1024) / Vref, Vref = 1 Volt, LM35DZ Out = 10mv/C
    tempvalue = (int)(tempvalue) / 10.24;
     792:	88 27       	eor	r24, r24
     794:	77 fd       	sbrc	r23, 7
     796:	80 95       	com	r24
     798:	98 2f       	mov	r25, r24
     79a:	0e 94 9f 04 	call	0x93e	; 0x93e <__floatsisf>
     79e:	2a e0       	ldi	r18, 0x0A	; 10
     7a0:	37 ed       	ldi	r19, 0xD7	; 215
     7a2:	43 e2       	ldi	r20, 0x23	; 35
     7a4:	51 e4       	ldi	r21, 0x41	; 65
     7a6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__divsf3>
     7aa:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fixsfsi>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	90 93 2c 02 	sts	0x022C, r25
     7b6:	80 93 2b 02 	sts	0x022B, r24

    tenms=1;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 21 01 	sts	0x0121, r24

    sei();                            // Enable Interupt
     7c0:	78 94       	sei
  }

  // Start counter from 0x94, overflow at 10 mSec
  TCNT0=0x94;
     7c2:	84 e9       	ldi	r24, 0x94	; 148
     7c4:	86 bd       	out	0x26, r24	; 38
}
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__divsf3>:
     7e8:	a8 e1       	ldi	r26, 0x18	; 24
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	ea ef       	ldi	r30, 0xFA	; 250
     7ee:	f3 e0       	ldi	r31, 0x03	; 3
     7f0:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__prologue_saves__+0x14>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	8d 83       	std	Y+5, r24	; 0x05
     7fa:	9e 83       	std	Y+6, r25	; 0x06
     7fc:	af 83       	std	Y+7, r26	; 0x07
     7fe:	b8 87       	std	Y+8, r27	; 0x08
     800:	29 83       	std	Y+1, r18	; 0x01
     802:	3a 83       	std	Y+2, r19	; 0x02
     804:	4b 83       	std	Y+3, r20	; 0x03
     806:	5c 83       	std	Y+4, r21	; 0x04
     808:	ce 01       	movw	r24, r28
     80a:	05 96       	adiw	r24, 0x05	; 5
     80c:	be 01       	movw	r22, r28
     80e:	6f 5e       	subi	r22, 0xEF	; 239
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	0e 94 91 06 	call	0xd22	; 0xd22 <__unpack_f>
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	be 01       	movw	r22, r28
     81c:	67 5f       	subi	r22, 0xF7	; 247
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	0e 94 91 06 	call	0xd22	; 0xd22 <__unpack_f>
     824:	99 89       	ldd	r25, Y+17	; 0x11
     826:	92 30       	cpi	r25, 0x02	; 2
     828:	08 f4       	brcc	.+2      	; 0x82c <__divsf3+0x44>
     82a:	75 c0       	rjmp	.+234    	; 0x916 <__stack+0x17>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	08 f4       	brcc	.+2      	; 0x834 <__divsf3+0x4c>
     832:	74 c0       	rjmp	.+232    	; 0x91c <__stack+0x1d>
     834:	2a 89       	ldd	r18, Y+18	; 0x12
     836:	3a 85       	ldd	r19, Y+10	; 0x0a
     838:	23 27       	eor	r18, r19
     83a:	2a 8b       	std	Y+18, r18	; 0x12
     83c:	94 30       	cpi	r25, 0x04	; 4
     83e:	11 f0       	breq	.+4      	; 0x844 <__divsf3+0x5c>
     840:	92 30       	cpi	r25, 0x02	; 2
     842:	21 f4       	brne	.+8      	; 0x84c <__divsf3+0x64>
     844:	98 17       	cp	r25, r24
     846:	09 f0       	breq	.+2      	; 0x84a <__divsf3+0x62>
     848:	66 c0       	rjmp	.+204    	; 0x916 <__stack+0x17>
     84a:	6b c0       	rjmp	.+214    	; 0x922 <__stack+0x23>
     84c:	84 30       	cpi	r24, 0x04	; 4
     84e:	39 f4       	brne	.+14     	; 0x85e <__divsf3+0x76>
     850:	1d 8a       	std	Y+21, r1	; 0x15
     852:	1e 8a       	std	Y+22, r1	; 0x16
     854:	1f 8a       	std	Y+23, r1	; 0x17
     856:	18 8e       	std	Y+24, r1	; 0x18
     858:	1c 8a       	std	Y+20, r1	; 0x14
     85a:	1b 8a       	std	Y+19, r1	; 0x13
     85c:	5c c0       	rjmp	.+184    	; 0x916 <__stack+0x17>
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	19 f4       	brne	.+6      	; 0x868 <__divsf3+0x80>
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	89 8b       	std	Y+17, r24	; 0x11
     866:	57 c0       	rjmp	.+174    	; 0x916 <__stack+0x17>
     868:	2b 89       	ldd	r18, Y+19	; 0x13
     86a:	3c 89       	ldd	r19, Y+20	; 0x14
     86c:	8b 85       	ldd	r24, Y+11	; 0x0b
     86e:	9c 85       	ldd	r25, Y+12	; 0x0c
     870:	28 1b       	sub	r18, r24
     872:	39 0b       	sbc	r19, r25
     874:	3c 8b       	std	Y+20, r19	; 0x14
     876:	2b 8b       	std	Y+19, r18	; 0x13
     878:	8d 89       	ldd	r24, Y+21	; 0x15
     87a:	9e 89       	ldd	r25, Y+22	; 0x16
     87c:	af 89       	ldd	r26, Y+23	; 0x17
     87e:	b8 8d       	ldd	r27, Y+24	; 0x18
     880:	cd 84       	ldd	r12, Y+13	; 0x0d
     882:	de 84       	ldd	r13, Y+14	; 0x0e
     884:	ef 84       	ldd	r14, Y+15	; 0x0f
     886:	f8 88       	ldd	r15, Y+16	; 0x10
     888:	8c 15       	cp	r24, r12
     88a:	9d 05       	cpc	r25, r13
     88c:	ae 05       	cpc	r26, r14
     88e:	bf 05       	cpc	r27, r15
     890:	40 f4       	brcc	.+16     	; 0x8a2 <__divsf3+0xba>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	21 50       	subi	r18, 0x01	; 1
     89c:	30 40       	sbci	r19, 0x00	; 0
     89e:	3c 8b       	std	Y+20, r19	; 0x14
     8a0:	2b 8b       	std	Y+19, r18	; 0x13
     8a2:	ef e1       	ldi	r30, 0x1F	; 31
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	00 e0       	ldi	r16, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e4       	ldi	r19, 0x40	; 64
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	ba 01       	movw	r22, r20
     8b4:	8c 15       	cp	r24, r12
     8b6:	9d 05       	cpc	r25, r13
     8b8:	ae 05       	cpc	r26, r14
     8ba:	bf 05       	cpc	r27, r15
     8bc:	40 f0       	brcs	.+16     	; 0x8ce <__divsf3+0xe6>
     8be:	40 2b       	or	r20, r16
     8c0:	51 2b       	or	r21, r17
     8c2:	62 2b       	or	r22, r18
     8c4:	73 2b       	or	r23, r19
     8c6:	8c 19       	sub	r24, r12
     8c8:	9d 09       	sbc	r25, r13
     8ca:	ae 09       	sbc	r26, r14
     8cc:	bf 09       	sbc	r27, r15
     8ce:	36 95       	lsr	r19
     8d0:	27 95       	ror	r18
     8d2:	17 95       	ror	r17
     8d4:	07 95       	ror	r16
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	aa 1f       	adc	r26, r26
     8dc:	bb 1f       	adc	r27, r27
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	49 f7       	brne	.-46     	; 0x8b4 <__divsf3+0xcc>
     8e2:	8a 01       	movw	r16, r20
     8e4:	9b 01       	movw	r18, r22
     8e6:	0f 77       	andi	r16, 0x7F	; 127
     8e8:	10 70       	andi	r17, 0x00	; 0
     8ea:	20 70       	andi	r18, 0x00	; 0
     8ec:	30 70       	andi	r19, 0x00	; 0
     8ee:	00 34       	cpi	r16, 0x40	; 64
     8f0:	11 05       	cpc	r17, r1
     8f2:	21 05       	cpc	r18, r1
     8f4:	31 05       	cpc	r19, r1
     8f6:	59 f4       	brne	.+22     	; 0x90e <__stack+0xf>
     8f8:	47 fd       	sbrc	r20, 7
     8fa:	09 c0       	rjmp	.+18     	; 0x90e <__stack+0xf>
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	a1 05       	cpc	r26, r1
     900:	b1 05       	cpc	r27, r1
     902:	29 f0       	breq	.+10     	; 0x90e <__stack+0xf>
     904:	40 5c       	subi	r20, 0xC0	; 192
     906:	5f 4f       	sbci	r21, 0xFF	; 255
     908:	6f 4f       	sbci	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	40 78       	andi	r20, 0x80	; 128
     90e:	4d 8b       	std	Y+21, r20	; 0x15
     910:	5e 8b       	std	Y+22, r21	; 0x16
     912:	6f 8b       	std	Y+23, r22	; 0x17
     914:	78 8f       	std	Y+24, r23	; 0x18
     916:	ce 01       	movw	r24, r28
     918:	41 96       	adiw	r24, 0x11	; 17
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0x27>
     91c:	ce 01       	movw	r24, r28
     91e:	09 96       	adiw	r24, 0x09	; 9
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
     922:	82 e2       	ldi	r24, 0x22	; 34
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 ba 05 	call	0xb74	; 0xb74 <__pack_f>
     92a:	46 2f       	mov	r20, r22
     92c:	57 2f       	mov	r21, r23
     92e:	68 2f       	mov	r22, r24
     930:	79 2f       	mov	r23, r25
     932:	cb 01       	movw	r24, r22
     934:	ba 01       	movw	r22, r20
     936:	68 96       	adiw	r28, 0x18	; 24
     938:	e8 e0       	ldi	r30, 0x08	; 8
     93a:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__epilogue_restores__+0x14>

0000093e <__floatsisf>:
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	28 97       	sbiw	r28, 0x08	; 8
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	6b 01       	movw	r12, r22
     95c:	7c 01       	movw	r14, r24
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	d7 01       	movw	r26, r14
     964:	c6 01       	movw	r24, r12
     966:	88 27       	eor	r24, r24
     968:	b7 fd       	sbrc	r27, 7
     96a:	83 95       	inc	r24
     96c:	99 27       	eor	r25, r25
     96e:	aa 27       	eor	r26, r26
     970:	bb 27       	eor	r27, r27
     972:	28 2f       	mov	r18, r24
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	c1 14       	cp	r12, r1
     978:	d1 04       	cpc	r13, r1
     97a:	e1 04       	cpc	r14, r1
     97c:	f1 04       	cpc	r15, r1
     97e:	19 f4       	brne	.+6      	; 0x986 <__floatsisf+0x48>
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	35 c0       	rjmp	.+106    	; 0x9f0 <__floatsisf+0xb2>
     986:	8e e1       	ldi	r24, 0x1E	; 30
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9c 83       	std	Y+4, r25	; 0x04
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	22 23       	and	r18, r18
     990:	89 f0       	breq	.+34     	; 0x9b4 <__floatsisf+0x76>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	c8 16       	cp	r12, r24
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	d8 06       	cpc	r13, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	e8 06       	cpc	r14, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	f8 06       	cpc	r15, r24
     9a2:	59 f1       	breq	.+86     	; 0x9fa <__floatsisf+0xbc>
     9a4:	f0 94       	com	r15
     9a6:	e0 94       	com	r14
     9a8:	d0 94       	com	r13
     9aa:	c0 94       	com	r12
     9ac:	c1 1c       	adc	r12, r1
     9ae:	d1 1c       	adc	r13, r1
     9b0:	e1 1c       	adc	r14, r1
     9b2:	f1 1c       	adc	r15, r1
     9b4:	cd 82       	std	Y+5, r12	; 0x05
     9b6:	de 82       	std	Y+6, r13	; 0x06
     9b8:	ef 82       	std	Y+7, r14	; 0x07
     9ba:	f8 86       	std	Y+8, r15	; 0x08
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	0e 94 67 05 	call	0xace	; 0xace <__clzsi2>
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	18 16       	cp	r1, r24
     9c8:	19 06       	cpc	r1, r25
     9ca:	94 f4       	brge	.+36     	; 0x9f0 <__floatsisf+0xb2>
     9cc:	08 2e       	mov	r0, r24
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__floatsisf+0x9a>
     9d0:	cc 0c       	add	r12, r12
     9d2:	dd 1c       	adc	r13, r13
     9d4:	ee 1c       	adc	r14, r14
     9d6:	ff 1c       	adc	r15, r15
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__floatsisf+0x92>
     9dc:	cd 82       	std	Y+5, r12	; 0x05
     9de:	de 82       	std	Y+6, r13	; 0x06
     9e0:	ef 82       	std	Y+7, r14	; 0x07
     9e2:	f8 86       	std	Y+8, r15	; 0x08
     9e4:	2e e1       	ldi	r18, 0x1E	; 30
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	28 1b       	sub	r18, r24
     9ea:	39 0b       	sbc	r19, r25
     9ec:	3c 83       	std	Y+4, r19	; 0x04
     9ee:	2b 83       	std	Y+3, r18	; 0x03
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__pack_f>
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__floatsisf+0xc4>
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	9f ec       	ldi	r25, 0xCF	; 207
     a02:	38 2f       	mov	r19, r24
     a04:	29 2f       	mov	r18, r25
     a06:	86 2f       	mov	r24, r22
     a08:	97 2f       	mov	r25, r23
     a0a:	a3 2f       	mov	r26, r19
     a0c:	b2 2f       	mov	r27, r18
     a0e:	bc 01       	movw	r22, r24
     a10:	cd 01       	movw	r24, r26
     a12:	28 96       	adiw	r28, 0x08	; 8
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	df 90       	pop	r13
     a28:	cf 90       	pop	r12
     a2a:	08 95       	ret

00000a2c <__fixsfsi>:
     a2c:	ac e0       	ldi	r26, 0x0C	; 12
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	ec e1       	ldi	r30, 0x1C	; 28
     a32:	f5 e0       	ldi	r31, 0x05	; 5
     a34:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__prologue_saves__+0x1c>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	89 83       	std	Y+1, r24	; 0x01
     a3e:	9a 83       	std	Y+2, r25	; 0x02
     a40:	ab 83       	std	Y+3, r26	; 0x03
     a42:	bc 83       	std	Y+4, r27	; 0x04
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	be 01       	movw	r22, r28
     a4a:	6b 5f       	subi	r22, 0xFB	; 251
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	0e 94 91 06 	call	0xd22	; 0xd22 <__unpack_f>
     a52:	8d 81       	ldd	r24, Y+5	; 0x05
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	69 f1       	breq	.+90     	; 0xab2 <__fixsfsi+0x86>
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	58 f1       	brcs	.+86     	; 0xab2 <__fixsfsi+0x86>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	39 f0       	breq	.+14     	; 0xa6e <__fixsfsi+0x42>
     a60:	2f 81       	ldd	r18, Y+7	; 0x07
     a62:	38 85       	ldd	r19, Y+8	; 0x08
     a64:	37 fd       	sbrc	r19, 7
     a66:	25 c0       	rjmp	.+74     	; 0xab2 <__fixsfsi+0x86>
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	44 f0       	brlt	.+16     	; 0xa7e <__fixsfsi+0x52>
     a6e:	8e 81       	ldd	r24, Y+6	; 0x06
     a70:	88 23       	and	r24, r24
     a72:	19 f1       	breq	.+70     	; 0xaba <__fixsfsi+0x8e>
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e8       	ldi	r19, 0x80	; 128
     a7c:	22 c0       	rjmp	.+68     	; 0xac2 <__fixsfsi+0x96>
     a7e:	8e e1       	ldi	r24, 0x1E	; 30
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	82 1b       	sub	r24, r18
     a84:	93 0b       	sbc	r25, r19
     a86:	09 85       	ldd	r16, Y+9	; 0x09
     a88:	1a 85       	ldd	r17, Y+10	; 0x0a
     a8a:	2b 85       	ldd	r18, Y+11	; 0x0b
     a8c:	3c 85       	ldd	r19, Y+12	; 0x0c
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__fixsfsi+0x6c>
     a90:	36 95       	lsr	r19
     a92:	27 95       	ror	r18
     a94:	17 95       	ror	r17
     a96:	07 95       	ror	r16
     a98:	8a 95       	dec	r24
     a9a:	d2 f7       	brpl	.-12     	; 0xa90 <__fixsfsi+0x64>
     a9c:	8e 81       	ldd	r24, Y+6	; 0x06
     a9e:	88 23       	and	r24, r24
     aa0:	81 f0       	breq	.+32     	; 0xac2 <__fixsfsi+0x96>
     aa2:	30 95       	com	r19
     aa4:	20 95       	com	r18
     aa6:	10 95       	com	r17
     aa8:	01 95       	neg	r16
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
     aac:	2f 4f       	sbci	r18, 0xFF	; 255
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <__fixsfsi+0x96>
     ab2:	00 e0       	ldi	r16, 0x00	; 0
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	98 01       	movw	r18, r16
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x96>
     aba:	0f ef       	ldi	r16, 0xFF	; 255
     abc:	1f ef       	ldi	r17, 0xFF	; 255
     abe:	2f ef       	ldi	r18, 0xFF	; 255
     ac0:	3f e7       	ldi	r19, 0x7F	; 127
     ac2:	b8 01       	movw	r22, r16
     ac4:	c9 01       	movw	r24, r18
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e4 e0       	ldi	r30, 0x04	; 4
     aca:	0c 94 97 08 	jmp	0x112e	; 0x112e <__epilogue_restores__+0x1c>

00000ace <__clzsi2>:
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	8b 01       	movw	r16, r22
     adc:	9c 01       	movw	r18, r24
     ade:	00 30       	cpi	r16, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	18 07       	cpc	r17, r24
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	28 07       	cpc	r18, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	38 07       	cpc	r19, r24
     aec:	50 f4       	brcc	.+20     	; 0xb02 <__clzsi2+0x34>
     aee:	0f 3f       	cpi	r16, 0xFF	; 255
     af0:	11 05       	cpc	r17, r1
     af2:	21 05       	cpc	r18, r1
     af4:	31 05       	cpc	r19, r1
     af6:	09 f0       	breq	.+2      	; 0xafa <__clzsi2+0x2c>
     af8:	88 f4       	brcc	.+34     	; 0xb1c <__clzsi2+0x4e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	dc 01       	movw	r26, r24
     b00:	16 c0       	rjmp	.+44     	; 0xb2e <__clzsi2+0x60>
     b02:	00 30       	cpi	r16, 0x00	; 0
     b04:	e0 e0       	ldi	r30, 0x00	; 0
     b06:	1e 07       	cpc	r17, r30
     b08:	e0 e0       	ldi	r30, 0x00	; 0
     b0a:	2e 07       	cpc	r18, r30
     b0c:	e1 e0       	ldi	r30, 0x01	; 1
     b0e:	3e 07       	cpc	r19, r30
     b10:	50 f4       	brcc	.+20     	; 0xb26 <__clzsi2+0x58>
     b12:	80 e1       	ldi	r24, 0x10	; 16
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <__clzsi2+0x60>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <__clzsi2+0x60>
     b26:	88 e1       	ldi	r24, 0x18	; 24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	40 e2       	ldi	r20, 0x20	; 32
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	48 1b       	sub	r20, r24
     b38:	59 0b       	sbc	r21, r25
     b3a:	6a 0b       	sbc	r22, r26
     b3c:	7b 0b       	sbc	r23, r27
     b3e:	68 01       	movw	r12, r16
     b40:	79 01       	movw	r14, r18
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <__clzsi2+0x7e>
     b44:	f6 94       	lsr	r15
     b46:	e7 94       	ror	r14
     b48:	d7 94       	ror	r13
     b4a:	c7 94       	ror	r12
     b4c:	8a 95       	dec	r24
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <__clzsi2+0x76>
     b50:	d7 01       	movw	r26, r14
     b52:	c6 01       	movw	r24, r12
     b54:	86 5d       	subi	r24, 0xD6	; 214
     b56:	9e 4f       	sbci	r25, 0xFE	; 254
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	48 1b       	sub	r20, r24
     b5e:	51 09       	sbc	r21, r1
     b60:	61 09       	sbc	r22, r1
     b62:	71 09       	sbc	r23, r1
     b64:	ca 01       	movw	r24, r20
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	08 95       	ret

00000b74 <__pack_f>:
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	dc 01       	movw	r26, r24
     b82:	14 96       	adiw	r26, 0x04	; 4
     b84:	4d 91       	ld	r20, X+
     b86:	5d 91       	ld	r21, X+
     b88:	6d 91       	ld	r22, X+
     b8a:	7c 91       	ld	r23, X
     b8c:	17 97       	sbiw	r26, 0x07	; 7
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	ec 91       	ld	r30, X
     b92:	11 97       	sbiw	r26, 0x01	; 1
     b94:	8c 91       	ld	r24, X
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	20 f4       	brcc	.+8      	; 0xba2 <__pack_f+0x2e>
     b9a:	60 61       	ori	r22, 0x10	; 16
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a5 c0       	rjmp	.+330    	; 0xcec <__pack_f+0x178>
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	09 f4       	brne	.+2      	; 0xba8 <__pack_f+0x34>
     ba6:	9d c0       	rjmp	.+314    	; 0xce2 <__pack_f+0x16e>
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	09 f4       	brne	.+2      	; 0xbae <__pack_f+0x3a>
     bac:	94 c0       	rjmp	.+296    	; 0xcd6 <__pack_f+0x162>
     bae:	41 15       	cp	r20, r1
     bb0:	51 05       	cpc	r21, r1
     bb2:	61 05       	cpc	r22, r1
     bb4:	71 05       	cpc	r23, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <__pack_f+0x46>
     bb8:	91 c0       	rjmp	.+290    	; 0xcdc <__pack_f+0x168>
     bba:	12 96       	adiw	r26, 0x02	; 2
     bbc:	8d 91       	ld	r24, X+
     bbe:	9c 91       	ld	r25, X
     bc0:	13 97       	sbiw	r26, 0x03	; 3
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	82 38       	cpi	r24, 0x82	; 130
     bc6:	92 07       	cpc	r25, r18
     bc8:	0c f0       	brlt	.+2      	; 0xbcc <__pack_f+0x58>
     bca:	59 c0       	rjmp	.+178    	; 0xc7e <__pack_f+0x10a>
     bcc:	22 e8       	ldi	r18, 0x82	; 130
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	28 1b       	sub	r18, r24
     bd2:	39 0b       	sbc	r19, r25
     bd4:	2a 31       	cpi	r18, 0x1A	; 26
     bd6:	31 05       	cpc	r19, r1
     bd8:	64 f5       	brge	.+88     	; 0xc32 <__pack_f+0xbe>
     bda:	6a 01       	movw	r12, r20
     bdc:	7b 01       	movw	r14, r22
     bde:	02 2e       	mov	r0, r18
     be0:	04 c0       	rjmp	.+8      	; 0xbea <__pack_f+0x76>
     be2:	f6 94       	lsr	r15
     be4:	e7 94       	ror	r14
     be6:	d7 94       	ror	r13
     be8:	c7 94       	ror	r12
     bea:	0a 94       	dec	r0
     bec:	d2 f7       	brpl	.-12     	; 0xbe2 <__pack_f+0x6e>
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	a0 e0       	ldi	r26, 0x00	; 0
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__pack_f+0x8c>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	aa 1f       	adc	r26, r26
     bfe:	bb 1f       	adc	r27, r27
     c00:	2a 95       	dec	r18
     c02:	d2 f7       	brpl	.-12     	; 0xbf8 <__pack_f+0x84>
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	a1 09       	sbc	r26, r1
     c08:	b1 09       	sbc	r27, r1
     c0a:	84 23       	and	r24, r20
     c0c:	95 23       	and	r25, r21
     c0e:	a6 23       	and	r26, r22
     c10:	b7 23       	and	r27, r23
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	19 f4       	brne	.+6      	; 0xc28 <__pack_f+0xb4>
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	ba 01       	movw	r22, r20
     c28:	4c 29       	or	r20, r12
     c2a:	5d 29       	or	r21, r13
     c2c:	6e 29       	or	r22, r14
     c2e:	7f 29       	or	r23, r15
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <__pack_f+0xc4>
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	ba 01       	movw	r22, r20
     c38:	db 01       	movw	r26, r22
     c3a:	ca 01       	movw	r24, r20
     c3c:	8f 77       	andi	r24, 0x7F	; 127
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	a0 70       	andi	r26, 0x00	; 0
     c42:	b0 70       	andi	r27, 0x00	; 0
     c44:	80 34       	cpi	r24, 0x40	; 64
     c46:	91 05       	cpc	r25, r1
     c48:	a1 05       	cpc	r26, r1
     c4a:	b1 05       	cpc	r27, r1
     c4c:	39 f4       	brne	.+14     	; 0xc5c <__pack_f+0xe8>
     c4e:	47 ff       	sbrs	r20, 7
     c50:	09 c0       	rjmp	.+18     	; 0xc64 <__pack_f+0xf0>
     c52:	40 5c       	subi	r20, 0xC0	; 192
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	6f 4f       	sbci	r22, 0xFF	; 255
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__pack_f+0xf0>
     c5c:	41 5c       	subi	r20, 0xC1	; 193
     c5e:	5f 4f       	sbci	r21, 0xFF	; 255
     c60:	6f 4f       	sbci	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	40 30       	cpi	r20, 0x00	; 0
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	52 07       	cpc	r21, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	62 07       	cpc	r22, r18
     c72:	20 e4       	ldi	r18, 0x40	; 64
     c74:	72 07       	cpc	r23, r18
     c76:	38 f5       	brcc	.+78     	; 0xcc6 <__pack_f+0x152>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	24 c0       	rjmp	.+72     	; 0xcc6 <__pack_f+0x152>
     c7e:	80 38       	cpi	r24, 0x80	; 128
     c80:	91 05       	cpc	r25, r1
     c82:	7c f5       	brge	.+94     	; 0xce2 <__pack_f+0x16e>
     c84:	8a 01       	movw	r16, r20
     c86:	9b 01       	movw	r18, r22
     c88:	0f 77       	andi	r16, 0x7F	; 127
     c8a:	10 70       	andi	r17, 0x00	; 0
     c8c:	20 70       	andi	r18, 0x00	; 0
     c8e:	30 70       	andi	r19, 0x00	; 0
     c90:	00 34       	cpi	r16, 0x40	; 64
     c92:	11 05       	cpc	r17, r1
     c94:	21 05       	cpc	r18, r1
     c96:	31 05       	cpc	r19, r1
     c98:	39 f4       	brne	.+14     	; 0xca8 <__pack_f+0x134>
     c9a:	47 ff       	sbrs	r20, 7
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <__pack_f+0x13c>
     c9e:	40 5c       	subi	r20, 0xC0	; 192
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	6f 4f       	sbci	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <__pack_f+0x13c>
     ca8:	41 5c       	subi	r20, 0xC1	; 193
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	6f 4f       	sbci	r22, 0xFF	; 255
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	77 fd       	sbrc	r23, 7
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <__pack_f+0x146>
     cb4:	81 58       	subi	r24, 0x81	; 129
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <__pack_f+0x152>
     cba:	76 95       	lsr	r23
     cbc:	67 95       	ror	r22
     cbe:	57 95       	ror	r21
     cc0:	47 95       	ror	r20
     cc2:	80 58       	subi	r24, 0x80	; 128
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	97 e0       	ldi	r25, 0x07	; 7
     cc8:	76 95       	lsr	r23
     cca:	67 95       	ror	r22
     ccc:	57 95       	ror	r21
     cce:	47 95       	ror	r20
     cd0:	9a 95       	dec	r25
     cd2:	d1 f7       	brne	.-12     	; 0xcc8 <__pack_f+0x154>
     cd4:	0b c0       	rjmp	.+22     	; 0xcec <__pack_f+0x178>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__pack_f+0x172>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <__pack_f+0x178>
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	ba 01       	movw	r22, r20
     cec:	98 2f       	mov	r25, r24
     cee:	97 95       	ror	r25
     cf0:	99 27       	eor	r25, r25
     cf2:	97 95       	ror	r25
     cf4:	a6 2f       	mov	r26, r22
     cf6:	af 77       	andi	r26, 0x7F	; 127
     cf8:	e7 95       	ror	r30
     cfa:	ee 27       	eor	r30, r30
     cfc:	e7 95       	ror	r30
     cfe:	86 95       	lsr	r24
     d00:	3a 2f       	mov	r19, r26
     d02:	39 2b       	or	r19, r25
     d04:	28 2f       	mov	r18, r24
     d06:	2e 2b       	or	r18, r30
     d08:	84 2f       	mov	r24, r20
     d0a:	95 2f       	mov	r25, r21
     d0c:	a3 2f       	mov	r26, r19
     d0e:	b2 2f       	mov	r27, r18
     d10:	bc 01       	movw	r22, r24
     d12:	cd 01       	movw	r24, r26
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <__unpack_f>:
     d22:	dc 01       	movw	r26, r24
     d24:	fb 01       	movw	r30, r22
     d26:	4c 91       	ld	r20, X
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	5c 91       	ld	r21, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	12 96       	adiw	r26, 0x02	; 2
     d30:	8c 91       	ld	r24, X
     d32:	12 97       	sbiw	r26, 0x02	; 2
     d34:	68 2f       	mov	r22, r24
     d36:	6f 77       	andi	r22, 0x7F	; 127
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	98 2f       	mov	r25, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	99 27       	eor	r25, r25
     d40:	99 1f       	adc	r25, r25
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	2c 91       	ld	r18, X
     d46:	13 97       	sbiw	r26, 0x03	; 3
     d48:	82 2f       	mov	r24, r18
     d4a:	88 0f       	add	r24, r24
     d4c:	89 2b       	or	r24, r25
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	22 1f       	adc	r18, r18
     d52:	22 27       	eor	r18, r18
     d54:	22 1f       	adc	r18, r18
     d56:	21 83       	std	Z+1, r18	; 0x01
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	39 f5       	brne	.+78     	; 0xdaa <__unpack_f+0x88>
     d5c:	41 15       	cp	r20, r1
     d5e:	51 05       	cpc	r21, r1
     d60:	61 05       	cpc	r22, r1
     d62:	71 05       	cpc	r23, r1
     d64:	11 f4       	brne	.+4      	; 0xd6a <__unpack_f+0x48>
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	29 c0       	rjmp	.+82     	; 0xdbc <__unpack_f+0x9a>
     d6a:	82 e8       	ldi	r24, 0x82	; 130
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
     d6e:	93 83       	std	Z+3, r25	; 0x03
     d70:	82 83       	std	Z+2, r24	; 0x02
     d72:	27 e0       	ldi	r18, 0x07	; 7
     d74:	44 0f       	add	r20, r20
     d76:	55 1f       	adc	r21, r21
     d78:	66 1f       	adc	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	2a 95       	dec	r18
     d7e:	d1 f7       	brne	.-12     	; 0xd74 <__unpack_f+0x52>
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	80 83       	st	Z, r24
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <__unpack_f+0x76>
     d86:	44 0f       	add	r20, r20
     d88:	55 1f       	adc	r21, r21
     d8a:	66 1f       	adc	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	93 83       	std	Z+3, r25	; 0x03
     d96:	82 83       	std	Z+2, r24	; 0x02
     d98:	40 30       	cpi	r20, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	58 07       	cpc	r21, r24
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	68 07       	cpc	r22, r24
     da2:	80 e4       	ldi	r24, 0x40	; 64
     da4:	78 07       	cpc	r23, r24
     da6:	78 f3       	brcs	.-34     	; 0xd86 <__unpack_f+0x64>
     da8:	20 c0       	rjmp	.+64     	; 0xdea <__unpack_f+0xc8>
     daa:	8f 3f       	cpi	r24, 0xFF	; 255
     dac:	91 05       	cpc	r25, r1
     dae:	79 f4       	brne	.+30     	; 0xdce <__unpack_f+0xac>
     db0:	41 15       	cp	r20, r1
     db2:	51 05       	cpc	r21, r1
     db4:	61 05       	cpc	r22, r1
     db6:	71 05       	cpc	r23, r1
     db8:	19 f4       	brne	.+6      	; 0xdc0 <__unpack_f+0x9e>
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	80 83       	st	Z, r24
     dbe:	08 95       	ret
     dc0:	64 ff       	sbrs	r22, 4
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <__unpack_f+0xa8>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 83       	st	Z, r24
     dc8:	10 c0       	rjmp	.+32     	; 0xdea <__unpack_f+0xc8>
     dca:	10 82       	st	Z, r1
     dcc:	0e c0       	rjmp	.+28     	; 0xdea <__unpack_f+0xc8>
     dce:	8f 57       	subi	r24, 0x7F	; 127
     dd0:	90 40       	sbci	r25, 0x00	; 0
     dd2:	93 83       	std	Z+3, r25	; 0x03
     dd4:	82 83       	std	Z+2, r24	; 0x02
     dd6:	83 e0       	ldi	r24, 0x03	; 3
     dd8:	80 83       	st	Z, r24
     dda:	87 e0       	ldi	r24, 0x07	; 7
     ddc:	44 0f       	add	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	66 1f       	adc	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	8a 95       	dec	r24
     de6:	d1 f7       	brne	.-12     	; 0xddc <__unpack_f+0xba>
     de8:	70 64       	ori	r23, 0x40	; 64
     dea:	44 83       	std	Z+4, r20	; 0x04
     dec:	55 83       	std	Z+5, r21	; 0x05
     dee:	66 83       	std	Z+6, r22	; 0x06
     df0:	77 83       	std	Z+7, r23	; 0x07
     df2:	08 95       	ret

00000df4 <main>:
#if _DEBUG_MODE
// Assign I/O stream to UART
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);
#endif

int main(void){
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	68 97       	sbiw	r28, 0x18	; 24
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
  uint16_t rsize;
  char radiostat0[10],radiostat1[10],temp[4];
  int getidx,postidx;

  // Reset Port D
  DDRD = 0xFF;       // Set PORTD as Output
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x00;
     e0c:	1b b8       	out	0x0b, r1	; 11
  ansi_cl();
  uart_flush();
#endif

  // Initial ATMega386 ADC Peripheral
  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
     e0e:	86 e8       	ldi	r24, 0x86	; 134
     e10:	80 93 7a 00 	sts	0x007A, r24

  // Free running ADC Mode
  ADCSRB = 0x00;
     e14:	10 92 7b 00 	sts	0x007B, r1

  // Initial the AVR ATMega328 SPI Peripheral
  // Set MOSI (PORTB3),SCK (PORTB5) and PORTB2 (SS) as output, others as input
  SPI_DDR = (1<<PORTB3)|(1<<PORTB5)|(1<<PORTB2);
     e18:	8c e2       	ldi	r24, 0x2C	; 44
     e1a:	84 b9       	out	0x04, r24	; 4

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
     e1c:	2a 9a       	sbi	0x05, 2	; 5

  // Enable SPI, Master Mode 0, set the clock rate fck/2
  SPCR = (1<<SPE)|(1<<MSTR);
     e1e:	80 e5       	ldi	r24, 0x50	; 80
     e20:	8c bd       	out	0x2c, r24	; 44
  SPSR |= (1<<SPI2X);
     e22:	8d b5       	in	r24, 0x2d	; 45
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	8d bd       	out	0x2d, r24	; 45

  // Initial ATMega368 Timer/Counter0 Peripheral
  TCCR0A=0x00;                  // Normal Timer0 Operation
     e28:	14 bc       	out	0x24, r1	; 36
  TCCR0B=(1<<CS02)|(1<<CS00);   // Use maximum prescaller: Clk/1024
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	85 bd       	out	0x25, r24	; 37
  TCNT0=0x94;                   // Start counter from 0x94, overflow at 10 mSec
     e2e:	84 e9       	ldi	r24, 0x94	; 148
     e30:	86 bd       	out	0x26, r24	; 38
  TIMSK0=(1<<TOIE0);            // Enable Counter Overflow Interrupt
     e32:	01 e0       	ldi	r16, 0x01	; 1
     e34:	00 93 6e 00 	sts	0x006E, r16
  sei();                        // Enable Interrupt
     e38:	78 94       	sei

  // Initial the W5100 Ethernet
  W5100_Init();
     e3a:	0e 94 65 01 	call	0x2ca	; 0x2ca <W5100_Init>

  // Initial variable used
  sockreg=0;
     e3e:	10 92 2d 02 	sts	0x022D, r1
  tempvalue=0;
     e42:	10 92 2c 02 	sts	0x022C, r1
     e46:	10 92 2b 02 	sts	0x022B, r1
  ledmode=1;
     e4a:	00 93 2e 04 	sts	0x042E, r16
  ledeye=0x01;                  // Initial LED Eye Variables
     e4e:	00 93 2f 04 	sts	0x042F, r16
  ledsign=0;
     e52:	10 92 2a 02 	sts	0x022A, r1
#if _DEBUG_MODE
	printf("Size: %d\n",rsize);
#endif
	if (rsize > 0) {
	  // Now read the client Request
	  if (recv(sockreg,buf,rsize) <= 0) break;
     e56:	8e e2       	ldi	r24, 0x2E	; 46
     e58:	c8 2e       	mov	r12, r24
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	d8 2e       	mov	r13, r24

	    // Now Send the HTTP Response
	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;

	    // Create the HTTP Temperature Response
	    sprintf((char *)temp,"%d",tempvalue);        // Convert temperature value to string
     e5e:	7e 01       	movw	r14, r28
     e60:	08 94       	sec
     e62:	e1 1c       	adc	r14, r1
     e64:	f1 1c       	adc	r15, r1
     e66:	9d e1       	ldi	r25, 0x1D	; 29
     e68:	a9 2e       	mov	r10, r25
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	b9 2e       	mov	r11, r25
  printf("WEB Server Debug Mode\n\n");
#endif

  // Loop forever
  for(;;){
    sockstat=SPI_Read(S0_SR);
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_Read>
    switch(sockstat) {
     e76:	88 31       	cpi	r24, 0x18	; 24
     e78:	09 f4       	brne	.+2      	; 0xe7c <main+0x88>
     e7a:	2a c1       	rjmp	.+596    	; 0x10d0 <main+0x2dc>
     e7c:	89 31       	cpi	r24, 0x19	; 25
     e7e:	28 f4       	brcc	.+10     	; 0xe8a <main+0x96>
     e80:	88 23       	and	r24, r24
     e82:	39 f0       	breq	.+14     	; 0xe92 <main+0x9e>
     e84:	87 31       	cpi	r24, 0x17	; 23
     e86:	99 f7       	brne	.-26     	; 0xe6e <main+0x7a>
     e88:	1a c0       	rjmp	.+52     	; 0xebe <main+0xca>
     e8a:	8a 51       	subi	r24, 0x1A	; 26
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	78 f7       	brcc	.-34     	; 0xe6e <main+0x7a>
     e90:	1f c1       	rjmp	.+574    	; 0x10d0 <main+0x2dc>
     case SOCK_CLOSED:
        if (socket(sockreg,MR_TCP,TCP_PORT) > 0) {
     e92:	80 91 2d 02 	lds	r24, 0x022D
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	40 e5       	ldi	r20, 0x50	; 80
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <socket>
     ea0:	88 23       	and	r24, r24
     ea2:	29 f3       	breq	.-54     	; 0xe6e <main+0x7a>
	  // Listen to Socket 0
	  if (listen(sockreg) <= 0)
     ea4:	80 91 2d 02 	lds	r24, 0x022D
     ea8:	0e 94 25 02 	call	0x44a	; 0x44a <listen>
     eac:	88 23       	and	r24, r24
     eae:	f9 f6       	brne	.-66     	; 0xe6e <main+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eb0:	8f ec       	ldi	r24, 0xCF	; 207
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <main+0xc0>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <main+0xc6>
     eba:	00 00       	nop
     ebc:	d8 cf       	rjmp	.-80     	; 0xe6e <main+0x7a>
	}
	break;

     case SOCK_ESTABLISHED:
	// Get the client request size
        rsize=recv_size();
     ebe:	0e 94 2f 03 	call	0x65e	; 0x65e <recv_size>
     ec2:	ac 01       	movw	r20, r24
#if _DEBUG_MODE
	printf("Size: %d\n",rsize);
#endif
	if (rsize > 0) {
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	09 f4       	brne	.+2      	; 0xeca <main+0xd6>
     ec8:	fe c0       	rjmp	.+508    	; 0x10c6 <main+0x2d2>
	  // Now read the client Request
	  if (recv(sockreg,buf,rsize) <= 0) break;
     eca:	80 91 2d 02 	lds	r24, 0x022D
     ece:	6e e2       	ldi	r22, 0x2E	; 46
     ed0:	72 e0       	ldi	r23, 0x02	; 2
     ed2:	0e 94 cb 02 	call	0x596	; 0x596 <recv>
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	51 f2       	breq	.-108    	; 0xe6e <main+0x7a>
#if _DEBUG_MODE
  	  printf("Content:\n%s\n",buf);
#endif
          // Check the Request Header
	  getidx=strindex((char *)buf,"GET /");
     eda:	8e e2       	ldi	r24, 0x2E	; 46
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	71 e0       	ldi	r23, 0x01	; 1
     ee2:	0e 94 41 03 	call	0x682	; 0x682 <strindex>
     ee6:	8c 01       	movw	r16, r24
	  postidx=strindex((char *)buf,"POST /");
     ee8:	8e e2       	ldi	r24, 0x2E	; 46
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	66 e0       	ldi	r22, 0x06	; 6
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	0e 94 41 03 	call	0x682	; 0x682 <strindex>

	  if (getidx >= 0 || postidx >= 0) {
     ef4:	17 ff       	sbrs	r17, 7
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <main+0x10a>
     ef8:	97 ff       	sbrs	r25, 7
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <main+0x10e>
     efc:	df c0       	rjmp	.+446    	; 0x10bc <main+0x2c8>
#if _DEBUG_MODE
	    printf("Req. Check!\n");
#endif
            // Now check the Radio Button for POST request
	    if (postidx >= 0) {
     efe:	97 fd       	sbrc	r25, 7
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <main+0x13c>
	      if (strindex((char *)buf,"radio=0") > 0)
     f02:	8e e2       	ldi	r24, 0x2E	; 46
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	6d e0       	ldi	r22, 0x0D	; 13
     f08:	71 e0       	ldi	r23, 0x01	; 1
     f0a:	0e 94 41 03 	call	0x682	; 0x682 <strindex>
     f0e:	18 16       	cp	r1, r24
     f10:	19 06       	cpc	r1, r25
     f12:	14 f4       	brge	.+4      	; 0xf18 <main+0x124>
	        ledmode=0;
     f14:	10 92 2e 04 	sts	0x042E, r1

	      if (strindex((char *)buf,"radio=1") > 0)
     f18:	8e e2       	ldi	r24, 0x2E	; 46
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	65 e1       	ldi	r22, 0x15	; 21
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	0e 94 41 03 	call	0x682	; 0x682 <strindex>
     f24:	18 16       	cp	r1, r24
     f26:	19 06       	cpc	r1, r25
     f28:	1c f4       	brge	.+6      	; 0xf30 <main+0x13c>
	        ledmode=1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 2e 04 	sts	0x042E, r24
            }
#if _DEBUG_MODE
	    printf("Req. Send!\n");
#endif
	    // Create the HTTP Response	Header
	    strcpy_P((char *)buf,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
     f30:	8e e2       	ldi	r24, 0x2E	; 46
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	68 e6       	ldi	r22, 0x68	; 104
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 af 08 	call	0x115e	; 0x115e <strcpy_P>
	    strcat_P((char *)buf,PSTR("<html><body><span style=\"color:#0000A0\">\r\n"));
     f3c:	8e e2       	ldi	r24, 0x2E	; 46
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	65 e9       	ldi	r22, 0x95	; 149
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat_P((char *)buf,PSTR("<h1>Embedded Web Server</h1>\r\n"));
     f48:	8e e2       	ldi	r24, 0x2E	; 46
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	60 ec       	ldi	r22, 0xC0	; 192
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat_P((char *)buf,PSTR("<h3>AVRJazz Mega328 and WIZ811MJ</h3>\r\n"));
     f54:	8e e2       	ldi	r24, 0x2E	; 46
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	6f ed       	ldi	r22, 0xDF	; 223
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat_P((char *)buf,PSTR("<p><form method=\"POST\">\r\n"));
     f60:	8e e2       	ldi	r24, 0x2E	; 46
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	67 e0       	ldi	r22, 0x07	; 7
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>

	    // Now Send the HTTP Response
	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;
     f6c:	d6 01       	movw	r26, r12
     f6e:	0d 90       	ld	r0, X+
     f70:	00 20       	and	r0, r0
     f72:	e9 f7       	brne	.-6      	; 0xf6e <main+0x17a>
     f74:	ad 01       	movw	r20, r26
     f76:	41 50       	subi	r20, 0x01	; 1
     f78:	50 40       	sbci	r21, 0x00	; 0
     f7a:	4e 52       	subi	r20, 0x2E	; 46
     f7c:	52 40       	sbci	r21, 0x02	; 2
     f7e:	80 91 2d 02 	lds	r24, 0x022D
     f82:	6e e2       	ldi	r22, 0x2E	; 46
     f84:	72 e0       	ldi	r23, 0x02	; 2
     f86:	0e 94 45 02 	call	0x48a	; 0x48a <send>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	09 f4       	brne	.+2      	; 0xf90 <main+0x19c>
     f8e:	6f cf       	rjmp	.-290    	; 0xe6e <main+0x7a>

	    // Create the HTTP Temperature Response
	    sprintf((char *)temp,"%d",tempvalue);        // Convert temperature value to string
     f90:	00 d0       	rcall	.+0      	; 0xf92 <main+0x19e>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <main+0x1a0>
     f94:	00 d0       	rcall	.+0      	; 0xf96 <main+0x1a2>
     f96:	ed b7       	in	r30, 0x3d	; 61
     f98:	fe b7       	in	r31, 0x3e	; 62
     f9a:	31 96       	adiw	r30, 0x01	; 1
     f9c:	ad b7       	in	r26, 0x3d	; 61
     f9e:	be b7       	in	r27, 0x3e	; 62
     fa0:	12 96       	adiw	r26, 0x02	; 2
     fa2:	fc 92       	st	X, r15
     fa4:	ee 92       	st	-X, r14
     fa6:	11 97       	sbiw	r26, 0x01	; 1
     fa8:	b3 82       	std	Z+3, r11	; 0x03
     faa:	a2 82       	std	Z+2, r10	; 0x02
     fac:	80 91 2b 02 	lds	r24, 0x022B
     fb0:	90 91 2c 02 	lds	r25, 0x022C
     fb4:	95 83       	std	Z+5, r25	; 0x05
     fb6:	84 83       	std	Z+4, r24	; 0x04
     fb8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sprintf>

	    strcpy_P((char *)buf,PSTR("<strong>Temp: <input type=\"text\" size=2 value=\""));
     fbc:	ed b7       	in	r30, 0x3d	; 61
     fbe:	fe b7       	in	r31, 0x3e	; 62
     fc0:	36 96       	adiw	r30, 0x06	; 6
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	fe bf       	out	0x3e, r31	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	ed bf       	out	0x3d, r30	; 61
     fcc:	8e e2       	ldi	r24, 0x2E	; 46
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	61 e2       	ldi	r22, 0x21	; 33
     fd2:	71 e0       	ldi	r23, 0x01	; 1
     fd4:	0e 94 af 08 	call	0x115e	; 0x115e <strcpy_P>
	    strcat((char *)buf,temp);
     fd8:	8e e2       	ldi	r24, 0x2E	; 46
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	b7 01       	movw	r22, r14
     fde:	0e 94 b6 08 	call	0x116c	; 0x116c <strcat>
	    strcat_P((char *)buf,PSTR("\"> <sup>O</sup>C\r\n"));
     fe2:	8e e2       	ldi	r24, 0x2E	; 46
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	61 e5       	ldi	r22, 0x51	; 81
     fe8:	71 e0       	ldi	r23, 0x01	; 1
     fea:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>

	    if (ledmode == 1) {
     fee:	80 91 2e 04 	lds	r24, 0x042E
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	69 f4       	brne	.+26     	; 0x1010 <main+0x21c>
	      strcpy(radiostat0,"");
     ff6:	ce 01       	movw	r24, r28
     ff8:	0f 96       	adiw	r24, 0x0f	; 15
     ffa:	60 e2       	ldi	r22, 0x20	; 32
     ffc:	71 e0       	ldi	r23, 0x01	; 1
     ffe:	0e 94 c1 08 	call	0x1182	; 0x1182 <strcpy>
	      strcpy_P(radiostat1,PSTR("checked"));
    1002:	ce 01       	movw	r24, r28
    1004:	05 96       	adiw	r24, 0x05	; 5
    1006:	64 e6       	ldi	r22, 0x64	; 100
    1008:	71 e0       	ldi	r23, 0x01	; 1
    100a:	0e 94 af 08 	call	0x115e	; 0x115e <strcpy_P>
    100e:	0c c0       	rjmp	.+24     	; 0x1028 <main+0x234>
	    } else {
	      strcpy_P(radiostat0,PSTR("checked"));
    1010:	ce 01       	movw	r24, r28
    1012:	0f 96       	adiw	r24, 0x0f	; 15
    1014:	6c e6       	ldi	r22, 0x6C	; 108
    1016:	71 e0       	ldi	r23, 0x01	; 1
    1018:	0e 94 af 08 	call	0x115e	; 0x115e <strcpy_P>
	      strcpy(radiostat1,"");
    101c:	ce 01       	movw	r24, r28
    101e:	05 96       	adiw	r24, 0x05	; 5
    1020:	60 e2       	ldi	r22, 0x20	; 32
    1022:	71 e0       	ldi	r23, 0x01	; 1
    1024:	0e 94 c1 08 	call	0x1182	; 0x1182 <strcpy>
	    }

            // Create the HTTP Radio Button 0 Response
	    strcat_P((char *)buf,PSTR("<p><input type=\"radio\" name=\"radio\" value=\"0\" "));
    1028:	8e e2       	ldi	r24, 0x2E	; 46
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	64 e7       	ldi	r22, 0x74	; 116
    102e:	71 e0       	ldi	r23, 0x01	; 1
    1030:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat((char *)buf,radiostat0);
    1034:	8e e2       	ldi	r24, 0x2E	; 46
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	be 01       	movw	r22, r28
    103a:	61 5f       	subi	r22, 0xF1	; 241
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	0e 94 b6 08 	call	0x116c	; 0x116c <strcat>
	    strcat_P((char *)buf,PSTR(">Blinking LED\r\n"));
    1042:	8e e2       	ldi	r24, 0x2E	; 46
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	63 ea       	ldi	r22, 0xA3	; 163
    1048:	71 e0       	ldi	r23, 0x01	; 1
    104a:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat_P((char *)buf,PSTR("<br><input type=\"radio\" name=\"radio\" value=\"1\" "));
    104e:	8e e2       	ldi	r24, 0x2E	; 46
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	63 eb       	ldi	r22, 0xB3	; 179
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat((char *)buf,radiostat1);
    105a:	8e e2       	ldi	r24, 0x2E	; 46
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	be 01       	movw	r22, r28
    1060:	6b 5f       	subi	r22, 0xFB	; 251
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	0e 94 b6 08 	call	0x116c	; 0x116c <strcat>
	    strcat_P((char *)buf,PSTR(">Scanning LED\r\n"));
    1068:	8e e2       	ldi	r24, 0x2E	; 46
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	63 ee       	ldi	r22, 0xE3	; 227
    106e:	71 e0       	ldi	r23, 0x01	; 1
    1070:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
 	    strcat_P((char *)buf,PSTR("</strong><p>\r\n"));
    1074:	8e e2       	ldi	r24, 0x2E	; 46
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	63 ef       	ldi	r22, 0xF3	; 243
    107a:	71 e0       	ldi	r23, 0x01	; 1
    107c:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat_P((char *)buf,PSTR("<input type=\"submit\">\r\n"));
    1080:	8e e2       	ldi	r24, 0x2E	; 46
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	72 e0       	ldi	r23, 0x02	; 2
    1088:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>
	    strcat_P((char *)buf,PSTR("</form></span></body></html>\r\n"));
    108c:	8e e2       	ldi	r24, 0x2E	; 46
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	6a e1       	ldi	r22, 0x1A	; 26
    1092:	72 e0       	ldi	r23, 0x02	; 2
    1094:	0e 94 a4 08 	call	0x1148	; 0x1148 <strcat_P>

            // Now Send the HTTP Remaining Response
	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;
    1098:	d6 01       	movw	r26, r12
    109a:	0d 90       	ld	r0, X+
    109c:	00 20       	and	r0, r0
    109e:	e9 f7       	brne	.-6      	; 0x109a <main+0x2a6>
    10a0:	ad 01       	movw	r20, r26
    10a2:	41 50       	subi	r20, 0x01	; 1
    10a4:	50 40       	sbci	r21, 0x00	; 0
    10a6:	4e 52       	subi	r20, 0x2E	; 46
    10a8:	52 40       	sbci	r21, 0x02	; 2
    10aa:	80 91 2d 02 	lds	r24, 0x022D
    10ae:	6e e2       	ldi	r22, 0x2E	; 46
    10b0:	72 e0       	ldi	r23, 0x02	; 2
    10b2:	0e 94 45 02 	call	0x48a	; 0x48a <send>
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	09 f4       	brne	.+2      	; 0x10bc <main+0x2c8>
    10ba:	d9 ce       	rjmp	.-590    	; 0xe6e <main+0x7a>
          }

	  // Disconnect the socket
	  disconnect(sockreg);
    10bc:	80 91 2d 02 	lds	r24, 0x022D
    10c0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disconnect>
    10c4:	d4 ce       	rjmp	.-600    	; 0xe6e <main+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c6:	ba e1       	ldi	r27, 0x1A	; 26
    10c8:	ba 95       	dec	r27
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main+0x2d4>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <main+0x2da>
    10ce:	cf ce       	rjmp	.-610    	; 0xe6e <main+0x7a>
      case SOCK_CLOSING:
      case SOCK_TIME_WAIT:
      case SOCK_CLOSE_WAIT:
      case SOCK_LAST_ACK:
        // Force to close the socket
	close(sockreg);
    10d0:	80 91 2d 02 	lds	r24, 0x022D
    10d4:	0e 94 cf 01 	call	0x39e	; 0x39e <close>
#if _DEBUG_MODE
	printf("Socket Close!\n");
#endif
	break;
    10d8:	ca ce       	rjmp	.-620    	; 0xe6e <main+0x7a>

000010da <__prologue_saves__>:
    10da:	2f 92       	push	r2
    10dc:	3f 92       	push	r3
    10de:	4f 92       	push	r4
    10e0:	5f 92       	push	r5
    10e2:	6f 92       	push	r6
    10e4:	7f 92       	push	r7
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	ca 1b       	sub	r28, r26
    1104:	db 0b       	sbc	r29, r27
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	09 94       	ijmp

00001112 <__epilogue_restores__>:
    1112:	2a 88       	ldd	r2, Y+18	; 0x12
    1114:	39 88       	ldd	r3, Y+17	; 0x11
    1116:	48 88       	ldd	r4, Y+16	; 0x10
    1118:	5f 84       	ldd	r5, Y+15	; 0x0f
    111a:	6e 84       	ldd	r6, Y+14	; 0x0e
    111c:	7d 84       	ldd	r7, Y+13	; 0x0d
    111e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1120:	9b 84       	ldd	r9, Y+11	; 0x0b
    1122:	aa 84       	ldd	r10, Y+10	; 0x0a
    1124:	b9 84       	ldd	r11, Y+9	; 0x09
    1126:	c8 84       	ldd	r12, Y+8	; 0x08
    1128:	df 80       	ldd	r13, Y+7	; 0x07
    112a:	ee 80       	ldd	r14, Y+6	; 0x06
    112c:	fd 80       	ldd	r15, Y+5	; 0x05
    112e:	0c 81       	ldd	r16, Y+4	; 0x04
    1130:	1b 81       	ldd	r17, Y+3	; 0x03
    1132:	aa 81       	ldd	r26, Y+2	; 0x02
    1134:	b9 81       	ldd	r27, Y+1	; 0x01
    1136:	ce 0f       	add	r28, r30
    1138:	d1 1d       	adc	r29, r1
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	ed 01       	movw	r28, r26
    1146:	08 95       	ret

00001148 <strcat_P>:
    1148:	fb 01       	movw	r30, r22
    114a:	dc 01       	movw	r26, r24
    114c:	0d 90       	ld	r0, X+
    114e:	00 20       	and	r0, r0
    1150:	e9 f7       	brne	.-6      	; 0x114c <strcat_P+0x4>
    1152:	11 97       	sbiw	r26, 0x01	; 1
    1154:	05 90       	lpm	r0, Z+
    1156:	0d 92       	st	X+, r0
    1158:	00 20       	and	r0, r0
    115a:	e1 f7       	brne	.-8      	; 0x1154 <strcat_P+0xc>
    115c:	08 95       	ret

0000115e <strcpy_P>:
    115e:	fb 01       	movw	r30, r22
    1160:	dc 01       	movw	r26, r24
    1162:	05 90       	lpm	r0, Z+
    1164:	0d 92       	st	X+, r0
    1166:	00 20       	and	r0, r0
    1168:	e1 f7       	brne	.-8      	; 0x1162 <strcpy_P+0x4>
    116a:	08 95       	ret

0000116c <strcat>:
    116c:	fb 01       	movw	r30, r22
    116e:	dc 01       	movw	r26, r24
    1170:	0d 90       	ld	r0, X+
    1172:	00 20       	and	r0, r0
    1174:	e9 f7       	brne	.-6      	; 0x1170 <strcat+0x4>
    1176:	11 97       	sbiw	r26, 0x01	; 1
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	00 20       	and	r0, r0
    117e:	e1 f7       	brne	.-8      	; 0x1178 <strcat+0xc>
    1180:	08 95       	ret

00001182 <strcpy>:
    1182:	fb 01       	movw	r30, r22
    1184:	dc 01       	movw	r26, r24
    1186:	01 90       	ld	r0, Z+
    1188:	0d 92       	st	X+, r0
    118a:	00 20       	and	r0, r0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <strcpy+0x4>
    118e:	08 95       	ret

00001190 <strncmp>:
    1190:	fb 01       	movw	r30, r22
    1192:	dc 01       	movw	r26, r24
    1194:	41 50       	subi	r20, 0x01	; 1
    1196:	50 40       	sbci	r21, 0x00	; 0
    1198:	30 f0       	brcs	.+12     	; 0x11a6 <strncmp+0x16>
    119a:	8d 91       	ld	r24, X+
    119c:	01 90       	ld	r0, Z+
    119e:	80 19       	sub	r24, r0
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <strncmp+0x18>
    11a2:	00 20       	and	r0, r0
    11a4:	b9 f7       	brne	.-18     	; 0x1194 <strncmp+0x4>
    11a6:	88 1b       	sub	r24, r24
    11a8:	99 0b       	sbc	r25, r25
    11aa:	08 95       	ret

000011ac <sprintf>:
    11ac:	ae e0       	ldi	r26, 0x0E	; 14
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ec ed       	ldi	r30, 0xDC	; 220
    11b2:	f8 e0       	ldi	r31, 0x08	; 8
    11b4:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__prologue_saves__+0x1c>
    11b8:	0d 89       	ldd	r16, Y+21	; 0x15
    11ba:	1e 89       	ldd	r17, Y+22	; 0x16
    11bc:	86 e0       	ldi	r24, 0x06	; 6
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	1a 83       	std	Y+2, r17	; 0x02
    11c2:	09 83       	std	Y+1, r16	; 0x01
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	9f e7       	ldi	r25, 0x7F	; 127
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	ae 01       	movw	r20, r28
    11ce:	47 5e       	subi	r20, 0xE7	; 231
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	6f 89       	ldd	r22, Y+23	; 0x17
    11d8:	78 8d       	ldd	r23, Y+24	; 0x18
    11da:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <vfprintf>
    11de:	ef 81       	ldd	r30, Y+7	; 0x07
    11e0:	f8 85       	ldd	r31, Y+8	; 0x08
    11e2:	e0 0f       	add	r30, r16
    11e4:	f1 1f       	adc	r31, r17
    11e6:	10 82       	st	Z, r1
    11e8:	2e 96       	adiw	r28, 0x0e	; 14
    11ea:	e4 e0       	ldi	r30, 0x04	; 4
    11ec:	0c 94 97 08 	jmp	0x112e	; 0x112e <__epilogue_restores__+0x1c>

000011f0 <vfprintf>:
    11f0:	ad e0       	ldi	r26, 0x0D	; 13
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee ef       	ldi	r30, 0xFE	; 254
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__prologue_saves__>
    11fc:	3c 01       	movw	r6, r24
    11fe:	7d 87       	std	Y+13, r23	; 0x0d
    1200:	6c 87       	std	Y+12, r22	; 0x0c
    1202:	5a 01       	movw	r10, r20
    1204:	fc 01       	movw	r30, r24
    1206:	17 82       	std	Z+7, r1	; 0x07
    1208:	16 82       	std	Z+6, r1	; 0x06
    120a:	83 81       	ldd	r24, Z+3	; 0x03
    120c:	81 ff       	sbrs	r24, 1
    120e:	c8 c1       	rjmp	.+912    	; 0x15a0 <vfprintf+0x3b0>
    1210:	2e 01       	movw	r4, r28
    1212:	08 94       	sec
    1214:	41 1c       	adc	r4, r1
    1216:	51 1c       	adc	r5, r1
    1218:	f3 01       	movw	r30, r6
    121a:	93 81       	ldd	r25, Z+3	; 0x03
    121c:	ec 85       	ldd	r30, Y+12	; 0x0c
    121e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1220:	93 fd       	sbrc	r25, 3
    1222:	85 91       	lpm	r24, Z+
    1224:	93 ff       	sbrs	r25, 3
    1226:	81 91       	ld	r24, Z+
    1228:	fd 87       	std	Y+13, r31	; 0x0d
    122a:	ec 87       	std	Y+12, r30	; 0x0c
    122c:	88 23       	and	r24, r24
    122e:	09 f4       	brne	.+2      	; 0x1232 <vfprintf+0x42>
    1230:	b3 c1       	rjmp	.+870    	; 0x1598 <vfprintf+0x3a8>
    1232:	85 32       	cpi	r24, 0x25	; 37
    1234:	41 f4       	brne	.+16     	; 0x1246 <vfprintf+0x56>
    1236:	93 fd       	sbrc	r25, 3
    1238:	85 91       	lpm	r24, Z+
    123a:	93 ff       	sbrs	r25, 3
    123c:	81 91       	ld	r24, Z+
    123e:	fd 87       	std	Y+13, r31	; 0x0d
    1240:	ec 87       	std	Y+12, r30	; 0x0c
    1242:	85 32       	cpi	r24, 0x25	; 37
    1244:	29 f4       	brne	.+10     	; 0x1250 <vfprintf+0x60>
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	b3 01       	movw	r22, r6
    124a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    124e:	e4 cf       	rjmp	.-56     	; 0x1218 <vfprintf+0x28>
    1250:	ff 24       	eor	r15, r15
    1252:	ee 24       	eor	r14, r14
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	10 32       	cpi	r17, 0x20	; 32
    1258:	b0 f4       	brcc	.+44     	; 0x1286 <vfprintf+0x96>
    125a:	8b 32       	cpi	r24, 0x2B	; 43
    125c:	69 f0       	breq	.+26     	; 0x1278 <vfprintf+0x88>
    125e:	8c 32       	cpi	r24, 0x2C	; 44
    1260:	28 f4       	brcc	.+10     	; 0x126c <vfprintf+0x7c>
    1262:	80 32       	cpi	r24, 0x20	; 32
    1264:	51 f0       	breq	.+20     	; 0x127a <vfprintf+0x8a>
    1266:	83 32       	cpi	r24, 0x23	; 35
    1268:	71 f4       	brne	.+28     	; 0x1286 <vfprintf+0x96>
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <vfprintf+0x92>
    126c:	8d 32       	cpi	r24, 0x2D	; 45
    126e:	39 f0       	breq	.+14     	; 0x127e <vfprintf+0x8e>
    1270:	80 33       	cpi	r24, 0x30	; 48
    1272:	49 f4       	brne	.+18     	; 0x1286 <vfprintf+0x96>
    1274:	11 60       	ori	r17, 0x01	; 1
    1276:	2c c0       	rjmp	.+88     	; 0x12d0 <vfprintf+0xe0>
    1278:	12 60       	ori	r17, 0x02	; 2
    127a:	14 60       	ori	r17, 0x04	; 4
    127c:	29 c0       	rjmp	.+82     	; 0x12d0 <vfprintf+0xe0>
    127e:	18 60       	ori	r17, 0x08	; 8
    1280:	27 c0       	rjmp	.+78     	; 0x12d0 <vfprintf+0xe0>
    1282:	10 61       	ori	r17, 0x10	; 16
    1284:	25 c0       	rjmp	.+74     	; 0x12d0 <vfprintf+0xe0>
    1286:	17 fd       	sbrc	r17, 7
    1288:	2e c0       	rjmp	.+92     	; 0x12e6 <vfprintf+0xf6>
    128a:	28 2f       	mov	r18, r24
    128c:	20 53       	subi	r18, 0x30	; 48
    128e:	2a 30       	cpi	r18, 0x0A	; 10
    1290:	98 f4       	brcc	.+38     	; 0x12b8 <vfprintf+0xc8>
    1292:	16 ff       	sbrs	r17, 6
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <vfprintf+0xb6>
    1296:	8f 2d       	mov	r24, r15
    1298:	88 0f       	add	r24, r24
    129a:	f8 2e       	mov	r15, r24
    129c:	ff 0c       	add	r15, r15
    129e:	ff 0c       	add	r15, r15
    12a0:	f8 0e       	add	r15, r24
    12a2:	f2 0e       	add	r15, r18
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <vfprintf+0xe0>
    12a6:	8e 2d       	mov	r24, r14
    12a8:	88 0f       	add	r24, r24
    12aa:	e8 2e       	mov	r14, r24
    12ac:	ee 0c       	add	r14, r14
    12ae:	ee 0c       	add	r14, r14
    12b0:	e8 0e       	add	r14, r24
    12b2:	e2 0e       	add	r14, r18
    12b4:	10 62       	ori	r17, 0x20	; 32
    12b6:	0c c0       	rjmp	.+24     	; 0x12d0 <vfprintf+0xe0>
    12b8:	8e 32       	cpi	r24, 0x2E	; 46
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <vfprintf+0xd4>
    12bc:	16 fd       	sbrc	r17, 6
    12be:	6c c1       	rjmp	.+728    	; 0x1598 <vfprintf+0x3a8>
    12c0:	10 64       	ori	r17, 0x40	; 64
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <vfprintf+0xe0>
    12c4:	8c 36       	cpi	r24, 0x6C	; 108
    12c6:	11 f4       	brne	.+4      	; 0x12cc <vfprintf+0xdc>
    12c8:	10 68       	ori	r17, 0x80	; 128
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0xe0>
    12cc:	88 36       	cpi	r24, 0x68	; 104
    12ce:	59 f4       	brne	.+22     	; 0x12e6 <vfprintf+0xf6>
    12d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    12d2:	fd 85       	ldd	r31, Y+13	; 0x0d
    12d4:	93 fd       	sbrc	r25, 3
    12d6:	85 91       	lpm	r24, Z+
    12d8:	93 ff       	sbrs	r25, 3
    12da:	81 91       	ld	r24, Z+
    12dc:	fd 87       	std	Y+13, r31	; 0x0d
    12de:	ec 87       	std	Y+12, r30	; 0x0c
    12e0:	88 23       	and	r24, r24
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <vfprintf+0xf6>
    12e4:	b8 cf       	rjmp	.-144    	; 0x1256 <vfprintf+0x66>
    12e6:	98 2f       	mov	r25, r24
    12e8:	95 54       	subi	r25, 0x45	; 69
    12ea:	93 30       	cpi	r25, 0x03	; 3
    12ec:	18 f0       	brcs	.+6      	; 0x12f4 <vfprintf+0x104>
    12ee:	90 52       	subi	r25, 0x20	; 32
    12f0:	93 30       	cpi	r25, 0x03	; 3
    12f2:	38 f4       	brcc	.+14     	; 0x1302 <vfprintf+0x112>
    12f4:	24 e0       	ldi	r18, 0x04	; 4
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	a2 0e       	add	r10, r18
    12fa:	b3 1e       	adc	r11, r19
    12fc:	3f e3       	ldi	r19, 0x3F	; 63
    12fe:	39 83       	std	Y+1, r19	; 0x01
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <vfprintf+0x130>
    1302:	83 36       	cpi	r24, 0x63	; 99
    1304:	31 f0       	breq	.+12     	; 0x1312 <vfprintf+0x122>
    1306:	83 37       	cpi	r24, 0x73	; 115
    1308:	81 f0       	breq	.+32     	; 0x132a <vfprintf+0x13a>
    130a:	83 35       	cpi	r24, 0x53	; 83
    130c:	09 f0       	breq	.+2      	; 0x1310 <vfprintf+0x120>
    130e:	5a c0       	rjmp	.+180    	; 0x13c4 <vfprintf+0x1d4>
    1310:	22 c0       	rjmp	.+68     	; 0x1356 <vfprintf+0x166>
    1312:	f5 01       	movw	r30, r10
    1314:	80 81       	ld	r24, Z
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	22 e0       	ldi	r18, 0x02	; 2
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	a2 0e       	add	r10, r18
    131e:	b3 1e       	adc	r11, r19
    1320:	21 e0       	ldi	r18, 0x01	; 1
    1322:	c2 2e       	mov	r12, r18
    1324:	d1 2c       	mov	r13, r1
    1326:	42 01       	movw	r8, r4
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <vfprintf+0x162>
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	29 2e       	mov	r2, r25
    132e:	31 2c       	mov	r3, r1
    1330:	2a 0c       	add	r2, r10
    1332:	3b 1c       	adc	r3, r11
    1334:	f5 01       	movw	r30, r10
    1336:	80 80       	ld	r8, Z
    1338:	91 80       	ldd	r9, Z+1	; 0x01
    133a:	16 ff       	sbrs	r17, 6
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <vfprintf+0x154>
    133e:	6f 2d       	mov	r22, r15
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <vfprintf+0x158>
    1344:	6f ef       	ldi	r22, 0xFF	; 255
    1346:	7f ef       	ldi	r23, 0xFF	; 255
    1348:	c4 01       	movw	r24, r8
    134a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <strnlen>
    134e:	6c 01       	movw	r12, r24
    1350:	51 01       	movw	r10, r2
    1352:	1f 77       	andi	r17, 0x7F	; 127
    1354:	15 c0       	rjmp	.+42     	; 0x1380 <vfprintf+0x190>
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	28 2e       	mov	r2, r24
    135a:	31 2c       	mov	r3, r1
    135c:	2a 0c       	add	r2, r10
    135e:	3b 1c       	adc	r3, r11
    1360:	f5 01       	movw	r30, r10
    1362:	80 80       	ld	r8, Z
    1364:	91 80       	ldd	r9, Z+1	; 0x01
    1366:	16 ff       	sbrs	r17, 6
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <vfprintf+0x180>
    136a:	6f 2d       	mov	r22, r15
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <vfprintf+0x184>
    1370:	6f ef       	ldi	r22, 0xFF	; 255
    1372:	7f ef       	ldi	r23, 0xFF	; 255
    1374:	c4 01       	movw	r24, r8
    1376:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <strnlen_P>
    137a:	6c 01       	movw	r12, r24
    137c:	10 68       	ori	r17, 0x80	; 128
    137e:	51 01       	movw	r10, r2
    1380:	13 fd       	sbrc	r17, 3
    1382:	1c c0       	rjmp	.+56     	; 0x13bc <vfprintf+0x1cc>
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <vfprintf+0x1a2>
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	b3 01       	movw	r22, r6
    138c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    1390:	ea 94       	dec	r14
    1392:	8e 2d       	mov	r24, r14
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	c8 16       	cp	r12, r24
    1398:	d9 06       	cpc	r13, r25
    139a:	a8 f3       	brcs	.-22     	; 0x1386 <vfprintf+0x196>
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <vfprintf+0x1cc>
    139e:	f4 01       	movw	r30, r8
    13a0:	17 fd       	sbrc	r17, 7
    13a2:	85 91       	lpm	r24, Z+
    13a4:	17 ff       	sbrs	r17, 7
    13a6:	81 91       	ld	r24, Z+
    13a8:	4f 01       	movw	r8, r30
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	b3 01       	movw	r22, r6
    13ae:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    13b2:	e1 10       	cpse	r14, r1
    13b4:	ea 94       	dec	r14
    13b6:	08 94       	sec
    13b8:	c1 08       	sbc	r12, r1
    13ba:	d1 08       	sbc	r13, r1
    13bc:	c1 14       	cp	r12, r1
    13be:	d1 04       	cpc	r13, r1
    13c0:	71 f7       	brne	.-36     	; 0x139e <vfprintf+0x1ae>
    13c2:	e7 c0       	rjmp	.+462    	; 0x1592 <vfprintf+0x3a2>
    13c4:	84 36       	cpi	r24, 0x64	; 100
    13c6:	11 f0       	breq	.+4      	; 0x13cc <vfprintf+0x1dc>
    13c8:	89 36       	cpi	r24, 0x69	; 105
    13ca:	51 f5       	brne	.+84     	; 0x1420 <vfprintf+0x230>
    13cc:	f5 01       	movw	r30, r10
    13ce:	17 ff       	sbrs	r17, 7
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <vfprintf+0x1f0>
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	a2 81       	ldd	r26, Z+2	; 0x02
    13d8:	b3 81       	ldd	r27, Z+3	; 0x03
    13da:	24 e0       	ldi	r18, 0x04	; 4
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <vfprintf+0x200>
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	aa 27       	eor	r26, r26
    13e6:	97 fd       	sbrc	r25, 7
    13e8:	a0 95       	com	r26
    13ea:	ba 2f       	mov	r27, r26
    13ec:	22 e0       	ldi	r18, 0x02	; 2
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	a2 0e       	add	r10, r18
    13f2:	b3 1e       	adc	r11, r19
    13f4:	01 2f       	mov	r16, r17
    13f6:	0f 76       	andi	r16, 0x6F	; 111
    13f8:	b7 ff       	sbrs	r27, 7
    13fa:	08 c0       	rjmp	.+16     	; 0x140c <vfprintf+0x21c>
    13fc:	b0 95       	com	r27
    13fe:	a0 95       	com	r26
    1400:	90 95       	com	r25
    1402:	81 95       	neg	r24
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	af 4f       	sbci	r26, 0xFF	; 255
    1408:	bf 4f       	sbci	r27, 0xFF	; 255
    140a:	00 68       	ori	r16, 0x80	; 128
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	a2 01       	movw	r20, r4
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	0e 94 18 0b 	call	0x1630	; 0x1630 <__ultoa_invert>
    141a:	d8 2e       	mov	r13, r24
    141c:	d4 18       	sub	r13, r4
    141e:	3f c0       	rjmp	.+126    	; 0x149e <vfprintf+0x2ae>
    1420:	85 37       	cpi	r24, 0x75	; 117
    1422:	21 f4       	brne	.+8      	; 0x142c <vfprintf+0x23c>
    1424:	1f 7e       	andi	r17, 0xEF	; 239
    1426:	2a e0       	ldi	r18, 0x0A	; 10
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	20 c0       	rjmp	.+64     	; 0x146c <vfprintf+0x27c>
    142c:	19 7f       	andi	r17, 0xF9	; 249
    142e:	8f 36       	cpi	r24, 0x6F	; 111
    1430:	a9 f0       	breq	.+42     	; 0x145c <vfprintf+0x26c>
    1432:	80 37       	cpi	r24, 0x70	; 112
    1434:	20 f4       	brcc	.+8      	; 0x143e <vfprintf+0x24e>
    1436:	88 35       	cpi	r24, 0x58	; 88
    1438:	09 f0       	breq	.+2      	; 0x143c <vfprintf+0x24c>
    143a:	ae c0       	rjmp	.+348    	; 0x1598 <vfprintf+0x3a8>
    143c:	0b c0       	rjmp	.+22     	; 0x1454 <vfprintf+0x264>
    143e:	80 37       	cpi	r24, 0x70	; 112
    1440:	21 f0       	breq	.+8      	; 0x144a <vfprintf+0x25a>
    1442:	88 37       	cpi	r24, 0x78	; 120
    1444:	09 f0       	breq	.+2      	; 0x1448 <vfprintf+0x258>
    1446:	a8 c0       	rjmp	.+336    	; 0x1598 <vfprintf+0x3a8>
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x25c>
    144a:	10 61       	ori	r17, 0x10	; 16
    144c:	14 ff       	sbrs	r17, 4
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <vfprintf+0x272>
    1450:	14 60       	ori	r17, 0x04	; 4
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <vfprintf+0x272>
    1454:	14 ff       	sbrs	r17, 4
    1456:	08 c0       	rjmp	.+16     	; 0x1468 <vfprintf+0x278>
    1458:	16 60       	ori	r17, 0x06	; 6
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x278>
    145c:	28 e0       	ldi	r18, 0x08	; 8
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	05 c0       	rjmp	.+10     	; 0x146c <vfprintf+0x27c>
    1462:	20 e1       	ldi	r18, 0x10	; 16
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x27c>
    1468:	20 e1       	ldi	r18, 0x10	; 16
    146a:	32 e0       	ldi	r19, 0x02	; 2
    146c:	f5 01       	movw	r30, r10
    146e:	17 ff       	sbrs	r17, 7
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <vfprintf+0x290>
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	44 e0       	ldi	r20, 0x04	; 4
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x29c>
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	a4 0e       	add	r10, r20
    148e:	b5 1e       	adc	r11, r21
    1490:	a2 01       	movw	r20, r4
    1492:	0e 94 18 0b 	call	0x1630	; 0x1630 <__ultoa_invert>
    1496:	d8 2e       	mov	r13, r24
    1498:	d4 18       	sub	r13, r4
    149a:	01 2f       	mov	r16, r17
    149c:	0f 77       	andi	r16, 0x7F	; 127
    149e:	06 ff       	sbrs	r16, 6
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <vfprintf+0x2c4>
    14a2:	0e 7f       	andi	r16, 0xFE	; 254
    14a4:	df 14       	cp	r13, r15
    14a6:	30 f4       	brcc	.+12     	; 0x14b4 <vfprintf+0x2c4>
    14a8:	04 ff       	sbrs	r16, 4
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0x2c8>
    14ac:	02 fd       	sbrc	r16, 2
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <vfprintf+0x2c8>
    14b0:	0f 7e       	andi	r16, 0xEF	; 239
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <vfprintf+0x2c8>
    14b4:	1d 2d       	mov	r17, r13
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <vfprintf+0x2ca>
    14b8:	1f 2d       	mov	r17, r15
    14ba:	80 2f       	mov	r24, r16
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	04 ff       	sbrs	r16, 4
    14c0:	0c c0       	rjmp	.+24     	; 0x14da <vfprintf+0x2ea>
    14c2:	fe 01       	movw	r30, r28
    14c4:	ed 0d       	add	r30, r13
    14c6:	f1 1d       	adc	r31, r1
    14c8:	20 81       	ld	r18, Z
    14ca:	20 33       	cpi	r18, 0x30	; 48
    14cc:	11 f4       	brne	.+4      	; 0x14d2 <vfprintf+0x2e2>
    14ce:	09 7e       	andi	r16, 0xE9	; 233
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <vfprintf+0x2f4>
    14d2:	02 ff       	sbrs	r16, 2
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <vfprintf+0x2f2>
    14d6:	1e 5f       	subi	r17, 0xFE	; 254
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <vfprintf+0x2f4>
    14da:	86 78       	andi	r24, 0x86	; 134
    14dc:	90 70       	andi	r25, 0x00	; 0
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <vfprintf+0x2f4>
    14e2:	1f 5f       	subi	r17, 0xFF	; 255
    14e4:	80 2e       	mov	r8, r16
    14e6:	99 24       	eor	r9, r9
    14e8:	03 fd       	sbrc	r16, 3
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <vfprintf+0x320>
    14ec:	00 ff       	sbrs	r16, 0
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <vfprintf+0x31a>
    14f0:	fd 2c       	mov	r15, r13
    14f2:	1e 15       	cp	r17, r14
    14f4:	50 f4       	brcc	.+20     	; 0x150a <vfprintf+0x31a>
    14f6:	fe 0c       	add	r15, r14
    14f8:	f1 1a       	sub	r15, r17
    14fa:	1e 2d       	mov	r17, r14
    14fc:	06 c0       	rjmp	.+12     	; 0x150a <vfprintf+0x31a>
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	b3 01       	movw	r22, r6
    1504:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    1508:	1f 5f       	subi	r17, 0xFF	; 255
    150a:	1e 15       	cp	r17, r14
    150c:	c0 f3       	brcs	.-16     	; 0x14fe <vfprintf+0x30e>
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <vfprintf+0x328>
    1510:	1e 15       	cp	r17, r14
    1512:	10 f4       	brcc	.+4      	; 0x1518 <vfprintf+0x328>
    1514:	e1 1a       	sub	r14, r17
    1516:	01 c0       	rjmp	.+2      	; 0x151a <vfprintf+0x32a>
    1518:	ee 24       	eor	r14, r14
    151a:	84 fe       	sbrs	r8, 4
    151c:	0f c0       	rjmp	.+30     	; 0x153c <vfprintf+0x34c>
    151e:	80 e3       	ldi	r24, 0x30	; 48
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	b3 01       	movw	r22, r6
    1524:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    1528:	82 fe       	sbrs	r8, 2
    152a:	1f c0       	rjmp	.+62     	; 0x156a <vfprintf+0x37a>
    152c:	81 fe       	sbrs	r8, 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x346>
    1530:	88 e5       	ldi	r24, 0x58	; 88
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	10 c0       	rjmp	.+32     	; 0x1556 <vfprintf+0x366>
    1536:	88 e7       	ldi	r24, 0x78	; 120
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <vfprintf+0x366>
    153c:	c4 01       	movw	r24, r8
    153e:	86 78       	andi	r24, 0x86	; 134
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	91 f0       	breq	.+36     	; 0x156a <vfprintf+0x37a>
    1546:	81 fc       	sbrc	r8, 1
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x35e>
    154a:	80 e2       	ldi	r24, 0x20	; 32
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <vfprintf+0x360>
    154e:	8b e2       	ldi	r24, 0x2B	; 43
    1550:	07 fd       	sbrc	r16, 7
    1552:	8d e2       	ldi	r24, 0x2D	; 45
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	b3 01       	movw	r22, r6
    1558:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x37a>
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	b3 01       	movw	r22, r6
    1564:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    1568:	fa 94       	dec	r15
    156a:	df 14       	cp	r13, r15
    156c:	c0 f3       	brcs	.-16     	; 0x155e <vfprintf+0x36e>
    156e:	da 94       	dec	r13
    1570:	f2 01       	movw	r30, r4
    1572:	ed 0d       	add	r30, r13
    1574:	f1 1d       	adc	r31, r1
    1576:	80 81       	ld	r24, Z
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	b3 01       	movw	r22, r6
    157c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    1580:	dd 20       	and	r13, r13
    1582:	a9 f7       	brne	.-22     	; 0x156e <vfprintf+0x37e>
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <vfprintf+0x3a2>
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	b3 01       	movw	r22, r6
    158c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <fputc>
    1590:	ea 94       	dec	r14
    1592:	ee 20       	and	r14, r14
    1594:	c1 f7       	brne	.-16     	; 0x1586 <vfprintf+0x396>
    1596:	40 ce       	rjmp	.-896    	; 0x1218 <vfprintf+0x28>
    1598:	f3 01       	movw	r30, r6
    159a:	86 81       	ldd	r24, Z+6	; 0x06
    159c:	97 81       	ldd	r25, Z+7	; 0x07
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x3b4>
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	9f ef       	ldi	r25, 0xFF	; 255
    15a4:	2d 96       	adiw	r28, 0x0d	; 13
    15a6:	e2 e1       	ldi	r30, 0x12	; 18
    15a8:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__epilogue_restores__>

000015ac <strnlen_P>:
    15ac:	fc 01       	movw	r30, r24
    15ae:	05 90       	lpm	r0, Z+
    15b0:	61 50       	subi	r22, 0x01	; 1
    15b2:	70 40       	sbci	r23, 0x00	; 0
    15b4:	01 10       	cpse	r0, r1
    15b6:	d8 f7       	brcc	.-10     	; 0x15ae <strnlen_P+0x2>
    15b8:	80 95       	com	r24
    15ba:	90 95       	com	r25
    15bc:	8e 0f       	add	r24, r30
    15be:	9f 1f       	adc	r25, r31
    15c0:	08 95       	ret

000015c2 <strnlen>:
    15c2:	fc 01       	movw	r30, r24
    15c4:	61 50       	subi	r22, 0x01	; 1
    15c6:	70 40       	sbci	r23, 0x00	; 0
    15c8:	01 90       	ld	r0, Z+
    15ca:	01 10       	cpse	r0, r1
    15cc:	d8 f7       	brcc	.-10     	; 0x15c4 <strnlen+0x2>
    15ce:	80 95       	com	r24
    15d0:	90 95       	com	r25
    15d2:	8e 0f       	add	r24, r30
    15d4:	9f 1f       	adc	r25, r31
    15d6:	08 95       	ret

000015d8 <fputc>:
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	8c 01       	movw	r16, r24
    15e2:	eb 01       	movw	r28, r22
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	81 ff       	sbrs	r24, 1
    15e8:	1b c0       	rjmp	.+54     	; 0x1620 <fputc+0x48>
    15ea:	82 ff       	sbrs	r24, 2
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <fputc+0x30>
    15ee:	2e 81       	ldd	r18, Y+6	; 0x06
    15f0:	3f 81       	ldd	r19, Y+7	; 0x07
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	28 17       	cp	r18, r24
    15f8:	39 07       	cpc	r19, r25
    15fa:	64 f4       	brge	.+24     	; 0x1614 <fputc+0x3c>
    15fc:	e8 81       	ld	r30, Y
    15fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1600:	01 93       	st	Z+, r16
    1602:	f9 83       	std	Y+1, r31	; 0x01
    1604:	e8 83       	st	Y, r30
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <fputc+0x3c>
    1608:	e8 85       	ldd	r30, Y+8	; 0x08
    160a:	f9 85       	ldd	r31, Y+9	; 0x09
    160c:	80 2f       	mov	r24, r16
    160e:	09 95       	icall
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	31 f4       	brne	.+12     	; 0x1620 <fputc+0x48>
    1614:	8e 81       	ldd	r24, Y+6	; 0x06
    1616:	9f 81       	ldd	r25, Y+7	; 0x07
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	9f 83       	std	Y+7, r25	; 0x07
    161c:	8e 83       	std	Y+6, r24	; 0x06
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <fputc+0x4c>
    1620:	0f ef       	ldi	r16, 0xFF	; 255
    1622:	1f ef       	ldi	r17, 0xFF	; 255
    1624:	c8 01       	movw	r24, r16
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <__ultoa_invert>:
    1630:	fa 01       	movw	r30, r20
    1632:	aa 27       	eor	r26, r26
    1634:	28 30       	cpi	r18, 0x08	; 8
    1636:	51 f1       	breq	.+84     	; 0x168c <__ultoa_invert+0x5c>
    1638:	20 31       	cpi	r18, 0x10	; 16
    163a:	81 f1       	breq	.+96     	; 0x169c <__ultoa_invert+0x6c>
    163c:	e8 94       	clt
    163e:	6f 93       	push	r22
    1640:	6e 7f       	andi	r22, 0xFE	; 254
    1642:	6e 5f       	subi	r22, 0xFE	; 254
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	8f 4f       	sbci	r24, 0xFF	; 255
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	af 4f       	sbci	r26, 0xFF	; 255
    164c:	b1 e0       	ldi	r27, 0x01	; 1
    164e:	3e d0       	rcall	.+124    	; 0x16cc <__ultoa_invert+0x9c>
    1650:	b4 e0       	ldi	r27, 0x04	; 4
    1652:	3c d0       	rcall	.+120    	; 0x16cc <__ultoa_invert+0x9c>
    1654:	67 0f       	add	r22, r23
    1656:	78 1f       	adc	r23, r24
    1658:	89 1f       	adc	r24, r25
    165a:	9a 1f       	adc	r25, r26
    165c:	a1 1d       	adc	r26, r1
    165e:	68 0f       	add	r22, r24
    1660:	79 1f       	adc	r23, r25
    1662:	8a 1f       	adc	r24, r26
    1664:	91 1d       	adc	r25, r1
    1666:	a1 1d       	adc	r26, r1
    1668:	6a 0f       	add	r22, r26
    166a:	71 1d       	adc	r23, r1
    166c:	81 1d       	adc	r24, r1
    166e:	91 1d       	adc	r25, r1
    1670:	a1 1d       	adc	r26, r1
    1672:	20 d0       	rcall	.+64     	; 0x16b4 <__ultoa_invert+0x84>
    1674:	09 f4       	brne	.+2      	; 0x1678 <__ultoa_invert+0x48>
    1676:	68 94       	set
    1678:	3f 91       	pop	r19
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	26 9f       	mul	r18, r22
    167e:	11 24       	eor	r1, r1
    1680:	30 19       	sub	r19, r0
    1682:	30 5d       	subi	r19, 0xD0	; 208
    1684:	31 93       	st	Z+, r19
    1686:	de f6       	brtc	.-74     	; 0x163e <__ultoa_invert+0xe>
    1688:	cf 01       	movw	r24, r30
    168a:	08 95       	ret
    168c:	46 2f       	mov	r20, r22
    168e:	47 70       	andi	r20, 0x07	; 7
    1690:	40 5d       	subi	r20, 0xD0	; 208
    1692:	41 93       	st	Z+, r20
    1694:	b3 e0       	ldi	r27, 0x03	; 3
    1696:	0f d0       	rcall	.+30     	; 0x16b6 <__ultoa_invert+0x86>
    1698:	c9 f7       	brne	.-14     	; 0x168c <__ultoa_invert+0x5c>
    169a:	f6 cf       	rjmp	.-20     	; 0x1688 <__ultoa_invert+0x58>
    169c:	46 2f       	mov	r20, r22
    169e:	4f 70       	andi	r20, 0x0F	; 15
    16a0:	40 5d       	subi	r20, 0xD0	; 208
    16a2:	4a 33       	cpi	r20, 0x3A	; 58
    16a4:	18 f0       	brcs	.+6      	; 0x16ac <__ultoa_invert+0x7c>
    16a6:	49 5d       	subi	r20, 0xD9	; 217
    16a8:	31 fd       	sbrc	r19, 1
    16aa:	40 52       	subi	r20, 0x20	; 32
    16ac:	41 93       	st	Z+, r20
    16ae:	02 d0       	rcall	.+4      	; 0x16b4 <__ultoa_invert+0x84>
    16b0:	a9 f7       	brne	.-22     	; 0x169c <__ultoa_invert+0x6c>
    16b2:	ea cf       	rjmp	.-44     	; 0x1688 <__ultoa_invert+0x58>
    16b4:	b4 e0       	ldi	r27, 0x04	; 4
    16b6:	a6 95       	lsr	r26
    16b8:	97 95       	ror	r25
    16ba:	87 95       	ror	r24
    16bc:	77 95       	ror	r23
    16be:	67 95       	ror	r22
    16c0:	ba 95       	dec	r27
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <__ultoa_invert+0x86>
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	61 05       	cpc	r22, r1
    16c8:	71 05       	cpc	r23, r1
    16ca:	08 95       	ret
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	0a 2e       	mov	r0, r26
    16d2:	06 94       	lsr	r0
    16d4:	57 95       	ror	r21
    16d6:	47 95       	ror	r20
    16d8:	37 95       	ror	r19
    16da:	27 95       	ror	r18
    16dc:	ba 95       	dec	r27
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__ultoa_invert+0xa2>
    16e0:	62 0f       	add	r22, r18
    16e2:	73 1f       	adc	r23, r19
    16e4:	84 1f       	adc	r24, r20
    16e6:	95 1f       	adc	r25, r21
    16e8:	a0 1d       	adc	r26, r0
    16ea:	08 95       	ret

000016ec <_exit>:
    16ec:	f8 94       	cli

000016ee <__stop_program>:
    16ee:	ff cf       	rjmp	.-2      	; 0x16ee <__stop_program>

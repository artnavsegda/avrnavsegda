
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000084  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004fe  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000486  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e1  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a2  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	19 c0       	rjmp	.+50     	; 0x3c <__vector_4>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	14 d0       	rcall	.+40     	; 0x60 <main>
  38:	23 c0       	rjmp	.+70     	; 0x80 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <__vector_4>:
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect)
{
  3c:	1f 92       	push	r1
  3e:	0f 92       	push	r0
  40:	0f b6       	in	r0, 0x3f	; 63
  42:	0f 92       	push	r0
  44:	11 24       	eor	r1, r1
  46:	8f 93       	push	r24
  48:	9f 93       	push	r25
    // toggle led here
	PORTD ^= _BV(PORTD5);//invert state
  4a:	92 b3       	in	r25, 0x12	; 18
  4c:	80 e2       	ldi	r24, 0x20	; 32
  4e:	89 27       	eor	r24, r25
  50:	82 bb       	out	0x12, r24	; 18
}
  52:	9f 91       	pop	r25
  54:	8f 91       	pop	r24
  56:	0f 90       	pop	r0
  58:	0f be       	out	0x3f, r0	; 63
  5a:	0f 90       	pop	r0
  5c:	1f 90       	pop	r1
  5e:	18 95       	reti

00000060 <main>:

int main(void)
{
	DDRD = 0xFF;
  60:	8f ef       	ldi	r24, 0xFF	; 255
  62:	81 bb       	out	0x11, r24	; 17
	TCCR1B |= _BV(WGM12)|_BV(CS12)|_BV(CS10);
  64:	8e b5       	in	r24, 0x2e	; 46
  66:	8d 60       	ori	r24, 0x0D	; 13
  68:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  6a:	1d bc       	out	0x2d, r1	; 45
  6c:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0x1E83;
  6e:	83 e8       	ldi	r24, 0x83	; 131
  70:	9e e1       	ldi	r25, 0x1E	; 30
  72:	9b bd       	out	0x2b, r25	; 43
  74:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= _BV(OCIE1A);
  76:	89 b7       	in	r24, 0x39	; 57
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	89 bf       	out	0x39, r24	; 57
	sei();
  7c:	78 94       	sei
	while(1);
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x1e>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>

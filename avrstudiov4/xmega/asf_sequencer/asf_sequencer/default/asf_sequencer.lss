
asf_sequencer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00040000  00040000  00003b1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00003a36  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000030  00802000  00003a36  00003aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000006f  00802030  00802030  00003b5e  2**0
                  ALLOC
  4 .stab         00000d8c  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000027a  00000000  00000000  000048ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000378  00000000  00000000  00004b68  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009f76  00000000  00000000  00004ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024ec  00000000  00000000  0000ee56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003df9  00000000  00000000  00011342  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d00  00000000  00000000  0001513c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000339b  00000000  00000000  00016e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000069c1  00000000  00000000  0001a1d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  00020b98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00040000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   40000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   40002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   40004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   40006:	80 91 ca 01 	lds	r24, 0x01CA
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   4000a:	40 93 ca 01 	sts	0x01CA, r20
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   4000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   40010:	70 93 34 00 	sts	0x0034, r23
	spm                   ; Self-program.
   40014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   40016:	80 93 ca 01 	sts	0x01CA, r24
	out RAMPZ, r25        ; Restore RAMPZ register.
   4001a:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   4001c:	08 95       	ret

0004001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   4001e:	20 91 cf 01 	lds	r18, 0x01CF
	sbrc r18, NVM_NVMBUSY_bp
   40022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   40024:	fc cf       	rjmp	.-8      	; 0x4001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   40026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   40028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   4002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   4002c:	80 91 ca 01 	lds	r24, 0x01CA
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   40030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   40032:	20 93 ca 01 	sts	0x01CA, r18

	movw r0, r20          ; Load R20:R21 into R0:R1
   40036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   40038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   4003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   4003c:	80 93 ca 01 	sts	0x01CA, r24
	out RAMPZ, r25        ; Restore RAMPZ register.
   40040:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   40042:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 01 	jmp	0x218	; 0x218 <__ctors_end>
       4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
       c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      10:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      18:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      1c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      20:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      24:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      28:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      2c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      30:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      34:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_13>
      38:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_14>
      3c:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_15>
      40:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_16>
      44:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_17>
      48:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__vector_18>
      4c:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_19>
      50:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_20>
      54:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_21>
      58:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__vector_22>
      5c:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_23>
      60:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      68:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      6c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      70:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      7c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      80:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      84:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      88:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      8c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      90:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      94:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      9c:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_39>
      a0:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_40>
      a4:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_41>
      a8:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_42>
      ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      b8:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_46>
      bc:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_47>
      c0:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_48>
      c4:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__vector_49>
      c8:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_50>
      cc:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_51>
      d0:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__vector_52>
      d4:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__vector_53>
      d8:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_54>
      dc:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__vector_55>
      e0:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_56>
      e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
      fc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     100:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     104:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     108:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     10c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     110:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     114:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     118:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     11c:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__vector_71>
     120:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_72>
     124:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_73>
     128:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_74>
     12c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     130:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     134:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_77>
     138:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_78>
     13c:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__vector_79>
     140:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__vector_80>
     144:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_81>
     148:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__vector_82>
     14c:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_83>
     150:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_84>
     154:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__vector_85>
     158:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_86>
     15c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     160:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     164:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     168:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     16c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     170:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     174:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     178:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     17c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     180:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     184:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     188:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     18c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     190:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     194:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     198:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     19c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1a8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ac:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1b0:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__vector_108>
     1b4:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_109>
     1b8:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__vector_110>
     1bc:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__vector_111>
     1c0:	0c 94 26 11 	jmp	0x224c	; 0x224c <__vector_112>
     1c4:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__vector_113>
     1c8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1cc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1d8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1dc:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1e8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1ec:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f4:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>
     1f8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__bad_interrupt>

000001fc <baudctrl_2mhz>:
     1fc:	bc e5 ac c5 9c 85 96 03 92 c1 91 21 90 96           ...........!..

0000020a <baudctrl_32mhz>:
     20a:	1d 03 ed 01 dc fd cc f5 bc e5 ac c5 a8 6e           .............n

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	df e5       	ldi	r29, 0x5F	; 95
     220:	de bf       	out	0x3e, r29	; 62
     222:	cd bf       	out	0x3d, r28	; 61
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	10 e2       	ldi	r17, 0x20	; 32
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e6 e3       	ldi	r30, 0x36	; 54
     230:	fa e3       	ldi	r31, 0x3A	; 58
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a0 33       	cpi	r26, 0x30	; 48
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>
     242:	1b be       	out	0x3b, r1	; 59

00000244 <__do_clear_bss>:
     244:	10 e2       	ldi	r17, 0x20	; 32
     246:	a0 e3       	ldi	r26, 0x30	; 48
     248:	b0 e2       	ldi	r27, 0x20	; 32
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	af 39       	cpi	r26, 0x9F	; 159
     250:	b1 07       	cpc	r27, r17
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	0e 94 44 18 	call	0x3088	; 0x3088 <main>
     258:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_exit>

0000025c <__bad_interrupt>:
     25c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000260 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     266:	0e 94 62 02 	call	0x4c4	; 0x4c4 <usart_getchar>
     26a:	88 83       	st	Y, r24
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     272:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <usart_putchar>
}
     276:	08 95       	ret

00000278 <AD7705_Init>:
	.stopbits     = false
};

void AD7705_Init(void)
{
    ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	96 e0       	ldi	r25, 0x06	; 6
     27c:	60 e1       	ldi	r22, 0x10	; 16
     27e:	43 e0       	ldi	r20, 0x03	; 3
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <ioport_configure_port_pin>
    ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
     286:	80 e4       	ldi	r24, 0x40	; 64
     288:	96 e0       	ldi	r25, 0x06	; 6
     28a:	60 e2       	ldi	r22, 0x20	; 32
     28c:	43 e0       	ldi	r20, 0x03	; 3
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <ioport_configure_port_pin>
    ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	96 e0       	ldi	r25, 0x06	; 6
     298:	60 e4       	ldi	r22, 0x40	; 64
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <ioport_configure_port_pin>
    ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
     2a2:	80 e4       	ldi	r24, 0x40	; 64
     2a4:	96 e0       	ldi	r25, 0x06	; 6
     2a6:	60 e8       	ldi	r22, 0x80	; 128
     2a8:	43 e0       	ldi	r20, 0x03	; 3
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <ioport_configure_port_pin>
	spi_master_init(&SPIC);
     2b0:	80 ec       	ldi	r24, 0xC0	; 192
     2b2:	98 e0       	ldi	r25, 0x08	; 8
     2b4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <spi_master_init>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     2b8:	80 91 c0 08 	lds	r24, 0x08C0
     2bc:	80 64       	ori	r24, 0x40	; 64
     2be:	80 93 c0 08 	sts	0x08C0, r24
	spi_enable(&SPIC);
	spi_write_packet(&SPIC, "\xFF\xFF\xFF\xFF\xFF", 5);
     2c2:	80 ec       	ldi	r24, 0xC0	; 192
     2c4:	98 e0       	ldi	r25, 0x08	; 8
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e2       	ldi	r23, 0x20	; 32
     2ca:	45 e0       	ldi	r20, 0x05	; 5
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	0e 94 2b 0a 	call	0x1456	; 0x1456 <spi_write_packet>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
     2d6:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	8e 34       	cpi	r24, 0x4E	; 78
     2dc:	92 07       	cpc	r25, r18
     2de:	d9 f7       	brne	.-10     	; 0x2d6 <AD7705_Init+0x5e>
	delay_ms(1);
	spi_write_packet(&SPIC, "\x20\x0C\x10\x04", 4);
     2e0:	80 ec       	ldi	r24, 0xC0	; 192
     2e2:	98 e0       	ldi	r25, 0x08	; 8
     2e4:	66 e0       	ldi	r22, 0x06	; 6
     2e6:	70 e2       	ldi	r23, 0x20	; 32
     2e8:	44 e0       	ldi	r20, 0x04	; 4
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	0e 94 2b 0a 	call	0x1456	; 0x1456 <spi_write_packet>
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
     2f4:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     2f6:	21 e0       	ldi	r18, 0x01	; 1
     2f8:	8e 34       	cpi	r24, 0x4E	; 78
     2fa:	92 07       	cpc	r25, r18
     2fc:	d9 f7       	brne	.-10     	; 0x2f4 <AD7705_Init+0x7c>
	delay_ms(1);
	spi_write_packet(&SPIC, "\x60\x18\x3A\x00", 4);
     2fe:	80 ec       	ldi	r24, 0xC0	; 192
     300:	98 e0       	ldi	r25, 0x08	; 8
     302:	6b e0       	ldi	r22, 0x0B	; 11
     304:	70 e2       	ldi	r23, 0x20	; 32
     306:	44 e0       	ldi	r20, 0x04	; 4
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <spi_write_packet>
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
     312:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	8e 34       	cpi	r24, 0x4E	; 78
     318:	92 07       	cpc	r25, r18
     31a:	d9 f7       	brne	.-10     	; 0x312 <AD7705_Init+0x9a>
	delay_ms(1);
	spi_write_packet(&SPIC, "\x70\x89\x78\xD7", 4);
     31c:	80 ec       	ldi	r24, 0xC0	; 192
     31e:	98 e0       	ldi	r25, 0x08	; 8
     320:	60 e1       	ldi	r22, 0x10	; 16
     322:	70 e2       	ldi	r23, 0x20	; 32
     324:	44 e0       	ldi	r20, 0x04	; 4
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	0e 94 2b 0a 	call	0x1456	; 0x1456 <spi_write_packet>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
     330:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	8e 34       	cpi	r24, 0x4E	; 78
     336:	92 07       	cpc	r25, r18
     338:	d9 f7       	brne	.-10     	; 0x330 <AD7705_Init+0xb8>
	delay_ms(1);
}
     33a:	08 95       	ret

0000033c <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	09 f4       	brne	.+2      	; 0x342 <sysclk_enable_peripheral_clock+0x6>
     340:	b8 c0       	rjmp	.+368    	; 0x4b2 <sysclk_enable_peripheral_clock+0x176>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     342:	80 3c       	cpi	r24, 0xC0	; 192
     344:	91 05       	cpc	r25, r1
     346:	11 f4       	brne	.+4      	; 0x34c <sysclk_enable_peripheral_clock+0x10>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	81 c0       	rjmp	.+258    	; 0x44e <sysclk_enable_peripheral_clock+0x112>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	80 38       	cpi	r24, 0x80	; 128
     350:	92 07       	cpc	r25, r18
     352:	11 f4       	brne	.+4      	; 0x358 <sysclk_enable_peripheral_clock+0x1c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	18 c0       	rjmp	.+48     	; 0x388 <sysclk_enable_peripheral_clock+0x4c>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	80 30       	cpi	r24, 0x00	; 0
     35c:	92 07       	cpc	r25, r18
     35e:	11 f4       	brne	.+4      	; 0x364 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	05 c0       	rjmp	.+10     	; 0x36e <sysclk_enable_peripheral_clock+0x32>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     364:	23 e0       	ldi	r18, 0x03	; 3
     366:	80 38       	cpi	r24, 0x80	; 128
     368:	92 07       	cpc	r25, r18
     36a:	19 f4       	brne	.+6      	; 0x372 <sysclk_enable_peripheral_clock+0x36>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	95 c0       	rjmp	.+298    	; 0x49c <sysclk_enable_peripheral_clock+0x160>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     372:	23 e0       	ldi	r18, 0x03	; 3
     374:	80 39       	cpi	r24, 0x90	; 144
     376:	92 07       	cpc	r25, r18
     378:	11 f4       	brne	.+4      	; 0x37e <sysclk_enable_peripheral_clock+0x42>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	f8 cf       	rjmp	.-16     	; 0x36e <sysclk_enable_peripheral_clock+0x32>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     37e:	22 e0       	ldi	r18, 0x02	; 2
     380:	80 30       	cpi	r24, 0x00	; 0
     382:	92 07       	cpc	r25, r18
     384:	19 f4       	brne	.+6      	; 0x38c <sysclk_enable_peripheral_clock+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	62 e0       	ldi	r22, 0x02	; 2
     38a:	88 c0       	rjmp	.+272    	; 0x49c <sysclk_enable_peripheral_clock+0x160>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     38c:	22 e0       	ldi	r18, 0x02	; 2
     38e:	80 34       	cpi	r24, 0x40	; 64
     390:	92 07       	cpc	r25, r18
     392:	11 f4       	brne	.+4      	; 0x398 <sysclk_enable_peripheral_clock+0x5c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	f8 cf       	rjmp	.-16     	; 0x388 <sysclk_enable_peripheral_clock+0x4c>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	80 32       	cpi	r24, 0x20	; 32
     39c:	92 07       	cpc	r25, r18
     39e:	11 f4       	brne	.+4      	; 0x3a4 <sysclk_enable_peripheral_clock+0x68>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	41 c0       	rjmp	.+130    	; 0x426 <sysclk_enable_peripheral_clock+0xea>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     3a4:	28 e0       	ldi	r18, 0x08	; 8
     3a6:	80 30       	cpi	r24, 0x00	; 0
     3a8:	92 07       	cpc	r25, r18
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	df cf       	rjmp	.-66     	; 0x36e <sysclk_enable_peripheral_clock+0x32>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     3b0:	29 e0       	ldi	r18, 0x09	; 9
     3b2:	80 30       	cpi	r24, 0x00	; 0
     3b4:	92 07       	cpc	r25, r18
     3b6:	11 f4       	brne	.+4      	; 0x3bc <sysclk_enable_peripheral_clock+0x80>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	d9 cf       	rjmp	.-78     	; 0x36e <sysclk_enable_peripheral_clock+0x32>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     3bc:	2a e0       	ldi	r18, 0x0A	; 10
     3be:	80 30       	cpi	r24, 0x00	; 0
     3c0:	92 07       	cpc	r25, r18
     3c2:	11 f4       	brne	.+4      	; 0x3c8 <sysclk_enable_peripheral_clock+0x8c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	d3 cf       	rjmp	.-90     	; 0x36e <sysclk_enable_peripheral_clock+0x32>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     3c8:	2b e0       	ldi	r18, 0x0B	; 11
     3ca:	80 30       	cpi	r24, 0x00	; 0
     3cc:	92 07       	cpc	r25, r18
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <sysclk_enable_peripheral_clock+0x98>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	cd cf       	rjmp	.-102    	; 0x36e <sysclk_enable_peripheral_clock+0x32>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     3d4:	28 e0       	ldi	r18, 0x08	; 8
     3d6:	80 34       	cpi	r24, 0x40	; 64
     3d8:	92 07       	cpc	r25, r18
     3da:	11 f4       	brne	.+4      	; 0x3e0 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	d4 cf       	rjmp	.-88     	; 0x388 <sysclk_enable_peripheral_clock+0x4c>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     3e0:	29 e0       	ldi	r18, 0x09	; 9
     3e2:	80 34       	cpi	r24, 0x40	; 64
     3e4:	92 07       	cpc	r25, r18
     3e6:	11 f4       	brne	.+4      	; 0x3ec <sysclk_enable_peripheral_clock+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	ce cf       	rjmp	.-100    	; 0x388 <sysclk_enable_peripheral_clock+0x4c>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     3ec:	2a e0       	ldi	r18, 0x0A	; 10
     3ee:	80 34       	cpi	r24, 0x40	; 64
     3f0:	92 07       	cpc	r25, r18
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <sysclk_enable_peripheral_clock+0xbc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	c8 cf       	rjmp	.-112    	; 0x388 <sysclk_enable_peripheral_clock+0x4c>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     3f8:	28 e0       	ldi	r18, 0x08	; 8
     3fa:	80 39       	cpi	r24, 0x90	; 144
     3fc:	92 07       	cpc	r25, r18
     3fe:	11 f4       	brne	.+4      	; 0x404 <sysclk_enable_peripheral_clock+0xc8>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	11 c0       	rjmp	.+34     	; 0x426 <sysclk_enable_peripheral_clock+0xea>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     404:	29 e0       	ldi	r18, 0x09	; 9
     406:	80 39       	cpi	r24, 0x90	; 144
     408:	92 07       	cpc	r25, r18
     40a:	11 f4       	brne	.+4      	; 0x410 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	0b c0       	rjmp	.+22     	; 0x426 <sysclk_enable_peripheral_clock+0xea>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	80 39       	cpi	r24, 0x90	; 144
     414:	92 07       	cpc	r25, r18
     416:	11 f4       	brne	.+4      	; 0x41c <sysclk_enable_peripheral_clock+0xe0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	05 c0       	rjmp	.+10     	; 0x426 <sysclk_enable_peripheral_clock+0xea>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     41c:	2b e0       	ldi	r18, 0x0B	; 11
     41e:	80 39       	cpi	r24, 0x90	; 144
     420:	92 07       	cpc	r25, r18
     422:	19 f4       	brne	.+6      	; 0x42a <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     424:	86 e0       	ldi	r24, 0x06	; 6
     426:	64 e0       	ldi	r22, 0x04	; 4
     428:	39 c0       	rjmp	.+114    	; 0x49c <sysclk_enable_peripheral_clock+0x160>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     42a:	28 e0       	ldi	r18, 0x08	; 8
     42c:	80 3c       	cpi	r24, 0xC0	; 192
     42e:	92 07       	cpc	r25, r18
     430:	11 f4       	brne	.+4      	; 0x436 <sysclk_enable_peripheral_clock+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	05 c0       	rjmp	.+10     	; 0x440 <sysclk_enable_peripheral_clock+0x104>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     436:	29 e0       	ldi	r18, 0x09	; 9
     438:	80 3c       	cpi	r24, 0xC0	; 192
     43a:	92 07       	cpc	r25, r18
     43c:	19 f4       	brne	.+6      	; 0x444 <sysclk_enable_peripheral_clock+0x108>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	68 e0       	ldi	r22, 0x08	; 8
     442:	2c c0       	rjmp	.+88     	; 0x49c <sysclk_enable_peripheral_clock+0x160>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     444:	28 e0       	ldi	r18, 0x08	; 8
     446:	80 3a       	cpi	r24, 0xA0	; 160
     448:	92 07       	cpc	r25, r18
     44a:	19 f4       	brne	.+6      	; 0x452 <sysclk_enable_peripheral_clock+0x116>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	60 e1       	ldi	r22, 0x10	; 16
     450:	25 c0       	rjmp	.+74     	; 0x49c <sysclk_enable_peripheral_clock+0x160>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     452:	29 e0       	ldi	r18, 0x09	; 9
     454:	80 3a       	cpi	r24, 0xA0	; 160
     456:	92 07       	cpc	r25, r18
     458:	11 f4       	brne	.+4      	; 0x45e <sysclk_enable_peripheral_clock+0x122>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	f8 cf       	rjmp	.-16     	; 0x44e <sysclk_enable_peripheral_clock+0x112>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     45e:	2a e0       	ldi	r18, 0x0A	; 10
     460:	80 3a       	cpi	r24, 0xA0	; 160
     462:	92 07       	cpc	r25, r18
     464:	11 f4       	brne	.+4      	; 0x46a <sysclk_enable_peripheral_clock+0x12e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     466:	85 e0       	ldi	r24, 0x05	; 5
     468:	f2 cf       	rjmp	.-28     	; 0x44e <sysclk_enable_peripheral_clock+0x112>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     46a:	2b e0       	ldi	r18, 0x0B	; 11
     46c:	80 3a       	cpi	r24, 0xA0	; 160
     46e:	92 07       	cpc	r25, r18
     470:	11 f4       	brne	.+4      	; 0x476 <sysclk_enable_peripheral_clock+0x13a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     472:	86 e0       	ldi	r24, 0x06	; 6
     474:	ec cf       	rjmp	.-40     	; 0x44e <sysclk_enable_peripheral_clock+0x112>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     476:	28 e0       	ldi	r18, 0x08	; 8
     478:	80 3b       	cpi	r24, 0xB0	; 176
     47a:	92 07       	cpc	r25, r18
     47c:	11 f4       	brne	.+4      	; 0x482 <sysclk_enable_peripheral_clock+0x146>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	05 c0       	rjmp	.+10     	; 0x48c <sysclk_enable_peripheral_clock+0x150>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     482:	29 e0       	ldi	r18, 0x09	; 9
     484:	80 3b       	cpi	r24, 0xB0	; 176
     486:	92 07       	cpc	r25, r18
     488:	19 f4       	brne	.+6      	; 0x490 <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	60 e2       	ldi	r22, 0x20	; 32
     48e:	06 c0       	rjmp	.+12     	; 0x49c <sysclk_enable_peripheral_clock+0x160>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     490:	24 e0       	ldi	r18, 0x04	; 4
     492:	80 38       	cpi	r24, 0x80	; 128
     494:	92 07       	cpc	r25, r18
     496:	29 f4       	brne	.+10     	; 0x4a2 <sysclk_enable_peripheral_clock+0x166>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	60 e4       	ldi	r22, 0x40	; 64
     49c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
     4a0:	08 95       	ret
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     4a2:	24 e0       	ldi	r18, 0x04	; 4
     4a4:	80 3a       	cpi	r24, 0xA0	; 160
     4a6:	92 07       	cpc	r25, r18
     4a8:	21 f4       	brne	.+8      	; 0x4b2 <sysclk_enable_peripheral_clock+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     4aa:	85 e0       	ldi	r24, 0x05	; 5
     4ac:	60 e4       	ldi	r22, 0x40	; 64
     4ae:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
     4b2:	08 95       	ret

000004b4 <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
     4b4:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
	while (usart_data_register_is_empty(usart) == false) {
     4b8:	85 ff       	sbrs	r24, 5
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <usart_putchar+0x2>
	}
	
	(usart)->DATA = c;
     4bc:	60 83       	st	Z, r22
	return STATUS_OK;
}
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <usart_getchar>:
 * \param usart The USART module.
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
     4c4:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
     4c6:	81 81       	ldd	r24, Z+1	; 0x01
	while (usart_rx_is_complete(usart) == false) {
     4c8:	87 ff       	sbrs	r24, 7
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <usart_getchar+0x2>
	}
	
	return ((uint8_t)(usart)->DATA);
     4cc:	80 81       	ld	r24, Z
}
     4ce:	08 95       	ret

000004d0 <usart_set_bsel_bscale_value>:
 * \param bsel   Calculated BSEL value.
 * \param bscale Calculated BSEL value.
 *
 */
void usart_set_bsel_bscale_value(USART_t *usart, uint16_t bsel, uint8_t bscale)
{
     4d0:	fc 01       	movw	r30, r24
	(usart)->BAUDCTRLA = (uint8_t)(bsel);
     4d2:	66 83       	std	Z+6, r22	; 0x06
	(usart)->BAUDCTRLB = (uint8_t)(((bsel >> 8) & 0X0F) | (bscale << 4));
     4d4:	7f 70       	andi	r23, 0x0F	; 15
     4d6:	42 95       	swap	r20
     4d8:	40 7f       	andi	r20, 0xF0	; 240
     4da:	74 2b       	or	r23, r20
     4dc:	77 83       	std	Z+7, r23	; 0x07
}
     4de:	08 95       	ret

000004e0 <usart_set_baudrate_precalculated>:
 * \param cpu_hz The CPU frequency.
 *
 */
void usart_set_baudrate_precalculated(USART_t *usart, uint32_t baud,
		uint32_t cpu_hz)
{
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	dc 01       	movw	r26, r24
 * \return The baudrate offset in PROGMEM table
 * \retval USART_BAUD_UNDEFINED for baudrates not in lookup table
 */
static uint8_t usart_get_baud_offset(uint32_t baud)
{
	switch (baud) {
     4e6:	40 38       	cpi	r20, 0x80	; 128
     4e8:	85 e2       	ldi	r24, 0x25	; 37
     4ea:	58 07       	cpc	r21, r24
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	68 07       	cpc	r22, r24
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	78 07       	cpc	r23, r24
     4f4:	f1 f1       	breq	.+124    	; 0x572 <usart_set_baudrate_precalculated+0x92>
     4f6:	41 38       	cpi	r20, 0x81	; 129
     4f8:	85 e2       	ldi	r24, 0x25	; 37
     4fa:	58 07       	cpc	r21, r24
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	68 07       	cpc	r22, r24
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	78 07       	cpc	r23, r24
     504:	c8 f4       	brcc	.+50     	; 0x538 <usart_set_baudrate_precalculated+0x58>
     506:	40 36       	cpi	r20, 0x60	; 96
     508:	89 e0       	ldi	r24, 0x09	; 9
     50a:	58 07       	cpc	r21, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	68 07       	cpc	r22, r24
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	78 07       	cpc	r23, r24
     514:	c1 f1       	breq	.+112    	; 0x586 <usart_set_baudrate_precalculated+0xa6>
     516:	40 3c       	cpi	r20, 0xC0	; 192
     518:	82 e1       	ldi	r24, 0x12	; 18
     51a:	58 07       	cpc	r21, r24
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	68 07       	cpc	r22, r24
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	78 07       	cpc	r23, r24
     524:	21 f1       	breq	.+72     	; 0x56e <usart_set_baudrate_precalculated+0x8e>
     526:	40 3b       	cpi	r20, 0xB0	; 176
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	58 07       	cpc	r21, r24
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	68 07       	cpc	r22, r24
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	78 07       	cpc	r23, r24
     534:	31 f5       	brne	.+76     	; 0x582 <usart_set_baudrate_precalculated+0xa2>
     536:	19 c0       	rjmp	.+50     	; 0x56a <usart_set_baudrate_precalculated+0x8a>
     538:	40 30       	cpi	r20, 0x00	; 0
     53a:	86 e9       	ldi	r24, 0x96	; 150
     53c:	58 07       	cpc	r21, r24
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	68 07       	cpc	r22, r24
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	78 07       	cpc	r23, r24
     546:	c9 f0       	breq	.+50     	; 0x57a <usart_set_baudrate_precalculated+0x9a>
     548:	40 30       	cpi	r20, 0x00	; 0
     54a:	81 ee       	ldi	r24, 0xE1	; 225
     54c:	58 07       	cpc	r21, r24
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	68 07       	cpc	r22, r24
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	78 07       	cpc	r23, r24
     556:	99 f0       	breq	.+38     	; 0x57e <usart_set_baudrate_precalculated+0x9e>
     558:	40 30       	cpi	r20, 0x00	; 0
     55a:	8b e4       	ldi	r24, 0x4B	; 75
     55c:	58 07       	cpc	r21, r24
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	68 07       	cpc	r22, r24
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	78 07       	cpc	r23, r24
     566:	69 f4       	brne	.+26     	; 0x582 <usart_set_baudrate_precalculated+0xa2>
     568:	06 c0       	rjmp	.+12     	; 0x576 <usart_set_baudrate_precalculated+0x96>
	case 1200:
		return (uint8_t)USART_BAUD_1200;
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	0d c0       	rjmp	.+26     	; 0x588 <usart_set_baudrate_precalculated+0xa8>

	case 2400:
		return (uint8_t)USART_BAUD_2400;

	case 4800:
		return (uint8_t)USART_BAUD_4800;
     56e:	42 e0       	ldi	r20, 0x02	; 2
     570:	0b c0       	rjmp	.+22     	; 0x588 <usart_set_baudrate_precalculated+0xa8>

	case 9600:
		return (uint8_t)USART_BAUD_9600;
     572:	43 e0       	ldi	r20, 0x03	; 3
     574:	09 c0       	rjmp	.+18     	; 0x588 <usart_set_baudrate_precalculated+0xa8>

	case 19200:
		return (uint8_t)USART_BAUD_19200;
     576:	44 e0       	ldi	r20, 0x04	; 4
     578:	07 c0       	rjmp	.+14     	; 0x588 <usart_set_baudrate_precalculated+0xa8>

	case 38400:
		return (uint8_t)USART_BAUD_38400;
     57a:	45 e0       	ldi	r20, 0x05	; 5
     57c:	05 c0       	rjmp	.+10     	; 0x588 <usart_set_baudrate_precalculated+0xa8>

	case 57600:
		return (uint8_t)USART_BAUD_57600;
     57e:	46 e0       	ldi	r20, 0x06	; 6
     580:	03 c0       	rjmp	.+6      	; 0x588 <usart_set_baudrate_precalculated+0xa8>

	default:
		return (uint8_t)USART_BAUD_UNDEFINED;
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	01 c0       	rjmp	.+2      	; 0x588 <usart_set_baudrate_precalculated+0xa8>
	switch (baud) {
	case 1200:
		return (uint8_t)USART_BAUD_1200;

	case 2400:
		return (uint8_t)USART_BAUD_2400;
     586:	41 e0       	ldi	r20, 0x01	; 1
	uint8_t baud_offset;
	uint16_t baudctrl = 0;

	baud_offset = usart_get_baud_offset(baud);

	if (cpu_hz == 2000000UL) {
     588:	00 38       	cpi	r16, 0x80	; 128
     58a:	84 e8       	ldi	r24, 0x84	; 132
     58c:	18 07       	cpc	r17, r24
     58e:	8e e1       	ldi	r24, 0x1E	; 30
     590:	28 07       	cpc	r18, r24
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	38 07       	cpc	r19, r24
     596:	39 f4       	brne	.+14     	; 0x5a6 <usart_set_baudrate_precalculated+0xc6>
		baudctrl = PROGMEM_READ_WORD(baudctrl_2mhz + baud_offset);
     598:	e4 2f       	mov	r30, r20
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	e4 50       	subi	r30, 0x04	; 4
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	0e c0       	rjmp	.+28     	; 0x5c2 <usart_set_baudrate_precalculated+0xe2>
	} else if (cpu_hz == 32000000UL) {
     5a6:	00 30       	cpi	r16, 0x00	; 0
     5a8:	88 e4       	ldi	r24, 0x48	; 72
     5aa:	18 07       	cpc	r17, r24
     5ac:	88 ee       	ldi	r24, 0xE8	; 232
     5ae:	28 07       	cpc	r18, r24
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	38 07       	cpc	r19, r24
     5b4:	51 f4       	brne	.+20     	; 0x5ca <usart_set_baudrate_precalculated+0xea>
		baudctrl = PROGMEM_READ_WORD(baudctrl_32mhz + baud_offset);
     5b6:	e4 2f       	mov	r30, r20
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	e6 5f       	subi	r30, 0xF6	; 246
     5c0:	fd 4f       	sbci	r31, 0xFD	; 253
     5c2:	85 91       	lpm	r24, Z+
     5c4:	94 91       	lpm	r25, Z
     5c6:	9c 01       	movw	r18, r24
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <usart_set_baudrate_precalculated+0xee>
 */
void usart_set_baudrate_precalculated(USART_t *usart, uint32_t baud,
		uint32_t cpu_hz)
{
	uint8_t baud_offset;
	uint16_t baudctrl = 0;
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
		/* Error, system clock speed or USART baud rate is not supported
		 * by the look-up table */
		Assert(false);
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
     5ce:	4f 3f       	cpi	r20, 0xFF	; 255
     5d0:	31 f0       	breq	.+12     	; 0x5de <usart_set_baudrate_precalculated+0xfe>
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
     5d2:	17 96       	adiw	r26, 0x07	; 7
     5d4:	2c 93       	st	X, r18
     5d6:	17 97       	sbiw	r26, 0x07	; 7
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
     5d8:	16 96       	adiw	r26, 0x06	; 6
     5da:	3c 93       	st	X, r19
     5dc:	16 97       	sbiw	r26, 0x06	; 6
	}
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	08 95       	ret

000005e4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	3c 01       	movw	r6, r24
     600:	6a 01       	movw	r12, r20
     602:	7b 01       	movw	r14, r22
     604:	48 01       	movw	r8, r16
     606:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     608:	b9 01       	movw	r22, r18
     60a:	a8 01       	movw	r20, r16
     60c:	e3 e0       	ldi	r30, 0x03	; 3
     60e:	76 95       	lsr	r23
     610:	67 95       	ror	r22
     612:	57 95       	ror	r21
     614:	47 95       	ror	r20
     616:	ea 95       	dec	r30
     618:	d1 f7       	brne	.-12     	; 0x60e <usart_set_baudrate+0x2a>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     61a:	d9 01       	movw	r26, r18
     61c:	c8 01       	movw	r24, r16
     61e:	f6 e1       	ldi	r31, 0x16	; 22
     620:	b6 95       	lsr	r27
     622:	a7 95       	ror	r26
     624:	97 95       	ror	r25
     626:	87 95       	ror	r24
     628:	fa 95       	dec	r31
     62a:	d1 f7       	brne	.-12     	; 0x620 <usart_set_baudrate+0x3c>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     62c:	f3 01       	movw	r30, r6
     62e:	24 81       	ldd	r18, Z+4	; 0x04
     630:	22 fd       	sbrc	r18, 2
     632:	08 c0       	rjmp	.+16     	; 0x644 <usart_set_baudrate+0x60>
		max_rate /= 2;
     634:	76 95       	lsr	r23
     636:	67 95       	ror	r22
     638:	57 95       	ror	r21
     63a:	47 95       	ror	r20
		min_rate /= 2;
     63c:	b6 95       	lsr	r27
     63e:	a7 95       	ror	r26
     640:	97 95       	ror	r25
     642:	87 95       	ror	r24
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     644:	4c 15       	cp	r20, r12
     646:	5d 05       	cpc	r21, r13
     648:	6e 05       	cpc	r22, r14
     64a:	7f 05       	cpc	r23, r15
     64c:	08 f4       	brcc	.+2      	; 0x650 <usart_set_baudrate+0x6c>
     64e:	a9 c0       	rjmp	.+338    	; 0x7a2 <usart_set_baudrate+0x1be>
     650:	c8 16       	cp	r12, r24
     652:	d9 06       	cpc	r13, r25
     654:	ea 06       	cpc	r14, r26
     656:	fb 06       	cpc	r15, r27
     658:	08 f4       	brcc	.+2      	; 0x65c <usart_set_baudrate+0x78>
     65a:	a3 c0       	rjmp	.+326    	; 0x7a2 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     65c:	d3 01       	movw	r26, r6
     65e:	14 96       	adiw	r26, 0x04	; 4
     660:	8c 91       	ld	r24, X
     662:	14 97       	sbiw	r26, 0x04	; 4
     664:	82 fd       	sbrc	r24, 2
     666:	04 c0       	rjmp	.+8      	; 0x670 <usart_set_baudrate+0x8c>
		baud *= 2;
     668:	cc 0c       	add	r12, r12
     66a:	dd 1c       	adc	r13, r13
     66c:	ee 1c       	adc	r14, r14
     66e:	ff 1c       	adc	r15, r15
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     670:	c5 01       	movw	r24, r10
     672:	b4 01       	movw	r22, r8
     674:	a7 01       	movw	r20, r14
     676:	96 01       	movw	r18, r12
     678:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodsi4>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	a0 e0       	ldi	r26, 0x00	; 0
     682:	b0 e0       	ldi	r27, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     684:	c9 ef       	ldi	r28, 0xF9	; 249
		if (ratio < limit) {
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	4a 07       	cpc	r20, r26
     68c:	5b 07       	cpc	r21, r27
     68e:	58 f0       	brcs	.+22     	; 0x6a6 <usart_set_baudrate+0xc2>
			break;
		}

		limit <<= 1;
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	aa 1f       	adc	r26, r26
     696:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     698:	cd 3f       	cpi	r28, 0xFD	; 253
     69a:	0c f4       	brge	.+2      	; 0x69e <usart_set_baudrate+0xba>
			limit |= 1;
     69c:	81 60       	ori	r24, 0x01	; 1

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     69e:	cf 5f       	subi	r28, 0xFF	; 255
     6a0:	c7 30       	cpi	r28, 0x07	; 7
     6a2:	89 f7       	brne	.-30     	; 0x686 <usart_set_baudrate+0xa2>
     6a4:	4d c0       	rjmp	.+154    	; 0x740 <usart_set_baudrate+0x15c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     6a6:	c7 ff       	sbrs	r28, 7
     6a8:	4b c0       	rjmp	.+150    	; 0x740 <usart_set_baudrate+0x15c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     6aa:	d7 01       	movw	r26, r14
     6ac:	c6 01       	movw	r24, r12
     6ae:	f3 e0       	ldi	r31, 0x03	; 3
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	aa 1f       	adc	r26, r26
     6b6:	bb 1f       	adc	r27, r27
     6b8:	fa 95       	dec	r31
     6ba:	d1 f7       	brne	.-12     	; 0x6b0 <usart_set_baudrate+0xcc>
     6bc:	88 1a       	sub	r8, r24
     6be:	99 0a       	sbc	r9, r25
     6c0:	aa 0a       	sbc	r10, r26
     6c2:	bb 0a       	sbc	r11, r27
     6c4:	2c 2f       	mov	r18, r28
     6c6:	33 27       	eor	r19, r19
     6c8:	27 fd       	sbrc	r18, 7
     6ca:	30 95       	com	r19
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     6cc:	ce 3f       	cpi	r28, 0xFE	; 254
     6ce:	e4 f4       	brge	.+56     	; 0x708 <usart_set_baudrate+0x124>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     6d0:	6d ef       	ldi	r22, 0xFD	; 253
     6d2:	7f ef       	ldi	r23, 0xFF	; 255
     6d4:	62 1b       	sub	r22, r18
     6d6:	73 0b       	sbc	r23, r19
     6d8:	a5 01       	movw	r20, r10
     6da:	94 01       	movw	r18, r8
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <usart_set_baudrate+0x102>
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	44 1f       	adc	r20, r20
     6e4:	55 1f       	adc	r21, r21
     6e6:	6a 95       	dec	r22
     6e8:	d2 f7       	brpl	.-12     	; 0x6de <usart_set_baudrate+0xfa>
     6ea:	ca 01       	movw	r24, r20
     6ec:	b9 01       	movw	r22, r18
     6ee:	97 01       	movw	r18, r14
     6f0:	86 01       	movw	r16, r12
     6f2:	36 95       	lsr	r19
     6f4:	27 95       	ror	r18
     6f6:	17 95       	ror	r17
     6f8:	07 95       	ror	r16
     6fa:	60 0f       	add	r22, r16
     6fc:	71 1f       	adc	r23, r17
     6fe:	82 1f       	adc	r24, r18
     700:	93 1f       	adc	r25, r19
     702:	a7 01       	movw	r20, r14
     704:	96 01       	movw	r18, r12
     706:	17 c0       	rjmp	.+46     	; 0x736 <usart_set_baudrate+0x152>
		} else {
			baud <<= exp + 3;
     708:	2d 5f       	subi	r18, 0xFD	; 253
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	d7 01       	movw	r26, r14
     70e:	c6 01       	movw	r24, r12
     710:	04 c0       	rjmp	.+8      	; 0x71a <usart_set_baudrate+0x136>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <usart_set_baudrate+0x12e>
     71e:	9c 01       	movw	r18, r24
     720:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     722:	b6 95       	lsr	r27
     724:	a7 95       	ror	r26
     726:	97 95       	ror	r25
     728:	87 95       	ror	r24
     72a:	88 0d       	add	r24, r8
     72c:	99 1d       	adc	r25, r9
     72e:	aa 1d       	adc	r26, r10
     730:	bb 1d       	adc	r27, r11
     732:	bc 01       	movw	r22, r24
     734:	cd 01       	movw	r24, r26
     736:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodsi4>
     73a:	89 01       	movw	r16, r18
     73c:	9a 01       	movw	r18, r20
     73e:	23 c0       	rjmp	.+70     	; 0x786 <usart_set_baudrate+0x1a2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     740:	2c 2f       	mov	r18, r28
     742:	33 27       	eor	r19, r19
     744:	27 fd       	sbrc	r18, 7
     746:	30 95       	com	r19
     748:	2d 5f       	subi	r18, 0xFD	; 253
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	d7 01       	movw	r26, r14
     74e:	c6 01       	movw	r24, r12
     750:	04 c0       	rjmp	.+8      	; 0x75a <usart_set_baudrate+0x176>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	aa 1f       	adc	r26, r26
     758:	bb 1f       	adc	r27, r27
     75a:	2a 95       	dec	r18
     75c:	d2 f7       	brpl	.-12     	; 0x752 <usart_set_baudrate+0x16e>
     75e:	9c 01       	movw	r18, r24
     760:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	88 0d       	add	r24, r8
     76c:	99 1d       	adc	r25, r9
     76e:	aa 1d       	adc	r26, r10
     770:	bb 1d       	adc	r27, r11
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodsi4>
     77a:	89 01       	movw	r16, r18
     77c:	9a 01       	movw	r18, r20
     77e:	01 50       	subi	r16, 0x01	; 1
     780:	10 40       	sbci	r17, 0x00	; 0
     782:	20 40       	sbci	r18, 0x00	; 0
     784:	30 40       	sbci	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     786:	81 2f       	mov	r24, r17
     788:	8f 70       	andi	r24, 0x0F	; 15
     78a:	c2 95       	swap	r28
     78c:	c0 7f       	andi	r28, 0xF0	; 240
     78e:	8c 2b       	or	r24, r28
     790:	d3 01       	movw	r26, r6
     792:	17 96       	adiw	r26, 0x07	; 7
     794:	8c 93       	st	X, r24
     796:	17 97       	sbiw	r26, 0x07	; 7
	(usart)->BAUDCTRLA = (uint8_t)div;
     798:	16 96       	adiw	r26, 0x06	; 6
     79a:	0c 93       	st	X, r16
     79c:	16 97       	sbiw	r26, 0x06	; 6

	return true;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <usart_set_baudrate+0x1c0>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     7a2:	80 e0       	ldi	r24, 0x00	; 0

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	7f 90       	pop	r7
     7bc:	6f 90       	pop	r6
     7be:	08 95       	ret

000007c0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	8b 01       	movw	r16, r22
	bool result;
	sysclk_enable_peripheral_clock(usart);
     7cc:	0e 94 9e 01 	call	0x33c	; 0x33c <sysclk_enable_peripheral_clock>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	8f 73       	andi	r24, 0x3F	; 63
     7d4:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     7d6:	f8 01       	movw	r30, r16
     7d8:	85 81       	ldd	r24, Z+5	; 0x05
     7da:	94 81       	ldd	r25, Z+4	; 0x04
     7dc:	89 2b       	or	r24, r25
     7de:	96 81       	ldd	r25, Z+6	; 0x06
     7e0:	99 23       	and	r25, r25
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <usart_init_rs232+0x28>
     7e4:	98 e0       	ldi	r25, 0x08	; 8
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <usart_init_rs232+0x2a>
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	89 2b       	or	r24, r25
     7ec:	8d 83       	std	Y+5, r24	; 0x05
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     7ee:	f8 01       	movw	r30, r16
     7f0:	40 81       	ld	r20, Z
     7f2:	51 81       	ldd	r21, Z+1	; 0x01
     7f4:	62 81       	ldd	r22, Z+2	; 0x02
     7f6:	73 81       	ldd	r23, Z+3	; 0x03
     7f8:	ce 01       	movw	r24, r28
     7fa:	00 e8       	ldi	r16, 0x80	; 128
     7fc:	14 e8       	ldi	r17, 0x84	; 132
     7fe:	2e e1       	ldi	r18, 0x1E	; 30
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	98 60       	ori	r25, 0x08	; 8
     80a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     80c:	9c 81       	ldd	r25, Y+4	; 0x04
     80e:	90 61       	ori	r25, 0x10	; 16
     810:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	08 95       	ret

0000081c <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	68 01       	movw	r12, r16
     830:	79 01       	movw	r14, r18
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     832:	d9 01       	movw	r26, r18
     834:	c8 01       	movw	r24, r16
     836:	b6 95       	lsr	r27
     838:	a7 95       	ror	r26
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	48 17       	cp	r20, r24
     840:	59 07       	cpc	r21, r25
     842:	6a 07       	cpc	r22, r26
     844:	7b 07       	cpc	r23, r27
     846:	68 f4       	brcc	.+26     	; 0x862 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     848:	9a 01       	movw	r18, r20
     84a:	ab 01       	movw	r20, r22
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
     850:	44 1f       	adc	r20, r20
     852:	55 1f       	adc	r21, r21
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodsi4>
     85c:	21 50       	subi	r18, 0x01	; 1
     85e:	30 40       	sbci	r19, 0x00	; 0
     860:	02 c0       	rjmp	.+4      	; 0x866 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     866:	83 2f       	mov	r24, r19
     868:	8f 70       	andi	r24, 0x0F	; 15
     86a:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     86c:	2e 83       	std	Y+6, r18	; 0x06
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	08 95       	ret

00000880 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	0f 92       	push	r0
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	7c 01       	movw	r14, r24
     894:	8b 01       	movw	r16, r22
	ioport_pin_t sck_pin;
	bool invert_sck;

	sysclk_enable_peripheral_clock(usart);
     896:	0e 94 9e 01 	call	0x33c	; 0x33c <sysclk_enable_peripheral_clock>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     89a:	f7 01       	movw	r30, r14
     89c:	84 81       	ldd	r24, Z+4	; 0x04
     89e:	8f 7e       	andi	r24, 0xEF	; 239
     8a0:	84 83       	std	Z+4, r24	; 0x04

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     8a2:	f8 01       	movw	r30, r16
     8a4:	34 81       	ldd	r19, Z+4	; 0x04
     8a6:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     8a8:	f0 ea       	ldi	r31, 0xA0	; 160
     8aa:	ef 16       	cp	r14, r31
     8ac:	f8 e0       	ldi	r31, 0x08	; 8
     8ae:	ff 06       	cpc	r15, r31
     8b0:	31 f4       	brne	.+12     	; 0x8be <usart_init_spi+0x3e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     8b2:	80 91 4e 06 	lds	r24, 0x064E
     8b6:	84 fd       	sbrc	r24, 4
     8b8:	97 c0       	rjmp	.+302    	; 0x9e8 <usart_init_spi+0x168>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     8ba:	21 e1       	ldi	r18, 0x11	; 17
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <usart_init_spi+0x4a>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     8be:	25 e1       	ldi	r18, 0x15	; 21
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     8c0:	80 eb       	ldi	r24, 0xB0	; 176
     8c2:	e8 16       	cp	r14, r24
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	f8 06       	cpc	r15, r24
     8c8:	89 f0       	breq	.+34     	; 0x8ec <usart_init_spi+0x6c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     8ca:	e0 ea       	ldi	r30, 0xA0	; 160
     8cc:	ee 16       	cp	r14, r30
     8ce:	e9 e0       	ldi	r30, 0x09	; 9
     8d0:	fe 06       	cpc	r15, r30
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <usart_init_spi+0x60>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     8d4:	80 91 6e 06 	lds	r24, 0x066E
     8d8:	84 fd       	sbrc	r24, 4
     8da:	88 c0       	rjmp	.+272    	; 0x9ec <usart_init_spi+0x16c>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     8dc:	29 e1       	ldi	r18, 0x19	; 25
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <usart_init_spi+0x6c>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     8e0:	f0 eb       	ldi	r31, 0xB0	; 176
     8e2:	ef 16       	cp	r14, r31
     8e4:	f9 e0       	ldi	r31, 0x09	; 9
     8e6:	ff 06       	cpc	r15, r31
     8e8:	09 f4       	brne	.+2      	; 0x8ec <usart_init_spi+0x6c>
     8ea:	82 c0       	rjmp	.+260    	; 0x9f0 <usart_init_spi+0x170>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     8ec:	80 ea       	ldi	r24, 0xA0	; 160
     8ee:	e8 16       	cp	r14, r24
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	f8 06       	cpc	r15, r24
     8f4:	31 f4       	brne	.+12     	; 0x902 <usart_init_spi+0x82>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     8f6:	80 91 8e 06 	lds	r24, 0x068E
     8fa:	84 fd       	sbrc	r24, 4
     8fc:	7b c0       	rjmp	.+246    	; 0x9f4 <usart_init_spi+0x174>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     8fe:	21 e2       	ldi	r18, 0x21	; 33
     900:	0c c0       	rjmp	.+24     	; 0x91a <usart_init_spi+0x9a>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     902:	e0 ea       	ldi	r30, 0xA0	; 160
     904:	ee 16       	cp	r14, r30
     906:	eb e0       	ldi	r30, 0x0B	; 11
     908:	fe 06       	cpc	r15, r30
     90a:	39 f4       	brne	.+14     	; 0x91a <usart_init_spi+0x9a>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     90c:	80 91 ae 06 	lds	r24, 0x06AE
     910:	84 ff       	sbrs	r24, 4
     912:	02 c0       	rjmp	.+4      	; 0x918 <usart_init_spi+0x98>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     914:	2d e2       	ldi	r18, 0x2D	; 45
     916:	01 c0       	rjmp	.+2      	; 0x91a <usart_init_spi+0x9a>
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     918:	29 e2       	ldi	r18, 0x29	; 41
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     91a:	a2 2f       	mov	r26, r18
     91c:	a6 95       	lsr	r26
     91e:	a6 95       	lsr	r26
     920:	a6 95       	lsr	r26
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	d0 96       	adiw	r26, 0x30	; 48
     926:	f5 e0       	ldi	r31, 0x05	; 5
     928:	aa 0f       	add	r26, r26
     92a:	bb 1f       	adc	r27, r27
     92c:	fa 95       	dec	r31
     92e:	e1 f7       	brne	.-8      	; 0x928 <usart_init_spi+0xa8>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     930:	42 2f       	mov	r20, r18
     932:	45 70       	andi	r20, 0x05	; 5
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <usart_init_spi+0xbe>
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	4a 95       	dec	r20
     940:	e2 f7       	brpl	.-8      	; 0x93a <usart_init_spi+0xba>
     942:	48 2f       	mov	r20, r24
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     944:	11 96       	adiw	r26, 0x01	; 1
     946:	8c 93       	st	X, r24
     948:	11 97       	sbiw	r26, 0x01	; 1
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     94a:	32 30       	cpi	r19, 0x02	; 2
     94c:	10 f4       	brcc	.+4      	; 0x952 <usart_init_spi+0xd2>
     94e:	90 e4       	ldi	r25, 0x40	; 64
     950:	01 c0       	rjmp	.+2      	; 0x954 <usart_init_spi+0xd4>
     952:	90 e0       	ldi	r25, 0x00	; 0
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     954:	fd 01       	movw	r30, r26
     956:	70 96       	adiw	r30, 0x10	; 16
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_index(
		ioport_pin_t pin)
{
	return (pin & 0x07);
     958:	27 70       	andi	r18, 0x07	; 7

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     95a:	e2 0f       	add	r30, r18
     95c:	f1 1d       	adc	r31, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     95e:	8f b7       	in	r24, 0x3f	; 63
     960:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     962:	f8 94       	cli
	return flags;
     964:	29 81       	ldd	r18, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     966:	80 81       	ld	r24, Z
     968:	87 70       	andi	r24, 0x07	; 7
     96a:	80 83       	st	Z, r24
	*pin_ctrl |= mode;
     96c:	80 81       	ld	r24, Z
     96e:	89 2b       	or	r24, r25
     970:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     972:	2f bf       	out	0x3f, r18	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     974:	15 96       	adiw	r26, 0x05	; 5
     976:	4c 93       	st	X, r20
     978:	15 97       	sbiw	r26, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     97a:	f7 01       	movw	r30, r14
     97c:	85 81       	ldd	r24, Z+5	; 0x05
     97e:	80 6c       	ori	r24, 0xC0	; 192
     980:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     982:	f8 01       	movw	r30, r16
     984:	84 81       	ldd	r24, Z+4	; 0x04
		usart->CTRLC |= USART_UCPHA_bm;
     986:	f7 01       	movw	r30, r14
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	11 f0       	breq	.+4      	; 0x990 <usart_init_spi+0x110>
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	19 f4       	brne	.+6      	; 0x996 <usart_init_spi+0x116>
		usart->CTRLC |= USART_UCPHA_bm;
     990:	85 81       	ldd	r24, Z+5	; 0x05
     992:	82 60       	ori	r24, 0x02	; 2
     994:	02 c0       	rjmp	.+4      	; 0x99a <usart_init_spi+0x11a>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     996:	85 81       	ldd	r24, Z+5	; 0x05
     998:	8d 7f       	andi	r24, 0xFD	; 253
     99a:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
     99c:	f8 01       	movw	r30, r16
     99e:	85 81       	ldd	r24, Z+5	; 0x05
		(usart)->CTRLC |= USART_DORD_bm;
     9a0:	f7 01       	movw	r30, r14
	if (opt->spimode == 1 || opt->spimode == 3) {
		usart->CTRLC |= USART_UCPHA_bm;
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
	}
	if (opt->data_order) {
     9a2:	88 23       	and	r24, r24
     9a4:	19 f0       	breq	.+6      	; 0x9ac <usart_init_spi+0x12c>
		(usart)->CTRLC |= USART_DORD_bm;
     9a6:	85 81       	ldd	r24, Z+5	; 0x05
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <usart_init_spi+0x130>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     9ac:	85 81       	ldd	r24, Z+5	; 0x05
     9ae:	8b 7f       	andi	r24, 0xFB	; 251
     9b0:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     9b2:	f8 01       	movw	r30, r16
     9b4:	40 81       	ld	r20, Z
     9b6:	51 81       	ldd	r21, Z+1	; 0x01
     9b8:	62 81       	ldd	r22, Z+2	; 0x02
     9ba:	73 81       	ldd	r23, Z+3	; 0x03
     9bc:	c7 01       	movw	r24, r14
     9be:	00 e8       	ldi	r16, 0x80	; 128
     9c0:	14 e8       	ldi	r17, 0x84	; 132
     9c2:	2e e1       	ldi	r18, 0x1E	; 30
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	0e 94 0e 04 	call	0x81c	; 0x81c <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     9ca:	f7 01       	movw	r30, r14
     9cc:	84 81       	ldd	r24, Z+4	; 0x04
     9ce:	88 60       	ori	r24, 0x08	; 8
     9d0:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     9d2:	84 81       	ldd	r24, Z+4	; 0x04
     9d4:	80 61       	ori	r24, 0x10	; 16
     9d6:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     9d8:	0f 90       	pop	r0
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     9e8:	25 e1       	ldi	r18, 0x15	; 21
     9ea:	6f cf       	rjmp	.-290    	; 0x8ca <usart_init_spi+0x4a>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     9ec:	2d e1       	ldi	r18, 0x1D	; 29
     9ee:	7e cf       	rjmp	.-260    	; 0x8ec <usart_init_spi+0x6c>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     9f0:	2d e1       	ldi	r18, 0x1D	; 29
     9f2:	93 cf       	rjmp	.-218    	; 0x91a <usart_init_spi+0x9a>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     9f4:	25 e2       	ldi	r18, 0x25	; 37
     9f6:	91 cf       	rjmp	.-222    	; 0x91a <usart_init_spi+0x9a>

000009f8 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     9fc:	e0 91 30 20 	lds	r30, 0x2030
     a00:	f0 91 31 20 	lds	r31, 0x2031
     a04:	44 81       	ldd	r20, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     a06:	84 2f       	mov	r24, r20
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	43 ff       	sbrs	r20, 3
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     a0e:	48 60       	ori	r20, 0x08	; 8
     a10:	44 83       	std	Z+4, r20	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     a16:	86 ef       	ldi	r24, 0xF6	; 246
     a18:	79 c0       	rjmp	.+242    	; 0xb0c <twim_interrupt_handler+0x114>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
     a1a:	9c 01       	movw	r18, r24
     a1c:	24 71       	andi	r18, 0x14	; 20
     a1e:	30 70       	andi	r19, 0x00	; 0

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     a20:	21 15       	cp	r18, r1
     a22:	31 05       	cpc	r19, r1
     a24:	21 f0       	breq	.+8      	; 0xa2e <twim_interrupt_handler+0x36>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	6f c0       	rjmp	.+222    	; 0xb0c <twim_interrupt_handler+0x114>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     a2e:	46 ff       	sbrs	r20, 6
     a30:	40 c0       	rjmp	.+128    	; 0xab2 <twim_interrupt_handler+0xba>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     a32:	a0 91 32 20 	lds	r26, 0x2032
     a36:	b0 91 33 20 	lds	r27, 0x2033

	if (transfer.addr_count < pkg->addr_length) {
     a3a:	20 91 34 20 	lds	r18, 0x2034
     a3e:	30 91 35 20 	lds	r19, 0x2035
     a42:	14 96       	adiw	r26, 0x04	; 4
     a44:	8d 91       	ld	r24, X+
     a46:	9c 91       	ld	r25, X
     a48:	15 97       	sbiw	r26, 0x05	; 5
     a4a:	28 17       	cp	r18, r24
     a4c:	39 07       	cpc	r19, r25
     a4e:	6c f4       	brge	.+26     	; 0xa6a <twim_interrupt_handler+0x72>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     a50:	a2 0f       	add	r26, r18
     a52:	b3 1f       	adc	r27, r19
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	8c 91       	ld	r24, X
     a58:	11 97       	sbiw	r26, 0x01	; 1
     a5a:	87 83       	std	Z+7, r24	; 0x07
     a5c:	2f 5f       	subi	r18, 0xFF	; 255
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	20 93 34 20 	sts	0x2034, r18
     a64:	30 93 35 20 	sts	0x2035, r19
     a68:	53 c0       	rjmp	.+166    	; 0xb10 <twim_interrupt_handler+0x118>

	} else if (transfer.data_count < pkg->length) {
     a6a:	20 91 36 20 	lds	r18, 0x2036
     a6e:	30 91 37 20 	lds	r19, 0x2037
     a72:	18 96       	adiw	r26, 0x08	; 8
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	19 97       	sbiw	r26, 0x09	; 9
     a7a:	28 17       	cp	r18, r24
     a7c:	39 07       	cpc	r19, r25
     a7e:	b8 f4       	brcc	.+46     	; 0xaae <twim_interrupt_handler+0xb6>

		if (transfer.read) {
     a80:	80 91 38 20 	lds	r24, 0x2038
     a84:	88 23       	and	r24, r24
     a86:	21 f0       	breq	.+8      	; 0xa90 <twim_interrupt_handler+0x98>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     a88:	86 81       	ldd	r24, Z+6	; 0x06
     a8a:	81 60       	ori	r24, 0x01	; 1
     a8c:	86 83       	std	Z+6, r24	; 0x06
     a8e:	40 c0       	rjmp	.+128    	; 0xb10 <twim_interrupt_handler+0x118>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
     a90:	16 96       	adiw	r26, 0x06	; 6
     a92:	0d 90       	ld	r0, X+
     a94:	bc 91       	ld	r27, X
     a96:	a0 2d       	mov	r26, r0
     a98:	a2 0f       	add	r26, r18
     a9a:	b3 1f       	adc	r27, r19
     a9c:	8c 91       	ld	r24, X
     a9e:	87 83       	std	Z+7, r24	; 0x07
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	20 93 36 20 	sts	0x2036, r18
     aa8:	30 93 37 20 	sts	0x2037, r19
     aac:	31 c0       	rjmp	.+98     	; 0xb10 <twim_interrupt_handler+0x118>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	24 c0       	rjmp	.+72     	; 0xafa <twim_interrupt_handler+0x102>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     ab2:	47 ff       	sbrs	r20, 7
     ab4:	2a c0       	rjmp	.+84     	; 0xb0a <twim_interrupt_handler+0x112>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     ab6:	c0 91 32 20 	lds	r28, 0x2032
     aba:	d0 91 33 20 	lds	r29, 0x2033

	if (transfer.data_count < pkg->length) {
     abe:	20 91 36 20 	lds	r18, 0x2036
     ac2:	30 91 37 20 	lds	r19, 0x2037
     ac6:	88 85       	ldd	r24, Y+8	; 0x08
     ac8:	99 85       	ldd	r25, Y+9	; 0x09
     aca:	28 17       	cp	r18, r24
     acc:	39 07       	cpc	r19, r25
     ace:	c8 f4       	brcc	.+50     	; 0xb02 <twim_interrupt_handler+0x10a>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
     ad0:	87 81       	ldd	r24, Z+7	; 0x07
     ad2:	ae 81       	ldd	r26, Y+6	; 0x06
     ad4:	bf 81       	ldd	r27, Y+7	; 0x07
     ad6:	a2 0f       	add	r26, r18
     ad8:	b3 1f       	adc	r27, r19
     ada:	8c 93       	st	X, r24
     adc:	2f 5f       	subi	r18, 0xFF	; 255
     ade:	3f 4f       	sbci	r19, 0xFF	; 255
     ae0:	20 93 36 20 	sts	0x2036, r18
     ae4:	30 93 37 20 	sts	0x2037, r19

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     ae8:	88 85       	ldd	r24, Y+8	; 0x08
     aea:	99 85       	ldd	r25, Y+9	; 0x09
     aec:	28 17       	cp	r18, r24
     aee:	39 07       	cpc	r19, r25
     af0:	18 f4       	brcc	.+6      	; 0xaf8 <twim_interrupt_handler+0x100>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	83 83       	std	Z+3, r24	; 0x03
     af6:	0c c0       	rjmp	.+24     	; 0xb10 <twim_interrupt_handler+0x118>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     af8:	87 e0       	ldi	r24, 0x07	; 7
     afa:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     afc:	10 92 3a 20 	sts	0x203A, r1
     b00:	07 c0       	rjmp	.+14     	; 0xb10 <twim_interrupt_handler+0x118>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     b06:	89 ef       	ldi	r24, 0xF9	; 249
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <twim_interrupt_handler+0x114>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     b0a:	8b ef       	ldi	r24, 0xFB	; 251
     b0c:	80 93 3a 20 	sts	0x203A, r24
	}
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	0b b6       	in	r0, 0x3b	; 59
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <twim_interrupt_handler>
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0b be       	out	0x3b, r0	; 59
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	0b b6       	in	r0, 0x3b	; 59
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <twim_interrupt_handler>
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	bf 91       	pop	r27
     b96:	af 91       	pop	r26
     b98:	9f 91       	pop	r25
     b9a:	8f 91       	pop	r24
     b9c:	7f 91       	pop	r23
     b9e:	6f 91       	pop	r22
     ba0:	5f 91       	pop	r21
     ba2:	4f 91       	pop	r20
     ba4:	3f 91       	pop	r19
     ba6:	2f 91       	pop	r18
     ba8:	0f 90       	pop	r0
     baa:	0b be       	out	0x3b, r0	; 59
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     bb6:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     bb8:	db 01       	movw	r26, r22
     bba:	14 96       	adiw	r26, 0x04	; 4
     bbc:	8c 91       	ld	r24, X
     bbe:	14 97       	sbiw	r26, 0x04	; 4
     bc0:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     bc2:	88 eb       	ldi	r24, 0xB8	; 184
     bc4:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     bca:	10 92 39 20 	sts	0x2039, r1
	transfer.status    = STATUS_OK;
     bce:	10 92 3a 20 	sts	0x203A, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     bd2:	e0 ea       	ldi	r30, 0xA0	; 160
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	82 60       	ori	r24, 0x02	; 2
     bda:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     bdc:	78 94       	sei

	return STATUS_OK;
}
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret

00000be2 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	8c 01       	movw	r16, r24
     bf2:	db 01       	movw	r26, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	09 f4       	brne	.+2      	; 0xbfa <twi_master_transfer+0x18>
     bf8:	45 c0       	rjmp	.+138    	; 0xc84 <twi_master_transfer+0xa2>
     bfa:	10 97       	sbiw	r26, 0x00	; 0
     bfc:	09 f4       	brne	.+2      	; 0xc00 <twi_master_transfer+0x1e>
     bfe:	42 c0       	rjmp	.+132    	; 0xc84 <twi_master_transfer+0xa2>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     c00:	1a 96       	adiw	r26, 0x0a	; 10
     c02:	9c 91       	ld	r25, X
     c04:	1a 97       	sbiw	r26, 0x0a	; 10
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     c06:	80 91 39 20 	lds	r24, 0x2039
     c0a:	88 23       	and	r24, r24
     c0c:	19 f0       	breq	.+6      	; 0xc14 <twi_master_transfer+0x32>

		if (no_wait) { return ERR_BUSY; }
     c0e:	99 23       	and	r25, r25
     c10:	f1 f3       	breq	.-4      	; 0xc0e <twi_master_transfer+0x2c>
     c12:	3a c0       	rjmp	.+116    	; 0xc88 <twi_master_transfer+0xa6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c14:	8f b7       	in	r24, 0x3f	; 63
     c16:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c18:	f8 94       	cli
	return flags;
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	90 93 39 20 	sts	0x2039, r25
	transfer.status = OPERATION_IN_PROGRESS;
     c22:	90 e8       	ldi	r25, 0x80	; 128
     c24:	90 93 3a 20 	sts	0x203A, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c28:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     c2a:	80 e3       	ldi	r24, 0x30	; 48
     c2c:	90 e2       	ldi	r25, 0x20	; 32
     c2e:	00 93 30 20 	sts	0x2030, r16
     c32:	10 93 31 20 	sts	0x2031, r17
		transfer.pkg         = (twi_package_t *) package;
     c36:	fc 01       	movw	r30, r24
     c38:	62 83       	std	Z+2, r22	; 0x02
     c3a:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
     c3c:	14 82       	std	Z+4, r1	; 0x04
     c3e:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
     c40:	16 82       	std	Z+6, r1	; 0x06
     c42:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
     c44:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
     c46:	2c 91       	ld	r18, X
     c48:	22 0f       	add	r18, r18

		if (package->addr_length || (false == read)) {
     c4a:	14 96       	adiw	r26, 0x04	; 4
     c4c:	8d 91       	ld	r24, X+
     c4e:	9c 91       	ld	r25, X
     c50:	15 97       	sbiw	r26, 0x05	; 5
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	11 f4       	brne	.+4      	; 0xc5a <twi_master_transfer+0x78>
     c56:	41 11       	cpse	r20, r1
			transfer.bus->MASTER.ADDR = chip;
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     c58:	21 60       	ori	r18, 0x01	; 1
     c5a:	f8 01       	movw	r30, r16
     c5c:	26 83       	std	Z+6, r18	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     c5e:	80 91 3a 20 	lds	r24, 0x203A
     c62:	80 38       	cpi	r24, 0x80	; 128
     c64:	e1 f3       	breq	.-8      	; 0xc5e <twi_master_transfer+0x7c>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <twi_master_transfer+0x86>

	while (! twim_idle(transfer.bus)) { barrier(); }
     c68:	e0 91 30 20 	lds	r30, 0x2030
     c6c:	f0 91 31 20 	lds	r31, 0x2031
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     c70:	84 81       	ldd	r24, Z+4	; 0x04
     c72:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	c1 f7       	brne	.-16     	; 0xc68 <twi_master_transfer+0x86>

	status_code_t const status = transfer.status;
     c78:	80 91 3a 20 	lds	r24, 0x203A

	transfer.locked = false;
     c7c:	e0 e3       	ldi	r30, 0x30	; 48
     c7e:	f0 e2       	ldi	r31, 0x20	; 32
     c80:	11 86       	std	Z+9, r1	; 0x09
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <twi_master_transfer+0xa8>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     c84:	88 ef       	ldi	r24, 0xF8	; 248
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <twi_master_transfer+0xa8>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     c88:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     ca0:	8f b7       	in	r24, 0x3f	; 63
     ca2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ca4:	f8 94       	cli
	return flags;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca8:	0f 90       	pop	r0
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	ec 01       	movw	r28, r24
     cba:	8b 01       	movw	r16, r22
	irqflags_t flags;

	Assert(callback);

	flags = cpu_irq_save();
     cbc:	0e 94 4b 06 	call	0xc96	; 0xc96 <cpu_irq_save>

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	c0 30       	cpi	r28, 0x00	; 0
     cc4:	d9 07       	cpc	r29, r25
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <adc_set_callback+0x22>
		adca_callback = callback;
     cc8:	00 93 87 20 	sts	0x2087, r16
     ccc:	10 93 88 20 	sts	0x2088, r17
     cd0:	08 c0       	rjmp	.+16     	; 0xce2 <adc_set_callback+0x32>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	c0 34       	cpi	r28, 0x40	; 64
     cd6:	d9 07       	cpc	r29, r25
     cd8:	21 f4       	brne	.+8      	; 0xce2 <adc_set_callback+0x32>
		adcb_callback = callback;
     cda:	00 93 85 20 	sts	0x2085, r16
     cde:	10 93 86 20 	sts	0x2086, r17

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ce2:	8f bf       	out	0x3f, r24	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	08 95       	ret

00000cee <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     cee:	22 e0       	ldi	r18, 0x02	; 2
     cf0:	80 30       	cpi	r24, 0x00	; 0
     cf2:	92 07       	cpc	r25, r18
     cf4:	69 f4       	brne	.+26     	; 0xd10 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     cf6:	80 91 3b 20 	lds	r24, 0x203B
     cfa:	98 2f       	mov	r25, r24
     cfc:	9f 5f       	subi	r25, 0xFF	; 255
     cfe:	90 93 3b 20 	sts	0x203B, r25
     d02:	88 23       	and	r24, r24
     d04:	a9 f4       	brne	.+42     	; 0xd30 <adc_enable_clock+0x42>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
     d0e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     d10:	22 e0       	ldi	r18, 0x02	; 2
     d12:	80 34       	cpi	r24, 0x40	; 64
     d14:	92 07       	cpc	r25, r18
     d16:	61 f4       	brne	.+24     	; 0xd30 <adc_enable_clock+0x42>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     d18:	80 91 3c 20 	lds	r24, 0x203C
     d1c:	98 2f       	mov	r25, r24
     d1e:	9f 5f       	subi	r25, 0xFF	; 255
     d20:	90 93 3c 20 	sts	0x203C, r25
     d24:	88 23       	and	r24, r24
     d26:	21 f4       	brne	.+8      	; 0xd30 <adc_enable_clock+0x42>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	62 e0       	ldi	r22, 0x02	; 2
     d2c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
     d30:	08 95       	ret

00000d32 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     d32:	22 e0       	ldi	r18, 0x02	; 2
     d34:	80 30       	cpi	r24, 0x00	; 0
     d36:	92 07       	cpc	r25, r18
     d38:	61 f4       	brne	.+24     	; 0xd52 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     d3a:	80 91 3b 20 	lds	r24, 0x203B
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	80 93 3b 20 	sts	0x203B, r24
     d44:	88 23       	and	r24, r24
     d46:	a1 f4       	brne	.+40     	; 0xd70 <adc_disable_clock+0x3e>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
     d50:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     d52:	22 e0       	ldi	r18, 0x02	; 2
     d54:	80 34       	cpi	r24, 0x40	; 64
     d56:	92 07       	cpc	r25, r18
     d58:	59 f4       	brne	.+22     	; 0xd70 <adc_disable_clock+0x3e>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     d5a:	80 91 3c 20 	lds	r24, 0x203C
     d5e:	81 50       	subi	r24, 0x01	; 1
     d60:	80 93 3c 20 	sts	0x203C, r24
     d64:	88 23       	and	r24, r24
     d66:	21 f4       	brne	.+8      	; 0xd70 <adc_disable_clock+0x3e>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	62 e0       	ldi	r22, 0x02	; 2
     d6c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
     d70:	08 95       	ret

00000d72 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
	irqflags_t flags = cpu_irq_save();
     d7a:	0e 94 4b 06 	call	0xc96	; 0xc96 <cpu_irq_save>
     d7e:	18 2f       	mov	r17, r24
	adc_enable_clock(adc);
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 77 06 	call	0xcee	; 0xcee <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     d86:	88 81       	ld	r24, Y
     d88:	81 60       	ori	r24, 0x01	; 1
     d8a:	88 83       	st	Y, r24
     d8c:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     d8e:	80 91 90 20 	lds	r24, 0x2090
     d92:	8f 3f       	cpi	r24, 0xFF	; 255
     d94:	09 f4       	brne	.+2      	; 0xd98 <adc_enable+0x26>
     d96:	ff cf       	rjmp	.-2      	; 0xd96 <adc_enable+0x24>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     d98:	0e 94 4b 06 	call	0xc96	; 0xc96 <cpu_irq_save>

	++sleepmgr_locks[mode];
     d9c:	90 91 90 20 	lds	r25, 0x2090
     da0:	9f 5f       	subi	r25, 0xFF	; 255
     da2:	90 93 90 20 	sts	0x2090, r25
     da6:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	08 95       	ret

00000db0 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
	irqflags_t flags = cpu_irq_save();
     db8:	0e 94 4b 06 	call	0xc96	; 0xc96 <cpu_irq_save>
     dbc:	18 2f       	mov	r17, r24
	adc->CTRLA &= ~ADC_ENABLE_bm;
     dbe:	88 81       	ld	r24, Y
     dc0:	8e 7f       	andi	r24, 0xFE	; 254
     dc2:	88 83       	st	Y, r24
	adc_disable_clock(adc);
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 99 06 	call	0xd32	; 0xd32 <adc_disable_clock>
     dca:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     dcc:	80 91 90 20 	lds	r24, 0x2090
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <adc_disable+0x26>
     dd4:	ff cf       	rjmp	.-2      	; 0xdd4 <adc_disable+0x24>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     dd6:	0e 94 4b 06 	call	0xc96	; 0xc96 <cpu_irq_save>

	--sleepmgr_locks[mode];
     dda:	90 91 90 20 	lds	r25, 0x2090
     dde:	91 50       	subi	r25, 0x01	; 1
     de0:	90 93 90 20 	sts	0x2090, r25
     de4:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <adc_is_enabled>:
	 * since all driver functions that change the counts are protected
	 * against interrupts and only the enable/disable functions leave the
	 * counts incremented/decremented upon return.
	 */
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     dee:	22 e0       	ldi	r18, 0x02	; 2
     df0:	80 30       	cpi	r24, 0x00	; 0
     df2:	92 07       	cpc	r25, r18
     df4:	21 f4       	brne	.+8      	; 0xdfe <adc_is_enabled+0x10>
		return adca_enable_count;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 91 3b 20 	lds	r25, 0x203B
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <adc_is_enabled+0x1e>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     dfe:	22 e0       	ldi	r18, 0x02	; 2
     e00:	80 34       	cpi	r24, 0x40	; 64
     e02:	92 07       	cpc	r25, r18
     e04:	39 f4       	brne	.+14     	; 0xe14 <adc_is_enabled+0x26>
		return adcb_enable_count;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 91 3c 20 	lds	r25, 0x203C
     e0c:	99 23       	and	r25, r25
     e0e:	19 f4       	brne	.+6      	; 0xe16 <adc_is_enabled+0x28>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	08 95       	ret
	} else
#endif

	{
		Assert(0);
		return false;
     e14:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     e16:	08 95       	ret

00000e18 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	0f 92       	push	r0
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     e22:	8f b7       	in	r24, 0x3f	; 63
     e24:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e26:	f8 94       	cli
	return flags;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <adc_get_calibration_data>:
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
	uint16_t data;

	switch (cal) {
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	b1 f0       	breq	.+44     	; 0xe66 <adc_get_calibration_data+0x34>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	18 f0       	brcs	.+6      	; 0xe44 <adc_get_calibration_data+0x12>
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	79 f5       	brne	.+94     	; 0xea0 <adc_get_calibration_data+0x6e>
     e42:	1d c0       	rjmp	.+58     	; 0xe7e <adc_get_calibration_data+0x4c>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	61 e2       	ldi	r22, 0x21	; 33
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
     e4e:	c8 2f       	mov	r28, r24
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	60 e2       	ldi	r22, 0x20	; 32
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
     e5a:	3c 2f       	mov	r19, r28
     e5c:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCACAL0);
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	82 2b       	or	r24, r18
     e62:	93 2b       	or	r25, r19
     e64:	1f c0       	rjmp	.+62     	; 0xea4 <adc_get_calibration_data+0x72>
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	65 e2       	ldi	r22, 0x25	; 37
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
     e70:	d8 2f       	mov	r29, r24
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	c8 2f       	mov	r28, r24
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	64 e2       	ldi	r22, 0x24	; 36
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	0b c0       	rjmp	.+22     	; 0xe94 <adc_get_calibration_data+0x62>
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	6f e2       	ldi	r22, 0x2F	; 47
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
		data <<= 8;
     e88:	d8 2f       	mov	r29, r24
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	c8 2f       	mov	r28, r24
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	6e e2       	ldi	r22, 0x2E	; 46
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
		data |= nvm_read_production_signature_row(TEMPSENSE0);
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	8c 2b       	or	r24, r28
     e9c:	9d 2b       	or	r25, r29
		break;
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <adc_get_calibration_data+0x72>
		break;
#endif

	default:
		Assert(0);
		data = 0;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
	}

	return data;
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f2 e0       	ldi	r31, 0x02	; 2
     ed4:	44 a1       	lds	r20, 0x44
     ed6:	55 a1       	lds	r21, 0x45
     ed8:	e0 91 87 20 	lds	r30, 0x2087
     edc:	f0 91 88 20 	lds	r31, 0x2088
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	19 95       	eicall
}
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0b be       	out	0x3b, r0	; 59
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	0b b6       	in	r0, 0x3b	; 59
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     f34:	e0 e0       	ldi	r30, 0x00	; 0
     f36:	f2 e0       	ldi	r31, 0x02	; 2
     f38:	44 a5       	lds	r20, 0x64
     f3a:	55 a5       	lds	r21, 0x65
     f3c:	e0 91 87 20 	lds	r30, 0x2087
     f40:	f0 91 88 20 	lds	r31, 0x2088
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	62 e0       	ldi	r22, 0x02	; 2
     f4a:	19 95       	eicall
}
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0b be       	out	0x3b, r0	; 59
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	0b b6       	in	r0, 0x3b	; 59
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     f98:	e0 e0       	ldi	r30, 0x00	; 0
     f9a:	f2 e0       	ldi	r31, 0x02	; 2
     f9c:	44 a9       	sts	0x44, r20
     f9e:	55 a9       	sts	0x45, r21
     fa0:	e0 91 87 20 	lds	r30, 0x2087
     fa4:	f0 91 88 20 	lds	r31, 0x2088
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	64 e0       	ldi	r22, 0x04	; 4
     fae:	19 95       	eicall
}
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	0f 90       	pop	r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	0b b6       	in	r0, 0x3b	; 59
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     ffc:	e0 e0       	ldi	r30, 0x00	; 0
     ffe:	f2 e0       	ldi	r31, 0x02	; 2
    1000:	44 ad       	sts	0x64, r20
    1002:	55 ad       	sts	0x65, r21
    1004:	e0 91 87 20 	lds	r30, 0x2087
    1008:	f0 91 88 20 	lds	r31, 0x2088
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	68 e0       	ldi	r22, 0x08	; 8
    1012:	19 95       	eicall
}
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0b be       	out	0x3b, r0	; 59
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	0b b6       	in	r0, 0x3b	; 59
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1060:	e0 e4       	ldi	r30, 0x40	; 64
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	44 a1       	lds	r20, 0x44
    1066:	55 a1       	lds	r21, 0x45
    1068:	e0 91 85 20 	lds	r30, 0x2085
    106c:	f0 91 86 20 	lds	r31, 0x2086
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	19 95       	eicall
}
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0b be       	out	0x3b, r0	; 59
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	0b b6       	in	r0, 0x3b	; 59
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    10c4:	e0 e4       	ldi	r30, 0x40	; 64
    10c6:	f2 e0       	ldi	r31, 0x02	; 2
    10c8:	44 a5       	lds	r20, 0x64
    10ca:	55 a5       	lds	r21, 0x65
    10cc:	e0 91 85 20 	lds	r30, 0x2085
    10d0:	f0 91 86 20 	lds	r31, 0x2086
    10d4:	80 e4       	ldi	r24, 0x40	; 64
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	19 95       	eicall
}
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0b be       	out	0x3b, r0	; 59
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	0b b6       	in	r0, 0x3b	; 59
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1128:	e0 e4       	ldi	r30, 0x40	; 64
    112a:	f2 e0       	ldi	r31, 0x02	; 2
    112c:	44 a9       	sts	0x44, r20
    112e:	55 a9       	sts	0x45, r21
    1130:	e0 91 85 20 	lds	r30, 0x2085
    1134:	f0 91 86 20 	lds	r31, 0x2086
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	64 e0       	ldi	r22, 0x04	; 4
    113e:	19 95       	eicall
}
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0b be       	out	0x3b, r0	; 59
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	0b b6       	in	r0, 0x3b	; 59
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    118c:	e0 e4       	ldi	r30, 0x40	; 64
    118e:	f2 e0       	ldi	r31, 0x02	; 2
    1190:	44 ad       	sts	0x64, r20
    1192:	55 ad       	sts	0x65, r21
    1194:	e0 91 85 20 	lds	r30, 0x2085
    1198:	f0 91 86 20 	lds	r31, 0x2086
    119c:	80 e4       	ldi	r24, 0x40	; 64
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	68 e0       	ldi	r22, 0x08	; 8
    11a2:	19 95       	eicall
}
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0b be       	out	0x3b, r0	; 59
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
    11da:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	c0 30       	cpi	r28, 0x00	; 0
    11e0:	d8 07       	cpc	r29, r24
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <adc_write_configuration+0x1e>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <adc_write_configuration+0x28>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    11e8:	e2 e0       	ldi	r30, 0x02	; 2
    11ea:	c0 34       	cpi	r28, 0x40	; 64
    11ec:	de 07       	cpc	r29, r30
    11ee:	21 f5       	brne	.+72     	; 0x1238 <adc_write_configuration+0x6e>
		cal = adc_get_calibration_data(ADC_CAL_ADCB);
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	0e 94 19 07 	call	0xe32	; 0xe32 <adc_get_calibration_data>
    11f6:	7c 01       	movw	r14, r24
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    11f8:	0e 94 0c 07 	call	0xe18	; 0xe18 <cpu_irq_save>
    11fc:	d8 2e       	mov	r13, r24
	adc_enable_clock(adc);
    11fe:	ce 01       	movw	r24, r28
    1200:	0e 94 77 06 	call	0xcee	; 0xcee <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1204:	88 81       	ld	r24, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1206:	92 e0       	ldi	r25, 0x02	; 2
    1208:	98 83       	st	Y, r25
	adc->CAL = cal;
    120a:	ec 86       	std	Y+12, r14	; 0x0c
    120c:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    120e:	f8 01       	movw	r30, r16
    1210:	25 81       	ldd	r18, Z+5	; 0x05
    1212:	36 81       	ldd	r19, Z+6	; 0x06
    1214:	28 8f       	std	Y+24, r18	; 0x18
    1216:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1218:	92 81       	ldd	r25, Z+2	; 0x02
    121a:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    121c:	94 81       	ldd	r25, Z+4	; 0x04
    121e:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	99 83       	std	Y+1, r25	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1228:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    122a:	90 81       	ld	r25, Z
    122c:	89 2b       	or	r24, r25
    122e:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 99 06 	call	0xd32	; 0xd32 <adc_disable_clock>

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1236:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	08 95       	ret

00001248 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	8b 01       	movw	r16, r22
	irqflags_t flags = cpu_irq_save();
    1256:	0e 94 0c 07 	call	0xe18	; 0xe18 <cpu_irq_save>
    125a:	f8 2e       	mov	r15, r24

	adc_enable_clock(adc);
    125c:	ce 01       	movw	r24, r28
    125e:	0e 94 77 06 	call	0xcee	; 0xcee <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1262:	88 81       	ld	r24, Y
    1264:	80 7c       	andi	r24, 0xC0	; 192
    1266:	f8 01       	movw	r30, r16
    1268:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    126a:	28 8d       	ldd	r18, Y+24	; 0x18
    126c:	39 8d       	ldd	r19, Y+25	; 0x19
    126e:	25 83       	std	Z+5, r18	; 0x05
    1270:	36 83       	std	Z+6, r19	; 0x06
	conf->refctrl = adc->REFCTRL;
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1282:	ce 01       	movw	r24, r28
    1284:	0e 94 99 06 	call	0xd32	; 0xd32 <adc_disable_clock>
    1288:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	08 95       	ret

00001296 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1296:	cf 92       	push	r12
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	7c 01       	movw	r14, r24
    12a8:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    12aa:	c6 2e       	mov	r12, r22
    12ac:	dd 24       	eor	r13, r13
    12ae:	c6 01       	movw	r24, r12
    12b0:	83 70       	andi	r24, 0x03	; 3
    12b2:	90 70       	andi	r25, 0x00	; 0
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <adcch_write_configuration+0x2a>
		index += 2;
		ch_mask >>= 2;
    12b8:	66 95       	lsr	r22
    12ba:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <adcch_write_configuration+0x2c>
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    12c2:	60 ff       	sbrs	r22, 0
		index++;
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    12c6:	e7 01       	movw	r28, r14
    12c8:	a0 96       	adiw	r28, 0x20	; 32
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	23 e0       	ldi	r18, 0x03	; 3
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	2a 95       	dec	r18
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <adcch_write_configuration+0x38>
    12d6:	c8 0f       	add	r28, r24
    12d8:	d9 1f       	adc	r29, r25
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
    12da:	0e 94 0c 07 	call	0xe18	; 0xe18 <cpu_irq_save>
    12de:	d8 2e       	mov	r13, r24
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    12e0:	c7 01       	movw	r24, r14
    12e2:	0e 94 77 06 	call	0xcee	; 0xcee <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 81       	ld	r24, Z
    12ea:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    12ec:	82 81       	ldd	r24, Z+2	; 0x02
    12ee:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
    12f2:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    12f4:	c0 fe       	sbrs	r12, 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <adcch_write_configuration+0x66>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    12f8:	83 81       	ldd	r24, Z+3	; 0x03
    12fa:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    12fc:	c7 01       	movw	r24, r14
    12fe:	0e 94 99 06 	call	0xd32	; 0xd32 <adc_disable_clock>
    1302:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	08 95       	ret

00001316 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	7c 01       	movw	r14, r24
    1328:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    132a:	c6 2e       	mov	r12, r22
    132c:	dd 24       	eor	r13, r13
    132e:	c6 01       	movw	r24, r12
    1330:	83 70       	andi	r24, 0x03	; 3
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	21 f4       	brne	.+8      	; 0x1340 <adcch_read_configuration+0x2a>
		index += 2;
		ch_mask >>= 2;
    1338:	66 95       	lsr	r22
    133a:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <adcch_read_configuration+0x2c>
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1340:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1342:	60 ff       	sbrs	r22, 0
		index++;
    1344:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1346:	e7 01       	movw	r28, r14
    1348:	a0 96       	adiw	r28, 0x20	; 32
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	33 e0       	ldi	r19, 0x03	; 3
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	3a 95       	dec	r19
    1354:	e1 f7       	brne	.-8      	; 0x134e <adcch_read_configuration+0x38>
    1356:	c8 0f       	add	r28, r24
    1358:	d9 1f       	adc	r29, r25
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
    135a:	0e 94 0c 07 	call	0xe18	; 0xe18 <cpu_irq_save>
    135e:	d8 2e       	mov	r13, r24

	adc_enable_clock(adc);
    1360:	c7 01       	movw	r24, r14
    1362:	0e 94 77 06 	call	0xcee	; 0xcee <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1366:	88 81       	ld	r24, Y
    1368:	f8 01       	movw	r30, r16
    136a:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1374:	c0 fe       	sbrs	r12, 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <adcch_read_configuration+0x66>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    137c:	c7 01       	movw	r24, r14
    137e:	0e 94 99 06 	call	0xd32	; 0xd32 <adc_disable_clock>
    1382:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	08 95       	ret

00001396 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1396:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1398:	20 91 8b 20 	lds	r18, 0x208B
    139c:	30 91 8c 20 	lds	r19, 0x208C
    13a0:	e0 91 89 20 	lds	r30, 0x2089
    13a4:	f0 91 8a 20 	lds	r31, 0x208A
    13a8:	c9 01       	movw	r24, r18
    13aa:	19 95       	eicall
    13ac:	97 ff       	sbrs	r25, 7
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <_write+0x20>
		return -1;
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	08 95       	ret
	}
	return 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
}
    13ba:	08 95       	ret

000013bc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    13c6:	80 91 8b 20 	lds	r24, 0x208B
    13ca:	90 91 8c 20 	lds	r25, 0x208C
    13ce:	e0 91 8d 20 	lds	r30, 0x208D
    13d2:	f0 91 8e 20 	lds	r31, 0x208E
    13d6:	be 01       	movw	r22, r28
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	19 95       	eicall
	return c;
}
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0f 90       	pop	r0
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	c0 3c       	cpi	r28, 0xC0	; 192
    13f4:	d8 07       	cpc	r29, r24
    13f6:	11 f4       	brne	.+4      	; 0x13fc <spi_master_init+0x12>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <spi_master_init+0x1c>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
    13fc:	89 e0       	ldi	r24, 0x09	; 9
    13fe:	c0 3c       	cpi	r28, 0xC0	; 192
    1400:	d8 07       	cpc	r29, r24
    1402:	21 f4       	brne	.+8      	; 0x140c <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	68 e0       	ldi	r22, 0x08	; 8
    1408:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
    140c:	88 81       	ld	r24, Y
    140e:	80 61       	ori	r24, 0x10	; 16
    1410:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    1424:	f4 2e       	mov	r15, r20
    1426:	b9 01       	movw	r22, r18
    1428:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
    142a:	00 e8       	ldi	r16, 0x80	; 128
    142c:	14 e8       	ldi	r17, 0x84	; 132
    142e:	2e e1       	ldi	r18, 0x1E	; 30
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	0e 94 74 13 	call	0x26e8	; 0x26e8 <spi_xmega_set_baud_div>
    1436:	87 fd       	sbrc	r24, 7
    1438:	08 c0       	rjmp	.+16     	; 0x144a <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    143a:	98 81       	ld	r25, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
    143c:	8f 2d       	mov	r24, r15
    143e:	88 0f       	add	r24, r24
    1440:	88 0f       	add	r24, r24
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    1442:	8c 70       	andi	r24, 0x0C	; 12
    1444:	93 7f       	andi	r25, 0xF3	; 243
    1446:	89 2b       	or	r24, r25
    1448:	88 83       	st	Y, r24
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	08 95       	ret

00001456 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
    1456:	fc 01       	movw	r30, r24
    1458:	db 01       	movw	r26, r22
 * \param data   data buffer to write
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
    145a:	46 0f       	add	r20, r22
    145c:	57 1f       	adc	r21, r23
{
	while (len--) {
    145e:	05 c0       	rjmp	.+10     	; 0x146a <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
    1460:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    1462:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    1464:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
    1466:	87 ff       	sbrs	r24, 7
    1468:	fd cf       	rjmp	.-6      	; 0x1464 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
    146a:	a4 17       	cp	r26, r20
    146c:	b5 07       	cpc	r27, r21
    146e:	c1 f7       	brne	.-16     	; 0x1460 <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	08 95       	ret

00001474 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    1474:	fc 01       	movw	r30, r24
    1476:	db 01       	movw	r26, r22
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    1478:	8f ef       	ldi	r24, 0xFF	; 255
	while (len--) {
    147a:	08 c0       	rjmp	.+16     	; 0x148c <spi_read_packet+0x18>
    147c:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    147e:	92 81       	ldd	r25, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    1480:	97 ff       	sbrs	r25, 7
    1482:	fd cf       	rjmp	.-6      	; 0x147e <spi_read_packet+0xa>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    1484:	93 81       	ldd	r25, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    1486:	9d 93       	st	X+, r25
		}
		
		spi_read_single(spi, data);
		data++;
    1488:	41 50       	subi	r20, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
    148c:	41 15       	cp	r20, r1
    148e:	51 05       	cpc	r21, r1
    1490:	a9 f7       	brne	.-22     	; 0x147c <spi_read_packet+0x8>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	08 95       	ret

00001496 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    1496:	fb 01       	movw	r30, r22
    1498:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    149a:	e8 2f       	mov	r30, r24
    149c:	e6 95       	lsr	r30
    149e:	e6 95       	lsr	r30
    14a0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	f0 96       	adiw	r30, 0x30	; 48
    14a6:	95 e0       	ldi	r25, 0x05	; 5
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	9a 95       	dec	r25
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <spi_select_device+0x12>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    14b0:	28 2f       	mov	r18, r24
    14b2:	27 70       	andi	r18, 0x07	; 7
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <spi_select_device+0x28>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	2a 95       	dec	r18
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <spi_select_device+0x24>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    14c2:	86 83       	std	Z+6, r24	; 0x06
}
    14c4:	08 95       	ret

000014c6 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    14c6:	fb 01       	movw	r30, r22
    14c8:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    14ca:	e8 2f       	mov	r30, r24
    14cc:	e6 95       	lsr	r30
    14ce:	e6 95       	lsr	r30
    14d0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	f0 96       	adiw	r30, 0x30	; 48
    14d6:	25 e0       	ldi	r18, 0x05	; 5
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	2a 95       	dec	r18
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <spi_deselect_device+0x12>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    14e0:	28 2f       	mov	r18, r24
    14e2:	27 70       	andi	r18, 0x07	; 7
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <spi_deselect_device+0x28>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <spi_deselect_device+0x24>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    14f2:	85 83       	std	Z+5, r24	; 0x05
}
    14f4:	08 95       	ret

000014f6 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	7c 01       	movw	r14, r24
    1504:	8b 01       	movw	r16, r22
    1506:	ea 01       	movw	r28, r20
	while (len) {
    1508:	07 c0       	rjmp	.+14     	; 0x1518 <usart_serial_write_packet+0x22>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    150a:	c7 01       	movw	r24, r14
    150c:	f8 01       	movw	r30, r16
    150e:	61 91       	ld	r22, Z+
    1510:	8f 01       	movw	r16, r30
    1512:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    1516:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	b9 f7       	brne	.-18     	; 0x150a <usart_serial_write_packet+0x14>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	08 95       	ret

0000152c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	7c 01       	movw	r14, r24
    153a:	8b 01       	movw	r16, r22
    153c:	ea 01       	movw	r28, r20
	while (len) {
    153e:	07 c0       	rjmp	.+14     	; 0x154e <usart_serial_read_packet+0x22>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
    1540:	c7 01       	movw	r24, r14
    1542:	0e 94 62 02 	call	0x4c4	; 0x4c4 <usart_getchar>
    1546:	f8 01       	movw	r30, r16
    1548:	81 93       	st	Z+, r24
    154a:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
    154c:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
    154e:	20 97       	sbiw	r28, 0x00	; 0
    1550:	b9 f7       	brne	.-18     	; 0x1540 <usart_serial_read_packet+0x14>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	08 95       	ret

00001562 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	80 93 70 00 	sts	0x0070, r24
    1568:	80 93 71 00 	sts	0x0071, r24
    156c:	80 93 72 00 	sts	0x0072, r24
    1570:	80 93 73 00 	sts	0x0073, r24
    1574:	80 93 74 00 	sts	0x0074, r24
    1578:	80 93 75 00 	sts	0x0075, r24
    157c:	80 93 76 00 	sts	0x0076, r24
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1580:	08 95       	ret

00001582 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    158c:	9f b7       	in	r25, 0x3f	; 63
    158e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1590:	f8 94       	cli
	return flags;
    1592:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1594:	e8 2f       	mov	r30, r24
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	e0 59       	subi	r30, 0x90	; 144
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	60 95       	com	r22
    159e:	80 81       	ld	r24, Z
    15a0:	86 23       	and	r24, r22
    15a2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15a4:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    15a6:	0f 90       	pop	r0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15b8:	9f b7       	in	r25, 0x3f	; 63
    15ba:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    15bc:	f8 94       	cli
	return flags;
    15be:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    15c0:	e8 2f       	mov	r30, r24
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	e0 59       	subi	r30, 0x90	; 144
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	86 2b       	or	r24, r22
    15cc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15ce:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    15e2:	86 30       	cpi	r24, 0x06	; 6
    15e4:	11 f4       	brne	.+4      	; 0x15ea <sysclk_enable_usb+0x12>
		prescaler = CLK_USBPSDIV_8_gc;
    15e6:	68 e1       	ldi	r22, 0x18	; 24
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <sysclk_enable_usb+0x14>
	}
	else {
		prescaler = 0;
    15ea:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    15ec:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    15f0:	81 fd       	sbrc	r24, 1
    15f2:	0e c0       	rjmp	.+28     	; 0x1610 <sysclk_enable_usb+0x38>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15f4:	8f b7       	in	r24, 0x3f	; 63
    15f6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    15f8:	f8 94       	cli
	return flags;
    15fa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    15fc:	80 91 50 00 	lds	r24, 0x0050
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1606:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1608:	80 91 51 00 	lds	r24, 0x0051
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    160c:	81 ff       	sbrs	r24, 1
    160e:	fc cf       	rjmp	.-8      	; 0x1608 <sysclk_enable_usb+0x30>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1610:	63 60       	ori	r22, 0x03	; 3
    1612:	84 e4       	ldi	r24, 0x44	; 68
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 97 18 	call	0x312e	; 0x312e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	60 e4       	ldi	r22, 0x40	; 64
    161e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
}
    1622:	0f 90       	pop	r0
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	60 e4       	ldi	r22, 0x40	; 64
    162e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    1632:	84 e4       	ldi	r24, 0x44	; 68
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	0e 94 97 18 	call	0x312e	; 0x312e <ccp_write_io>
}
    163c:	08 95       	ret

0000163e <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    1648:	8f b7       	in	r24, 0x3f	; 63
    164a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    164c:	f8 94       	cli
	return flags;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1650:	0f 90       	pop	r0
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	0b b6       	in	r0, 0x3b	; 59
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    167e:	e0 91 3d 20 	lds	r30, 0x203D
    1682:	f0 91 3e 20 	lds	r31, 0x203E
    1686:	30 97       	sbiw	r30, 0x00	; 0
    1688:	09 f0       	breq	.+2      	; 0x168c <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    168a:	19 95       	eicall
	}
}
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0b be       	out	0x3b, r0	; 59
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	0b b6       	in	r0, 0x3b	; 59
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    16d8:	e0 91 3f 20 	lds	r30, 0x203F
    16dc:	f0 91 40 20 	lds	r31, 0x2040
    16e0:	30 97       	sbiw	r30, 0x00	; 0
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <__vector_15+0x34>
		tc_tcc0_err_callback();
    16e4:	19 95       	eicall
	}
}
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    1732:	e0 91 41 20 	lds	r30, 0x2041
    1736:	f0 91 42 20 	lds	r31, 0x2042
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <__vector_16+0x34>
		tc_tcc0_cca_callback();
    173e:	19 95       	eicall
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	0b b6       	in	r0, 0x3b	; 59
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    178c:	e0 91 43 20 	lds	r30, 0x2043
    1790:	f0 91 44 20 	lds	r31, 0x2044
    1794:	30 97       	sbiw	r30, 0x00	; 0
    1796:	09 f0       	breq	.+2      	; 0x179a <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    1798:	19 95       	eicall
	}
}
    179a:	ff 91       	pop	r31
    179c:	ef 91       	pop	r30
    179e:	bf 91       	pop	r27
    17a0:	af 91       	pop	r26
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	7f 91       	pop	r23
    17a8:	6f 91       	pop	r22
    17aa:	5f 91       	pop	r21
    17ac:	4f 91       	pop	r20
    17ae:	3f 91       	pop	r19
    17b0:	2f 91       	pop	r18
    17b2:	0f 90       	pop	r0
    17b4:	0b be       	out	0x3b, r0	; 59
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	0f 90       	pop	r0
    17bc:	1f 90       	pop	r1
    17be:	18 95       	reti

000017c0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    17c0:	1f 92       	push	r1
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	0f 92       	push	r0
    17c8:	0b b6       	in	r0, 0x3b	; 59
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 93       	push	r18
    17d0:	3f 93       	push	r19
    17d2:	4f 93       	push	r20
    17d4:	5f 93       	push	r21
    17d6:	6f 93       	push	r22
    17d8:	7f 93       	push	r23
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	af 93       	push	r26
    17e0:	bf 93       	push	r27
    17e2:	ef 93       	push	r30
    17e4:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    17e6:	e0 91 45 20 	lds	r30, 0x2045
    17ea:	f0 91 46 20 	lds	r31, 0x2046
    17ee:	30 97       	sbiw	r30, 0x00	; 0
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    17f2:	19 95       	eicall
	}
}
    17f4:	ff 91       	pop	r31
    17f6:	ef 91       	pop	r30
    17f8:	bf 91       	pop	r27
    17fa:	af 91       	pop	r26
    17fc:	9f 91       	pop	r25
    17fe:	8f 91       	pop	r24
    1800:	7f 91       	pop	r23
    1802:	6f 91       	pop	r22
    1804:	5f 91       	pop	r21
    1806:	4f 91       	pop	r20
    1808:	3f 91       	pop	r19
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0b be       	out	0x3b, r0	; 59
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	0b b6       	in	r0, 0x3b	; 59
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	2f 93       	push	r18
    182a:	3f 93       	push	r19
    182c:	4f 93       	push	r20
    182e:	5f 93       	push	r21
    1830:	6f 93       	push	r22
    1832:	7f 93       	push	r23
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	af 93       	push	r26
    183a:	bf 93       	push	r27
    183c:	ef 93       	push	r30
    183e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1840:	e0 91 47 20 	lds	r30, 0x2047
    1844:	f0 91 48 20 	lds	r31, 0x2048
    1848:	30 97       	sbiw	r30, 0x00	; 0
    184a:	09 f0       	breq	.+2      	; 0x184e <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    184c:	19 95       	eicall
	}
}
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0b be       	out	0x3b, r0	; 59
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	0b b6       	in	r0, 0x3b	; 59
    187e:	0f 92       	push	r0
    1880:	11 24       	eor	r1, r1
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	ef 93       	push	r30
    1898:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    189a:	e0 91 49 20 	lds	r30, 0x2049
    189e:	f0 91 4a 20 	lds	r31, 0x204A
    18a2:	30 97       	sbiw	r30, 0x00	; 0
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    18a6:	19 95       	eicall
	}
}
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	bf 91       	pop	r27
    18ae:	af 91       	pop	r26
    18b0:	9f 91       	pop	r25
    18b2:	8f 91       	pop	r24
    18b4:	7f 91       	pop	r23
    18b6:	6f 91       	pop	r22
    18b8:	5f 91       	pop	r21
    18ba:	4f 91       	pop	r20
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0b be       	out	0x3b, r0	; 59
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	0b b6       	in	r0, 0x3b	; 59
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    18f4:	e0 91 4b 20 	lds	r30, 0x204B
    18f8:	f0 91 4c 20 	lds	r31, 0x204C
    18fc:	30 97       	sbiw	r30, 0x00	; 0
    18fe:	09 f0       	breq	.+2      	; 0x1902 <__vector_21+0x34>
		tc_tcc1_err_callback();
    1900:	19 95       	eicall
	}
}
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0b be       	out	0x3b, r0	; 59
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1928:	1f 92       	push	r1
    192a:	0f 92       	push	r0
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	0f 92       	push	r0
    1930:	0b b6       	in	r0, 0x3b	; 59
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	2f 93       	push	r18
    1938:	3f 93       	push	r19
    193a:	4f 93       	push	r20
    193c:	5f 93       	push	r21
    193e:	6f 93       	push	r22
    1940:	7f 93       	push	r23
    1942:	8f 93       	push	r24
    1944:	9f 93       	push	r25
    1946:	af 93       	push	r26
    1948:	bf 93       	push	r27
    194a:	ef 93       	push	r30
    194c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    194e:	e0 91 4d 20 	lds	r30, 0x204D
    1952:	f0 91 4e 20 	lds	r31, 0x204E
    1956:	30 97       	sbiw	r30, 0x00	; 0
    1958:	09 f0       	breq	.+2      	; 0x195c <__vector_22+0x34>
		tc_tcc1_cca_callback();
    195a:	19 95       	eicall
	}
}
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0b be       	out	0x3b, r0	; 59
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	0b b6       	in	r0, 0x3b	; 59
    198c:	0f 92       	push	r0
    198e:	11 24       	eor	r1, r1
    1990:	2f 93       	push	r18
    1992:	3f 93       	push	r19
    1994:	4f 93       	push	r20
    1996:	5f 93       	push	r21
    1998:	6f 93       	push	r22
    199a:	7f 93       	push	r23
    199c:	8f 93       	push	r24
    199e:	9f 93       	push	r25
    19a0:	af 93       	push	r26
    19a2:	bf 93       	push	r27
    19a4:	ef 93       	push	r30
    19a6:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    19a8:	e0 91 4f 20 	lds	r30, 0x204F
    19ac:	f0 91 50 20 	lds	r31, 0x2050
    19b0:	30 97       	sbiw	r30, 0x00	; 0
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    19b4:	19 95       	eicall
	}
}
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0b be       	out	0x3b, r0	; 59
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	0f 90       	pop	r0
    19d8:	1f 90       	pop	r1
    19da:	18 95       	reti

000019dc <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	0b b6       	in	r0, 0x3b	; 59
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	af 93       	push	r26
    19fc:	bf 93       	push	r27
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1a02:	e0 91 51 20 	lds	r30, 0x2051
    1a06:	f0 91 52 20 	lds	r31, 0x2052
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1a0e:	19 95       	eicall
	}
}
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0b be       	out	0x3b, r0	; 59
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	0b b6       	in	r0, 0x3b	; 59
    1a40:	0f 92       	push	r0
    1a42:	11 24       	eor	r1, r1
    1a44:	2f 93       	push	r18
    1a46:	3f 93       	push	r19
    1a48:	4f 93       	push	r20
    1a4a:	5f 93       	push	r21
    1a4c:	6f 93       	push	r22
    1a4e:	7f 93       	push	r23
    1a50:	8f 93       	push	r24
    1a52:	9f 93       	push	r25
    1a54:	af 93       	push	r26
    1a56:	bf 93       	push	r27
    1a58:	ef 93       	push	r30
    1a5a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1a5c:	e0 91 53 20 	lds	r30, 0x2053
    1a60:	f0 91 54 20 	lds	r31, 0x2054
    1a64:	30 97       	sbiw	r30, 0x00	; 0
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__vector_78+0x34>
		tc_tcd0_err_callback();
    1a68:	19 95       	eicall
	}
}
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0b be       	out	0x3b, r0	; 59
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1a90:	1f 92       	push	r1
    1a92:	0f 92       	push	r0
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	0f 92       	push	r0
    1a98:	0b b6       	in	r0, 0x3b	; 59
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	5f 93       	push	r21
    1aa6:	6f 93       	push	r22
    1aa8:	7f 93       	push	r23
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1ab6:	e0 91 55 20 	lds	r30, 0x2055
    1aba:	f0 91 56 20 	lds	r31, 0x2056
    1abe:	30 97       	sbiw	r30, 0x00	; 0
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1ac2:	19 95       	eicall
	}
}
    1ac4:	ff 91       	pop	r31
    1ac6:	ef 91       	pop	r30
    1ac8:	bf 91       	pop	r27
    1aca:	af 91       	pop	r26
    1acc:	9f 91       	pop	r25
    1ace:	8f 91       	pop	r24
    1ad0:	7f 91       	pop	r23
    1ad2:	6f 91       	pop	r22
    1ad4:	5f 91       	pop	r21
    1ad6:	4f 91       	pop	r20
    1ad8:	3f 91       	pop	r19
    1ada:	2f 91       	pop	r18
    1adc:	0f 90       	pop	r0
    1ade:	0b be       	out	0x3b, r0	; 59
    1ae0:	0f 90       	pop	r0
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	0f 90       	pop	r0
    1ae6:	1f 90       	pop	r1
    1ae8:	18 95       	reti

00001aea <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1aea:	1f 92       	push	r1
    1aec:	0f 92       	push	r0
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	0f 92       	push	r0
    1af2:	0b b6       	in	r0, 0x3b	; 59
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	2f 93       	push	r18
    1afa:	3f 93       	push	r19
    1afc:	4f 93       	push	r20
    1afe:	5f 93       	push	r21
    1b00:	6f 93       	push	r22
    1b02:	7f 93       	push	r23
    1b04:	8f 93       	push	r24
    1b06:	9f 93       	push	r25
    1b08:	af 93       	push	r26
    1b0a:	bf 93       	push	r27
    1b0c:	ef 93       	push	r30
    1b0e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1b10:	e0 91 57 20 	lds	r30, 0x2057
    1b14:	f0 91 58 20 	lds	r31, 0x2058
    1b18:	30 97       	sbiw	r30, 0x00	; 0
    1b1a:	09 f0       	breq	.+2      	; 0x1b1e <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    1b1c:	19 95       	eicall
	}
}
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0b be       	out	0x3b, r0	; 59
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	0f 90       	pop	r0
    1b40:	1f 90       	pop	r1
    1b42:	18 95       	reti

00001b44 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	0b b6       	in	r0, 0x3b	; 59
    1b4e:	0f 92       	push	r0
    1b50:	11 24       	eor	r1, r1
    1b52:	2f 93       	push	r18
    1b54:	3f 93       	push	r19
    1b56:	4f 93       	push	r20
    1b58:	5f 93       	push	r21
    1b5a:	6f 93       	push	r22
    1b5c:	7f 93       	push	r23
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	ef 93       	push	r30
    1b68:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1b6a:	e0 91 59 20 	lds	r30, 0x2059
    1b6e:	f0 91 5a 20 	lds	r31, 0x205A
    1b72:	30 97       	sbiw	r30, 0x00	; 0
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1b76:	19 95       	eicall
	}
}
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0b be       	out	0x3b, r0	; 59
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1b9e:	1f 92       	push	r1
    1ba0:	0f 92       	push	r0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	0f 92       	push	r0
    1ba6:	0b b6       	in	r0, 0x3b	; 59
    1ba8:	0f 92       	push	r0
    1baa:	11 24       	eor	r1, r1
    1bac:	2f 93       	push	r18
    1bae:	3f 93       	push	r19
    1bb0:	4f 93       	push	r20
    1bb2:	5f 93       	push	r21
    1bb4:	6f 93       	push	r22
    1bb6:	7f 93       	push	r23
    1bb8:	8f 93       	push	r24
    1bba:	9f 93       	push	r25
    1bbc:	af 93       	push	r26
    1bbe:	bf 93       	push	r27
    1bc0:	ef 93       	push	r30
    1bc2:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1bc4:	e0 91 5b 20 	lds	r30, 0x205B
    1bc8:	f0 91 5c 20 	lds	r31, 0x205C
    1bcc:	30 97       	sbiw	r30, 0x00	; 0
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1bd0:	19 95       	eicall
	}
}
    1bd2:	ff 91       	pop	r31
    1bd4:	ef 91       	pop	r30
    1bd6:	bf 91       	pop	r27
    1bd8:	af 91       	pop	r26
    1bda:	9f 91       	pop	r25
    1bdc:	8f 91       	pop	r24
    1bde:	7f 91       	pop	r23
    1be0:	6f 91       	pop	r22
    1be2:	5f 91       	pop	r21
    1be4:	4f 91       	pop	r20
    1be6:	3f 91       	pop	r19
    1be8:	2f 91       	pop	r18
    1bea:	0f 90       	pop	r0
    1bec:	0b be       	out	0x3b, r0	; 59
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1bf8:	1f 92       	push	r1
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	0b b6       	in	r0, 0x3b	; 59
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1c1e:	e0 91 5d 20 	lds	r30, 0x205D
    1c22:	f0 91 5e 20 	lds	r31, 0x205E
    1c26:	30 97       	sbiw	r30, 0x00	; 0
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1c2a:	19 95       	eicall
	}
}
    1c2c:	ff 91       	pop	r31
    1c2e:	ef 91       	pop	r30
    1c30:	bf 91       	pop	r27
    1c32:	af 91       	pop	r26
    1c34:	9f 91       	pop	r25
    1c36:	8f 91       	pop	r24
    1c38:	7f 91       	pop	r23
    1c3a:	6f 91       	pop	r22
    1c3c:	5f 91       	pop	r21
    1c3e:	4f 91       	pop	r20
    1c40:	3f 91       	pop	r19
    1c42:	2f 91       	pop	r18
    1c44:	0f 90       	pop	r0
    1c46:	0b be       	out	0x3b, r0	; 59
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0
    1c4e:	1f 90       	pop	r1
    1c50:	18 95       	reti

00001c52 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	0b b6       	in	r0, 0x3b	; 59
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	2f 93       	push	r18
    1c62:	3f 93       	push	r19
    1c64:	4f 93       	push	r20
    1c66:	5f 93       	push	r21
    1c68:	6f 93       	push	r22
    1c6a:	7f 93       	push	r23
    1c6c:	8f 93       	push	r24
    1c6e:	9f 93       	push	r25
    1c70:	af 93       	push	r26
    1c72:	bf 93       	push	r27
    1c74:	ef 93       	push	r30
    1c76:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1c78:	e0 91 5f 20 	lds	r30, 0x205F
    1c7c:	f0 91 60 20 	lds	r31, 0x2060
    1c80:	30 97       	sbiw	r30, 0x00	; 0
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <__vector_84+0x34>
		tc_tcd1_err_callback();
    1c84:	19 95       	eicall
	}
}
    1c86:	ff 91       	pop	r31
    1c88:	ef 91       	pop	r30
    1c8a:	bf 91       	pop	r27
    1c8c:	af 91       	pop	r26
    1c8e:	9f 91       	pop	r25
    1c90:	8f 91       	pop	r24
    1c92:	7f 91       	pop	r23
    1c94:	6f 91       	pop	r22
    1c96:	5f 91       	pop	r21
    1c98:	4f 91       	pop	r20
    1c9a:	3f 91       	pop	r19
    1c9c:	2f 91       	pop	r18
    1c9e:	0f 90       	pop	r0
    1ca0:	0b be       	out	0x3b, r0	; 59
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	0f 90       	pop	r0
    1ca8:	1f 90       	pop	r1
    1caa:	18 95       	reti

00001cac <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1cac:	1f 92       	push	r1
    1cae:	0f 92       	push	r0
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	0f 92       	push	r0
    1cb4:	0b b6       	in	r0, 0x3b	; 59
    1cb6:	0f 92       	push	r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	2f 93       	push	r18
    1cbc:	3f 93       	push	r19
    1cbe:	4f 93       	push	r20
    1cc0:	5f 93       	push	r21
    1cc2:	6f 93       	push	r22
    1cc4:	7f 93       	push	r23
    1cc6:	8f 93       	push	r24
    1cc8:	9f 93       	push	r25
    1cca:	af 93       	push	r26
    1ccc:	bf 93       	push	r27
    1cce:	ef 93       	push	r30
    1cd0:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1cd2:	e0 91 61 20 	lds	r30, 0x2061
    1cd6:	f0 91 62 20 	lds	r31, 0x2062
    1cda:	30 97       	sbiw	r30, 0x00	; 0
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1cde:	19 95       	eicall
	}
}
    1ce0:	ff 91       	pop	r31
    1ce2:	ef 91       	pop	r30
    1ce4:	bf 91       	pop	r27
    1ce6:	af 91       	pop	r26
    1ce8:	9f 91       	pop	r25
    1cea:	8f 91       	pop	r24
    1cec:	7f 91       	pop	r23
    1cee:	6f 91       	pop	r22
    1cf0:	5f 91       	pop	r21
    1cf2:	4f 91       	pop	r20
    1cf4:	3f 91       	pop	r19
    1cf6:	2f 91       	pop	r18
    1cf8:	0f 90       	pop	r0
    1cfa:	0b be       	out	0x3b, r0	; 59
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	0b b6       	in	r0, 0x3b	; 59
    1d10:	0f 92       	push	r0
    1d12:	11 24       	eor	r1, r1
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1d2c:	e0 91 63 20 	lds	r30, 0x2063
    1d30:	f0 91 64 20 	lds	r31, 0x2064
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1d38:	19 95       	eicall
	}
}
    1d3a:	ff 91       	pop	r31
    1d3c:	ef 91       	pop	r30
    1d3e:	bf 91       	pop	r27
    1d40:	af 91       	pop	r26
    1d42:	9f 91       	pop	r25
    1d44:	8f 91       	pop	r24
    1d46:	7f 91       	pop	r23
    1d48:	6f 91       	pop	r22
    1d4a:	5f 91       	pop	r21
    1d4c:	4f 91       	pop	r20
    1d4e:	3f 91       	pop	r19
    1d50:	2f 91       	pop	r18
    1d52:	0f 90       	pop	r0
    1d54:	0b be       	out	0x3b, r0	; 59
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	0b b6       	in	r0, 0x3b	; 59
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	2f 93       	push	r18
    1d70:	3f 93       	push	r19
    1d72:	4f 93       	push	r20
    1d74:	5f 93       	push	r21
    1d76:	6f 93       	push	r22
    1d78:	7f 93       	push	r23
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1d86:	e0 91 65 20 	lds	r30, 0x2065
    1d8a:	f0 91 66 20 	lds	r31, 0x2066
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1d92:	19 95       	eicall
	}
}
    1d94:	ff 91       	pop	r31
    1d96:	ef 91       	pop	r30
    1d98:	bf 91       	pop	r27
    1d9a:	af 91       	pop	r26
    1d9c:	9f 91       	pop	r25
    1d9e:	8f 91       	pop	r24
    1da0:	7f 91       	pop	r23
    1da2:	6f 91       	pop	r22
    1da4:	5f 91       	pop	r21
    1da6:	4f 91       	pop	r20
    1da8:	3f 91       	pop	r19
    1daa:	2f 91       	pop	r18
    1dac:	0f 90       	pop	r0
    1dae:	0b be       	out	0x3b, r0	; 59
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti

00001dba <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	0b b6       	in	r0, 0x3b	; 59
    1dc4:	0f 92       	push	r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	2f 93       	push	r18
    1dca:	3f 93       	push	r19
    1dcc:	4f 93       	push	r20
    1dce:	5f 93       	push	r21
    1dd0:	6f 93       	push	r22
    1dd2:	7f 93       	push	r23
    1dd4:	8f 93       	push	r24
    1dd6:	9f 93       	push	r25
    1dd8:	af 93       	push	r26
    1dda:	bf 93       	push	r27
    1ddc:	ef 93       	push	r30
    1dde:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1de0:	e0 91 67 20 	lds	r30, 0x2067
    1de4:	f0 91 68 20 	lds	r31, 0x2068
    1de8:	30 97       	sbiw	r30, 0x00	; 0
    1dea:	09 f0       	breq	.+2      	; 0x1dee <__vector_48+0x34>
		tc_tce0_err_callback();
    1dec:	19 95       	eicall
	}
}
    1dee:	ff 91       	pop	r31
    1df0:	ef 91       	pop	r30
    1df2:	bf 91       	pop	r27
    1df4:	af 91       	pop	r26
    1df6:	9f 91       	pop	r25
    1df8:	8f 91       	pop	r24
    1dfa:	7f 91       	pop	r23
    1dfc:	6f 91       	pop	r22
    1dfe:	5f 91       	pop	r21
    1e00:	4f 91       	pop	r20
    1e02:	3f 91       	pop	r19
    1e04:	2f 91       	pop	r18
    1e06:	0f 90       	pop	r0
    1e08:	0b be       	out	0x3b, r0	; 59
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1e14:	1f 92       	push	r1
    1e16:	0f 92       	push	r0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	0f 92       	push	r0
    1e1c:	0b b6       	in	r0, 0x3b	; 59
    1e1e:	0f 92       	push	r0
    1e20:	11 24       	eor	r1, r1
    1e22:	2f 93       	push	r18
    1e24:	3f 93       	push	r19
    1e26:	4f 93       	push	r20
    1e28:	5f 93       	push	r21
    1e2a:	6f 93       	push	r22
    1e2c:	7f 93       	push	r23
    1e2e:	8f 93       	push	r24
    1e30:	9f 93       	push	r25
    1e32:	af 93       	push	r26
    1e34:	bf 93       	push	r27
    1e36:	ef 93       	push	r30
    1e38:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1e3a:	e0 91 69 20 	lds	r30, 0x2069
    1e3e:	f0 91 6a 20 	lds	r31, 0x206A
    1e42:	30 97       	sbiw	r30, 0x00	; 0
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1e46:	19 95       	eicall
	}
}
    1e48:	ff 91       	pop	r31
    1e4a:	ef 91       	pop	r30
    1e4c:	bf 91       	pop	r27
    1e4e:	af 91       	pop	r26
    1e50:	9f 91       	pop	r25
    1e52:	8f 91       	pop	r24
    1e54:	7f 91       	pop	r23
    1e56:	6f 91       	pop	r22
    1e58:	5f 91       	pop	r21
    1e5a:	4f 91       	pop	r20
    1e5c:	3f 91       	pop	r19
    1e5e:	2f 91       	pop	r18
    1e60:	0f 90       	pop	r0
    1e62:	0b be       	out	0x3b, r0	; 59
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	0f 90       	pop	r0
    1e6a:	1f 90       	pop	r1
    1e6c:	18 95       	reti

00001e6e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	0b b6       	in	r0, 0x3b	; 59
    1e78:	0f 92       	push	r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	2f 93       	push	r18
    1e7e:	3f 93       	push	r19
    1e80:	4f 93       	push	r20
    1e82:	5f 93       	push	r21
    1e84:	6f 93       	push	r22
    1e86:	7f 93       	push	r23
    1e88:	8f 93       	push	r24
    1e8a:	9f 93       	push	r25
    1e8c:	af 93       	push	r26
    1e8e:	bf 93       	push	r27
    1e90:	ef 93       	push	r30
    1e92:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1e94:	e0 91 6b 20 	lds	r30, 0x206B
    1e98:	f0 91 6c 20 	lds	r31, 0x206C
    1e9c:	30 97       	sbiw	r30, 0x00	; 0
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    1ea0:	19 95       	eicall
	}
}
    1ea2:	ff 91       	pop	r31
    1ea4:	ef 91       	pop	r30
    1ea6:	bf 91       	pop	r27
    1ea8:	af 91       	pop	r26
    1eaa:	9f 91       	pop	r25
    1eac:	8f 91       	pop	r24
    1eae:	7f 91       	pop	r23
    1eb0:	6f 91       	pop	r22
    1eb2:	5f 91       	pop	r21
    1eb4:	4f 91       	pop	r20
    1eb6:	3f 91       	pop	r19
    1eb8:	2f 91       	pop	r18
    1eba:	0f 90       	pop	r0
    1ebc:	0b be       	out	0x3b, r0	; 59
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	0f 92       	push	r0
    1ed0:	0b b6       	in	r0, 0x3b	; 59
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	2f 93       	push	r18
    1ed8:	3f 93       	push	r19
    1eda:	4f 93       	push	r20
    1edc:	5f 93       	push	r21
    1ede:	6f 93       	push	r22
    1ee0:	7f 93       	push	r23
    1ee2:	8f 93       	push	r24
    1ee4:	9f 93       	push	r25
    1ee6:	af 93       	push	r26
    1ee8:	bf 93       	push	r27
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1eee:	e0 91 6d 20 	lds	r30, 0x206D
    1ef2:	f0 91 6e 20 	lds	r31, 0x206E
    1ef6:	30 97       	sbiw	r30, 0x00	; 0
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1efa:	19 95       	eicall
	}
}
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0b be       	out	0x3b, r0	; 59
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1f22:	1f 92       	push	r1
    1f24:	0f 92       	push	r0
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	0f 92       	push	r0
    1f2a:	0b b6       	in	r0, 0x3b	; 59
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1f48:	e0 91 6f 20 	lds	r30, 0x206F
    1f4c:	f0 91 70 20 	lds	r31, 0x2070
    1f50:	30 97       	sbiw	r30, 0x00	; 0
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1f54:	19 95       	eicall
	}
}
    1f56:	ff 91       	pop	r31
    1f58:	ef 91       	pop	r30
    1f5a:	bf 91       	pop	r27
    1f5c:	af 91       	pop	r26
    1f5e:	9f 91       	pop	r25
    1f60:	8f 91       	pop	r24
    1f62:	7f 91       	pop	r23
    1f64:	6f 91       	pop	r22
    1f66:	5f 91       	pop	r21
    1f68:	4f 91       	pop	r20
    1f6a:	3f 91       	pop	r19
    1f6c:	2f 91       	pop	r18
    1f6e:	0f 90       	pop	r0
    1f70:	0b be       	out	0x3b, r0	; 59
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1f7c:	1f 92       	push	r1
    1f7e:	0f 92       	push	r0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	0f 92       	push	r0
    1f84:	0b b6       	in	r0, 0x3b	; 59
    1f86:	0f 92       	push	r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	2f 93       	push	r18
    1f8c:	3f 93       	push	r19
    1f8e:	4f 93       	push	r20
    1f90:	5f 93       	push	r21
    1f92:	6f 93       	push	r22
    1f94:	7f 93       	push	r23
    1f96:	8f 93       	push	r24
    1f98:	9f 93       	push	r25
    1f9a:	af 93       	push	r26
    1f9c:	bf 93       	push	r27
    1f9e:	ef 93       	push	r30
    1fa0:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1fa2:	e0 91 71 20 	lds	r30, 0x2071
    1fa6:	f0 91 72 20 	lds	r31, 0x2072
    1faa:	30 97       	sbiw	r30, 0x00	; 0
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1fae:	19 95       	eicall
	}
}
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0b be       	out	0x3b, r0	; 59
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	0b b6       	in	r0, 0x3b	; 59
    1fe0:	0f 92       	push	r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	2f 93       	push	r18
    1fe6:	3f 93       	push	r19
    1fe8:	4f 93       	push	r20
    1fea:	5f 93       	push	r21
    1fec:	6f 93       	push	r22
    1fee:	7f 93       	push	r23
    1ff0:	8f 93       	push	r24
    1ff2:	9f 93       	push	r25
    1ff4:	af 93       	push	r26
    1ff6:	bf 93       	push	r27
    1ff8:	ef 93       	push	r30
    1ffa:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1ffc:	e0 91 73 20 	lds	r30, 0x2073
    2000:	f0 91 74 20 	lds	r31, 0x2074
    2004:	30 97       	sbiw	r30, 0x00	; 0
    2006:	09 f0       	breq	.+2      	; 0x200a <__vector_54+0x34>
		tc_tce1_err_callback();
    2008:	19 95       	eicall
	}
}
    200a:	ff 91       	pop	r31
    200c:	ef 91       	pop	r30
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	7f 91       	pop	r23
    2018:	6f 91       	pop	r22
    201a:	5f 91       	pop	r21
    201c:	4f 91       	pop	r20
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0b be       	out	0x3b, r0	; 59
    2026:	0f 90       	pop	r0
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	0f 90       	pop	r0
    202c:	1f 90       	pop	r1
    202e:	18 95       	reti

00002030 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    2030:	1f 92       	push	r1
    2032:	0f 92       	push	r0
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	0f 92       	push	r0
    2038:	0b b6       	in	r0, 0x3b	; 59
    203a:	0f 92       	push	r0
    203c:	11 24       	eor	r1, r1
    203e:	2f 93       	push	r18
    2040:	3f 93       	push	r19
    2042:	4f 93       	push	r20
    2044:	5f 93       	push	r21
    2046:	6f 93       	push	r22
    2048:	7f 93       	push	r23
    204a:	8f 93       	push	r24
    204c:	9f 93       	push	r25
    204e:	af 93       	push	r26
    2050:	bf 93       	push	r27
    2052:	ef 93       	push	r30
    2054:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    2056:	e0 91 75 20 	lds	r30, 0x2075
    205a:	f0 91 76 20 	lds	r31, 0x2076
    205e:	30 97       	sbiw	r30, 0x00	; 0
    2060:	09 f0       	breq	.+2      	; 0x2064 <__vector_55+0x34>
		tc_tce1_cca_callback();
    2062:	19 95       	eicall
	}
}
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0b be       	out	0x3b, r0	; 59
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	0b b6       	in	r0, 0x3b	; 59
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    20b0:	e0 91 77 20 	lds	r30, 0x2077
    20b4:	f0 91 78 20 	lds	r31, 0x2078
    20b8:	30 97       	sbiw	r30, 0x00	; 0
    20ba:	09 f0       	breq	.+2      	; 0x20be <__vector_56+0x34>
		tc_tce1_ccb_callback();
    20bc:	19 95       	eicall
	}
}
    20be:	ff 91       	pop	r31
    20c0:	ef 91       	pop	r30
    20c2:	bf 91       	pop	r27
    20c4:	af 91       	pop	r26
    20c6:	9f 91       	pop	r25
    20c8:	8f 91       	pop	r24
    20ca:	7f 91       	pop	r23
    20cc:	6f 91       	pop	r22
    20ce:	5f 91       	pop	r21
    20d0:	4f 91       	pop	r20
    20d2:	3f 91       	pop	r19
    20d4:	2f 91       	pop	r18
    20d6:	0f 90       	pop	r0
    20d8:	0b be       	out	0x3b, r0	; 59
    20da:	0f 90       	pop	r0
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	0f 90       	pop	r0
    20e0:	1f 90       	pop	r1
    20e2:	18 95       	reti

000020e4 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    20e4:	1f 92       	push	r1
    20e6:	0f 92       	push	r0
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	0f 92       	push	r0
    20ec:	0b b6       	in	r0, 0x3b	; 59
    20ee:	0f 92       	push	r0
    20f0:	11 24       	eor	r1, r1
    20f2:	2f 93       	push	r18
    20f4:	3f 93       	push	r19
    20f6:	4f 93       	push	r20
    20f8:	5f 93       	push	r21
    20fa:	6f 93       	push	r22
    20fc:	7f 93       	push	r23
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    210a:	e0 91 79 20 	lds	r30, 0x2079
    210e:	f0 91 7a 20 	lds	r31, 0x207A
    2112:	30 97       	sbiw	r30, 0x00	; 0
    2114:	09 f0       	breq	.+2      	; 0x2118 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    2116:	19 95       	eicall
	}
}
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0b be       	out	0x3b, r0	; 59
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	0b b6       	in	r0, 0x3b	; 59
    2148:	0f 92       	push	r0
    214a:	11 24       	eor	r1, r1
    214c:	2f 93       	push	r18
    214e:	3f 93       	push	r19
    2150:	4f 93       	push	r20
    2152:	5f 93       	push	r21
    2154:	6f 93       	push	r22
    2156:	7f 93       	push	r23
    2158:	8f 93       	push	r24
    215a:	9f 93       	push	r25
    215c:	af 93       	push	r26
    215e:	bf 93       	push	r27
    2160:	ef 93       	push	r30
    2162:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    2164:	e0 91 7b 20 	lds	r30, 0x207B
    2168:	f0 91 7c 20 	lds	r31, 0x207C
    216c:	30 97       	sbiw	r30, 0x00	; 0
    216e:	09 f0       	breq	.+2      	; 0x2172 <__vector_109+0x34>
		tc_tcf0_err_callback();
    2170:	19 95       	eicall
	}
}
    2172:	ff 91       	pop	r31
    2174:	ef 91       	pop	r30
    2176:	bf 91       	pop	r27
    2178:	af 91       	pop	r26
    217a:	9f 91       	pop	r25
    217c:	8f 91       	pop	r24
    217e:	7f 91       	pop	r23
    2180:	6f 91       	pop	r22
    2182:	5f 91       	pop	r21
    2184:	4f 91       	pop	r20
    2186:	3f 91       	pop	r19
    2188:	2f 91       	pop	r18
    218a:	0f 90       	pop	r0
    218c:	0b be       	out	0x3b, r0	; 59
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	0f 90       	pop	r0
    2194:	1f 90       	pop	r1
    2196:	18 95       	reti

00002198 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    2198:	1f 92       	push	r1
    219a:	0f 92       	push	r0
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	0f 92       	push	r0
    21a0:	0b b6       	in	r0, 0x3b	; 59
    21a2:	0f 92       	push	r0
    21a4:	11 24       	eor	r1, r1
    21a6:	2f 93       	push	r18
    21a8:	3f 93       	push	r19
    21aa:	4f 93       	push	r20
    21ac:	5f 93       	push	r21
    21ae:	6f 93       	push	r22
    21b0:	7f 93       	push	r23
    21b2:	8f 93       	push	r24
    21b4:	9f 93       	push	r25
    21b6:	af 93       	push	r26
    21b8:	bf 93       	push	r27
    21ba:	ef 93       	push	r30
    21bc:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    21be:	e0 91 7d 20 	lds	r30, 0x207D
    21c2:	f0 91 7e 20 	lds	r31, 0x207E
    21c6:	30 97       	sbiw	r30, 0x00	; 0
    21c8:	09 f0       	breq	.+2      	; 0x21cc <__vector_110+0x34>
		tc_tcf0_cca_callback();
    21ca:	19 95       	eicall
	}
}
    21cc:	ff 91       	pop	r31
    21ce:	ef 91       	pop	r30
    21d0:	bf 91       	pop	r27
    21d2:	af 91       	pop	r26
    21d4:	9f 91       	pop	r25
    21d6:	8f 91       	pop	r24
    21d8:	7f 91       	pop	r23
    21da:	6f 91       	pop	r22
    21dc:	5f 91       	pop	r21
    21de:	4f 91       	pop	r20
    21e0:	3f 91       	pop	r19
    21e2:	2f 91       	pop	r18
    21e4:	0f 90       	pop	r0
    21e6:	0b be       	out	0x3b, r0	; 59
    21e8:	0f 90       	pop	r0
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	0f 90       	pop	r0
    21ee:	1f 90       	pop	r1
    21f0:	18 95       	reti

000021f2 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    21f2:	1f 92       	push	r1
    21f4:	0f 92       	push	r0
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	0f 92       	push	r0
    21fa:	0b b6       	in	r0, 0x3b	; 59
    21fc:	0f 92       	push	r0
    21fe:	11 24       	eor	r1, r1
    2200:	2f 93       	push	r18
    2202:	3f 93       	push	r19
    2204:	4f 93       	push	r20
    2206:	5f 93       	push	r21
    2208:	6f 93       	push	r22
    220a:	7f 93       	push	r23
    220c:	8f 93       	push	r24
    220e:	9f 93       	push	r25
    2210:	af 93       	push	r26
    2212:	bf 93       	push	r27
    2214:	ef 93       	push	r30
    2216:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    2218:	e0 91 7f 20 	lds	r30, 0x207F
    221c:	f0 91 80 20 	lds	r31, 0x2080
    2220:	30 97       	sbiw	r30, 0x00	; 0
    2222:	09 f0       	breq	.+2      	; 0x2226 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    2224:	19 95       	eicall
	}
}
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	7f 91       	pop	r23
    2234:	6f 91       	pop	r22
    2236:	5f 91       	pop	r21
    2238:	4f 91       	pop	r20
    223a:	3f 91       	pop	r19
    223c:	2f 91       	pop	r18
    223e:	0f 90       	pop	r0
    2240:	0b be       	out	0x3b, r0	; 59
    2242:	0f 90       	pop	r0
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	0f 90       	pop	r0
    2248:	1f 90       	pop	r1
    224a:	18 95       	reti

0000224c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    224c:	1f 92       	push	r1
    224e:	0f 92       	push	r0
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	0f 92       	push	r0
    2254:	0b b6       	in	r0, 0x3b	; 59
    2256:	0f 92       	push	r0
    2258:	11 24       	eor	r1, r1
    225a:	2f 93       	push	r18
    225c:	3f 93       	push	r19
    225e:	4f 93       	push	r20
    2260:	5f 93       	push	r21
    2262:	6f 93       	push	r22
    2264:	7f 93       	push	r23
    2266:	8f 93       	push	r24
    2268:	9f 93       	push	r25
    226a:	af 93       	push	r26
    226c:	bf 93       	push	r27
    226e:	ef 93       	push	r30
    2270:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    2272:	e0 91 81 20 	lds	r30, 0x2081
    2276:	f0 91 82 20 	lds	r31, 0x2082
    227a:	30 97       	sbiw	r30, 0x00	; 0
    227c:	09 f0       	breq	.+2      	; 0x2280 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    227e:	19 95       	eicall
	}
}
    2280:	ff 91       	pop	r31
    2282:	ef 91       	pop	r30
    2284:	bf 91       	pop	r27
    2286:	af 91       	pop	r26
    2288:	9f 91       	pop	r25
    228a:	8f 91       	pop	r24
    228c:	7f 91       	pop	r23
    228e:	6f 91       	pop	r22
    2290:	5f 91       	pop	r21
    2292:	4f 91       	pop	r20
    2294:	3f 91       	pop	r19
    2296:	2f 91       	pop	r18
    2298:	0f 90       	pop	r0
    229a:	0b be       	out	0x3b, r0	; 59
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	0f 90       	pop	r0
    22a2:	1f 90       	pop	r1
    22a4:	18 95       	reti

000022a6 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    22a6:	1f 92       	push	r1
    22a8:	0f 92       	push	r0
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	0f 92       	push	r0
    22ae:	0b b6       	in	r0, 0x3b	; 59
    22b0:	0f 92       	push	r0
    22b2:	11 24       	eor	r1, r1
    22b4:	2f 93       	push	r18
    22b6:	3f 93       	push	r19
    22b8:	4f 93       	push	r20
    22ba:	5f 93       	push	r21
    22bc:	6f 93       	push	r22
    22be:	7f 93       	push	r23
    22c0:	8f 93       	push	r24
    22c2:	9f 93       	push	r25
    22c4:	af 93       	push	r26
    22c6:	bf 93       	push	r27
    22c8:	ef 93       	push	r30
    22ca:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    22cc:	e0 91 83 20 	lds	r30, 0x2083
    22d0:	f0 91 84 20 	lds	r31, 0x2084
    22d4:	30 97       	sbiw	r30, 0x00	; 0
    22d6:	09 f0       	breq	.+2      	; 0x22da <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    22d8:	19 95       	eicall
	}
}
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	bf 91       	pop	r27
    22e0:	af 91       	pop	r26
    22e2:	9f 91       	pop	r25
    22e4:	8f 91       	pop	r24
    22e6:	7f 91       	pop	r23
    22e8:	6f 91       	pop	r22
    22ea:	5f 91       	pop	r21
    22ec:	4f 91       	pop	r20
    22ee:	3f 91       	pop	r19
    22f0:	2f 91       	pop	r18
    22f2:	0f 90       	pop	r0
    22f4:	0b be       	out	0x3b, r0	; 59
    22f6:	0f 90       	pop	r0
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	0f 90       	pop	r0
    22fc:	1f 90       	pop	r1
    22fe:	18 95       	reti

00002300 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	ec 01       	movw	r28, r24
	irqflags_t iflags = cpu_irq_save();
    2308:	0e 94 1f 0b 	call	0x163e	; 0x163e <cpu_irq_save>
    230c:	18 2f       	mov	r17, r24

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    230e:	88 e0       	ldi	r24, 0x08	; 8
    2310:	c0 30       	cpi	r28, 0x00	; 0
    2312:	d8 07       	cpc	r29, r24
    2314:	19 f4       	brne	.+6      	; 0x231c <tc_enable+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2316:	83 e0       	ldi	r24, 0x03	; 3
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	06 c0       	rjmp	.+12     	; 0x2328 <tc_enable+0x28>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    231c:	88 e0       	ldi	r24, 0x08	; 8
    231e:	c0 34       	cpi	r28, 0x40	; 64
    2320:	d8 07       	cpc	r29, r24
    2322:	31 f4       	brne	.+12     	; 0x2330 <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	62 e0       	ldi	r22, 0x02	; 2
    2328:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	2b c0       	rjmp	.+86     	; 0x2386 <tc_enable+0x86>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2330:	89 e0       	ldi	r24, 0x09	; 9
    2332:	c0 30       	cpi	r28, 0x00	; 0
    2334:	d8 07       	cpc	r29, r24
    2336:	19 f4       	brne	.+6      	; 0x233e <tc_enable+0x3e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	06 c0       	rjmp	.+12     	; 0x234a <tc_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    233e:	89 e0       	ldi	r24, 0x09	; 9
    2340:	c0 34       	cpi	r28, 0x40	; 64
    2342:	d8 07       	cpc	r29, r24
    2344:	31 f4       	brne	.+12     	; 0x2352 <tc_enable+0x52>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2346:	84 e0       	ldi	r24, 0x04	; 4
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    234e:	84 e0       	ldi	r24, 0x04	; 4
    2350:	1a c0       	rjmp	.+52     	; 0x2386 <tc_enable+0x86>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2352:	8a e0       	ldi	r24, 0x0A	; 10
    2354:	c0 30       	cpi	r28, 0x00	; 0
    2356:	d8 07       	cpc	r29, r24
    2358:	19 f4       	brne	.+6      	; 0x2360 <tc_enable+0x60>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    235a:	85 e0       	ldi	r24, 0x05	; 5
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	06 c0       	rjmp	.+12     	; 0x236c <tc_enable+0x6c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2360:	8a e0       	ldi	r24, 0x0A	; 10
    2362:	c0 34       	cpi	r28, 0x40	; 64
    2364:	d8 07       	cpc	r29, r24
    2366:	31 f4       	brne	.+12     	; 0x2374 <tc_enable+0x74>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2368:	85 e0       	ldi	r24, 0x05	; 5
    236a:	62 e0       	ldi	r22, 0x02	; 2
    236c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2370:	85 e0       	ldi	r24, 0x05	; 5
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <tc_enable+0x86>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2374:	8b e0       	ldi	r24, 0x0B	; 11
    2376:	c0 30       	cpi	r28, 0x00	; 0
    2378:	d8 07       	cpc	r29, r24
    237a:	a9 f4       	brne	.+42     	; 0x23a6 <tc_enable+0xa6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    237c:	86 e0       	ldi	r24, 0x06	; 6
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2384:	86 e0       	ldi	r24, 0x06	; 6
    2386:	64 e0       	ldi	r22, 0x04	; 4
    2388:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    238c:	80 91 90 20 	lds	r24, 0x2090
    2390:	8f 3f       	cpi	r24, 0xFF	; 255
    2392:	09 f4       	brne	.+2      	; 0x2396 <tc_enable+0x96>
    2394:	ff cf       	rjmp	.-2      	; 0x2394 <tc_enable+0x94>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    2396:	0e 94 1f 0b 	call	0x163e	; 0x163e <cpu_irq_save>

	++sleepmgr_locks[mode];
    239a:	90 91 90 20 	lds	r25, 0x2090
    239e:	9f 5f       	subi	r25, 0xFF	; 255
    23a0:	90 93 90 20 	sts	0x2090, r25

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23a4:	8f bf       	out	0x3f, r24	; 63
    23a6:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	08 95       	ret

000023b0 <tc_disable>:
 *
 * \note
 * mask TC clock (sysclk).
 */
void tc_disable(volatile void *tc)
{
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	ec 01       	movw	r28, r24
	irqflags_t iflags = cpu_irq_save();
    23b8:	0e 94 1f 0b 	call	0x163e	; 0x163e <cpu_irq_save>
    23bc:	18 2f       	mov	r17, r24
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    23be:	80 91 90 20 	lds	r24, 0x2090
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <tc_disable+0x18>
    23c6:	ff cf       	rjmp	.-2      	; 0x23c6 <tc_disable+0x16>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    23c8:	0e 94 1f 0b 	call	0x163e	; 0x163e <cpu_irq_save>

	--sleepmgr_locks[mode];
    23cc:	90 91 90 20 	lds	r25, 0x2090
    23d0:	91 50       	subi	r25, 0x01	; 1
    23d2:	90 93 90 20 	sts	0x2090, r25
    23d6:	8f bf       	out	0x3f, r24	; 63

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    23d8:	88 e0       	ldi	r24, 0x08	; 8
    23da:	c0 30       	cpi	r28, 0x00	; 0
    23dc:	d8 07       	cpc	r29, r24
    23de:	19 f4       	brne	.+6      	; 0x23e6 <tc_disable+0x36>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    23e0:	83 e0       	ldi	r24, 0x03	; 3
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <tc_disable+0x42>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	c0 34       	cpi	r28, 0x40	; 64
    23ea:	d8 07       	cpc	r29, r24
    23ec:	31 f4       	brne	.+12     	; 0x23fa <tc_disable+0x4a>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    23ee:	83 e0       	ldi	r24, 0x03	; 3
    23f0:	62 e0       	ldi	r22, 0x02	; 2
    23f2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	2b c0       	rjmp	.+86     	; 0x2450 <tc_disable+0xa0>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    23fa:	89 e0       	ldi	r24, 0x09	; 9
    23fc:	c0 30       	cpi	r28, 0x00	; 0
    23fe:	d8 07       	cpc	r29, r24
    2400:	19 f4       	brne	.+6      	; 0x2408 <tc_disable+0x58>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2402:	84 e0       	ldi	r24, 0x04	; 4
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <tc_disable+0x64>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2408:	89 e0       	ldi	r24, 0x09	; 9
    240a:	c0 34       	cpi	r28, 0x40	; 64
    240c:	d8 07       	cpc	r29, r24
    240e:	31 f4       	brne	.+12     	; 0x241c <tc_disable+0x6c>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2410:	84 e0       	ldi	r24, 0x04	; 4
    2412:	62 e0       	ldi	r22, 0x02	; 2
    2414:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2418:	84 e0       	ldi	r24, 0x04	; 4
    241a:	1a c0       	rjmp	.+52     	; 0x2450 <tc_disable+0xa0>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    241c:	8a e0       	ldi	r24, 0x0A	; 10
    241e:	c0 30       	cpi	r28, 0x00	; 0
    2420:	d8 07       	cpc	r29, r24
    2422:	19 f4       	brne	.+6      	; 0x242a <tc_disable+0x7a>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2424:	85 e0       	ldi	r24, 0x05	; 5
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	06 c0       	rjmp	.+12     	; 0x2436 <tc_disable+0x86>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    242a:	8a e0       	ldi	r24, 0x0A	; 10
    242c:	c0 34       	cpi	r28, 0x40	; 64
    242e:	d8 07       	cpc	r29, r24
    2430:	31 f4       	brne	.+12     	; 0x243e <tc_disable+0x8e>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2432:	85 e0       	ldi	r24, 0x05	; 5
    2434:	62 e0       	ldi	r22, 0x02	; 2
    2436:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    243a:	85 e0       	ldi	r24, 0x05	; 5
    243c:	09 c0       	rjmp	.+18     	; 0x2450 <tc_disable+0xa0>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    243e:	8b e0       	ldi	r24, 0x0B	; 11
    2440:	c0 30       	cpi	r28, 0x00	; 0
    2442:	d8 07       	cpc	r29, r24
    2444:	41 f4       	brne	.+16     	; 0x2456 <tc_disable+0xa6>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2446:	86 e0       	ldi	r24, 0x06	; 6
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    244e:	86 e0       	ldi	r24, 0x06	; 6
    2450:	64 e0       	ldi	r22, 0x04	; 4
    2452:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <sysclk_disable_module>
    2456:	1f bf       	out	0x3f, r17	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	08 95       	ret

00002460 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2460:	28 e0       	ldi	r18, 0x08	; 8
    2462:	80 30       	cpi	r24, 0x00	; 0
    2464:	92 07       	cpc	r25, r18
    2466:	29 f4       	brne	.+10     	; 0x2472 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    2468:	60 93 3d 20 	sts	0x203D, r22
    246c:	70 93 3e 20 	sts	0x203E, r23
    2470:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    2472:	28 e0       	ldi	r18, 0x08	; 8
    2474:	80 34       	cpi	r24, 0x40	; 64
    2476:	92 07       	cpc	r25, r18
    2478:	29 f4       	brne	.+10     	; 0x2484 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    247a:	60 93 49 20 	sts	0x2049, r22
    247e:	70 93 4a 20 	sts	0x204A, r23
    2482:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2484:	29 e0       	ldi	r18, 0x09	; 9
    2486:	80 30       	cpi	r24, 0x00	; 0
    2488:	92 07       	cpc	r25, r18
    248a:	29 f4       	brne	.+10     	; 0x2496 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    248c:	60 93 51 20 	sts	0x2051, r22
    2490:	70 93 52 20 	sts	0x2052, r23
    2494:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2496:	29 e0       	ldi	r18, 0x09	; 9
    2498:	80 34       	cpi	r24, 0x40	; 64
    249a:	92 07       	cpc	r25, r18
    249c:	29 f4       	brne	.+10     	; 0x24a8 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    249e:	60 93 5d 20 	sts	0x205D, r22
    24a2:	70 93 5e 20 	sts	0x205E, r23
    24a6:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    24a8:	2a e0       	ldi	r18, 0x0A	; 10
    24aa:	80 30       	cpi	r24, 0x00	; 0
    24ac:	92 07       	cpc	r25, r18
    24ae:	29 f4       	brne	.+10     	; 0x24ba <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    24b0:	60 93 65 20 	sts	0x2065, r22
    24b4:	70 93 66 20 	sts	0x2066, r23
    24b8:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    24ba:	2a e0       	ldi	r18, 0x0A	; 10
    24bc:	80 34       	cpi	r24, 0x40	; 64
    24be:	92 07       	cpc	r25, r18
    24c0:	29 f4       	brne	.+10     	; 0x24cc <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    24c2:	60 93 71 20 	sts	0x2071, r22
    24c6:	70 93 72 20 	sts	0x2072, r23
    24ca:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    24cc:	2b e0       	ldi	r18, 0x0B	; 11
    24ce:	80 30       	cpi	r24, 0x00	; 0
    24d0:	92 07       	cpc	r25, r18
    24d2:	21 f4       	brne	.+8      	; 0x24dc <tc_set_overflow_interrupt_callback+0x7c>
		tc_tcf0_ovf_callback = callback;
    24d4:	60 93 79 20 	sts	0x2079, r22
    24d8:	70 93 7a 20 	sts	0x207A, r23
    24dc:	08 95       	ret

000024de <tc_set_error_interrupt_callback>:
}

void tc_set_error_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    24de:	28 e0       	ldi	r18, 0x08	; 8
    24e0:	80 30       	cpi	r24, 0x00	; 0
    24e2:	92 07       	cpc	r25, r18
    24e4:	29 f4       	brne	.+10     	; 0x24f0 <tc_set_error_interrupt_callback+0x12>
		tc_tcc0_err_callback = callback;
    24e6:	60 93 3f 20 	sts	0x203F, r22
    24ea:	70 93 40 20 	sts	0x2040, r23
    24ee:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    24f0:	28 e0       	ldi	r18, 0x08	; 8
    24f2:	80 34       	cpi	r24, 0x40	; 64
    24f4:	92 07       	cpc	r25, r18
    24f6:	29 f4       	brne	.+10     	; 0x2502 <tc_set_error_interrupt_callback+0x24>
		tc_tcc1_err_callback = callback;
    24f8:	60 93 4b 20 	sts	0x204B, r22
    24fc:	70 93 4c 20 	sts	0x204C, r23
    2500:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2502:	29 e0       	ldi	r18, 0x09	; 9
    2504:	80 30       	cpi	r24, 0x00	; 0
    2506:	92 07       	cpc	r25, r18
    2508:	29 f4       	brne	.+10     	; 0x2514 <tc_set_error_interrupt_callback+0x36>
		tc_tcd0_err_callback = callback;
    250a:	60 93 53 20 	sts	0x2053, r22
    250e:	70 93 54 20 	sts	0x2054, r23
    2512:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2514:	29 e0       	ldi	r18, 0x09	; 9
    2516:	80 34       	cpi	r24, 0x40	; 64
    2518:	92 07       	cpc	r25, r18
    251a:	29 f4       	brne	.+10     	; 0x2526 <tc_set_error_interrupt_callback+0x48>
		tc_tcd1_err_callback = callback;
    251c:	60 93 5f 20 	sts	0x205F, r22
    2520:	70 93 60 20 	sts	0x2060, r23
    2524:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2526:	2a e0       	ldi	r18, 0x0A	; 10
    2528:	80 30       	cpi	r24, 0x00	; 0
    252a:	92 07       	cpc	r25, r18
    252c:	29 f4       	brne	.+10     	; 0x2538 <tc_set_error_interrupt_callback+0x5a>
		tc_tce0_err_callback = callback;
    252e:	60 93 67 20 	sts	0x2067, r22
    2532:	70 93 68 20 	sts	0x2068, r23
    2536:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2538:	2a e0       	ldi	r18, 0x0A	; 10
    253a:	80 34       	cpi	r24, 0x40	; 64
    253c:	92 07       	cpc	r25, r18
    253e:	29 f4       	brne	.+10     	; 0x254a <tc_set_error_interrupt_callback+0x6c>
		tc_tce1_err_callback = callback;
    2540:	60 93 73 20 	sts	0x2073, r22
    2544:	70 93 74 20 	sts	0x2074, r23
    2548:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    254a:	2b e0       	ldi	r18, 0x0B	; 11
    254c:	80 30       	cpi	r24, 0x00	; 0
    254e:	92 07       	cpc	r25, r18
    2550:	21 f4       	brne	.+8      	; 0x255a <tc_set_error_interrupt_callback+0x7c>
		tc_tcf0_err_callback = callback;
    2552:	60 93 7b 20 	sts	0x207B, r22
    2556:	70 93 7c 20 	sts	0x207C, r23
    255a:	08 95       	ret

0000255c <tc_set_cca_interrupt_callback>:
}

void tc_set_cca_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    255c:	28 e0       	ldi	r18, 0x08	; 8
    255e:	80 30       	cpi	r24, 0x00	; 0
    2560:	92 07       	cpc	r25, r18
    2562:	29 f4       	brne	.+10     	; 0x256e <tc_set_cca_interrupt_callback+0x12>
		tc_tcc0_cca_callback = callback;
    2564:	60 93 41 20 	sts	0x2041, r22
    2568:	70 93 42 20 	sts	0x2042, r23
    256c:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    256e:	28 e0       	ldi	r18, 0x08	; 8
    2570:	80 34       	cpi	r24, 0x40	; 64
    2572:	92 07       	cpc	r25, r18
    2574:	29 f4       	brne	.+10     	; 0x2580 <tc_set_cca_interrupt_callback+0x24>
		tc_tcc1_cca_callback = callback;
    2576:	60 93 4d 20 	sts	0x204D, r22
    257a:	70 93 4e 20 	sts	0x204E, r23
    257e:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2580:	29 e0       	ldi	r18, 0x09	; 9
    2582:	80 30       	cpi	r24, 0x00	; 0
    2584:	92 07       	cpc	r25, r18
    2586:	29 f4       	brne	.+10     	; 0x2592 <tc_set_cca_interrupt_callback+0x36>
		tc_tcd0_cca_callback = callback;
    2588:	60 93 55 20 	sts	0x2055, r22
    258c:	70 93 56 20 	sts	0x2056, r23
    2590:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2592:	29 e0       	ldi	r18, 0x09	; 9
    2594:	80 34       	cpi	r24, 0x40	; 64
    2596:	92 07       	cpc	r25, r18
    2598:	29 f4       	brne	.+10     	; 0x25a4 <tc_set_cca_interrupt_callback+0x48>
		tc_tcd1_cca_callback = callback;
    259a:	60 93 61 20 	sts	0x2061, r22
    259e:	70 93 62 20 	sts	0x2062, r23
    25a2:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	80 30       	cpi	r24, 0x00	; 0
    25a8:	92 07       	cpc	r25, r18
    25aa:	29 f4       	brne	.+10     	; 0x25b6 <tc_set_cca_interrupt_callback+0x5a>
		tc_tce0_cca_callback = callback;
    25ac:	60 93 69 20 	sts	0x2069, r22
    25b0:	70 93 6a 20 	sts	0x206A, r23
    25b4:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    25b6:	2a e0       	ldi	r18, 0x0A	; 10
    25b8:	80 34       	cpi	r24, 0x40	; 64
    25ba:	92 07       	cpc	r25, r18
    25bc:	29 f4       	brne	.+10     	; 0x25c8 <tc_set_cca_interrupt_callback+0x6c>
		tc_tce1_cca_callback = callback;
    25be:	60 93 75 20 	sts	0x2075, r22
    25c2:	70 93 76 20 	sts	0x2076, r23
    25c6:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    25c8:	2b e0       	ldi	r18, 0x0B	; 11
    25ca:	80 30       	cpi	r24, 0x00	; 0
    25cc:	92 07       	cpc	r25, r18
    25ce:	21 f4       	brne	.+8      	; 0x25d8 <tc_set_cca_interrupt_callback+0x7c>
		tc_tcf0_cca_callback = callback;
    25d0:	60 93 7d 20 	sts	0x207D, r22
    25d4:	70 93 7e 20 	sts	0x207E, r23
    25d8:	08 95       	ret

000025da <tc_set_ccb_interrupt_callback>:
}

void tc_set_ccb_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    25da:	28 e0       	ldi	r18, 0x08	; 8
    25dc:	80 30       	cpi	r24, 0x00	; 0
    25de:	92 07       	cpc	r25, r18
    25e0:	29 f4       	brne	.+10     	; 0x25ec <tc_set_ccb_interrupt_callback+0x12>
		tc_tcc0_ccb_callback = callback;
    25e2:	60 93 43 20 	sts	0x2043, r22
    25e6:	70 93 44 20 	sts	0x2044, r23
    25ea:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    25ec:	28 e0       	ldi	r18, 0x08	; 8
    25ee:	80 34       	cpi	r24, 0x40	; 64
    25f0:	92 07       	cpc	r25, r18
    25f2:	29 f4       	brne	.+10     	; 0x25fe <tc_set_ccb_interrupt_callback+0x24>
		tc_tcc1_ccb_callback = callback;
    25f4:	60 93 4f 20 	sts	0x204F, r22
    25f8:	70 93 50 20 	sts	0x2050, r23
    25fc:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    25fe:	29 e0       	ldi	r18, 0x09	; 9
    2600:	80 30       	cpi	r24, 0x00	; 0
    2602:	92 07       	cpc	r25, r18
    2604:	29 f4       	brne	.+10     	; 0x2610 <tc_set_ccb_interrupt_callback+0x36>
		tc_tcd0_ccb_callback = callback;
    2606:	60 93 57 20 	sts	0x2057, r22
    260a:	70 93 58 20 	sts	0x2058, r23
    260e:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2610:	29 e0       	ldi	r18, 0x09	; 9
    2612:	80 34       	cpi	r24, 0x40	; 64
    2614:	92 07       	cpc	r25, r18
    2616:	29 f4       	brne	.+10     	; 0x2622 <tc_set_ccb_interrupt_callback+0x48>
		tc_tcd1_ccb_callback = callback;
    2618:	60 93 63 20 	sts	0x2063, r22
    261c:	70 93 64 20 	sts	0x2064, r23
    2620:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2622:	2a e0       	ldi	r18, 0x0A	; 10
    2624:	80 30       	cpi	r24, 0x00	; 0
    2626:	92 07       	cpc	r25, r18
    2628:	29 f4       	brne	.+10     	; 0x2634 <tc_set_ccb_interrupt_callback+0x5a>
		tc_tce0_ccb_callback = callback;
    262a:	60 93 6b 20 	sts	0x206B, r22
    262e:	70 93 6c 20 	sts	0x206C, r23
    2632:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2634:	2a e0       	ldi	r18, 0x0A	; 10
    2636:	80 34       	cpi	r24, 0x40	; 64
    2638:	92 07       	cpc	r25, r18
    263a:	29 f4       	brne	.+10     	; 0x2646 <tc_set_ccb_interrupt_callback+0x6c>
		tc_tce1_ccb_callback = callback;
    263c:	60 93 77 20 	sts	0x2077, r22
    2640:	70 93 78 20 	sts	0x2078, r23
    2644:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2646:	2b e0       	ldi	r18, 0x0B	; 11
    2648:	80 30       	cpi	r24, 0x00	; 0
    264a:	92 07       	cpc	r25, r18
    264c:	21 f4       	brne	.+8      	; 0x2656 <tc_set_ccb_interrupt_callback+0x7c>
		tc_tcf0_ccb_callback = callback;
    264e:	60 93 7f 20 	sts	0x207F, r22
    2652:	70 93 80 20 	sts	0x2080, r23
    2656:	08 95       	ret

00002658 <tc_set_ccc_interrupt_callback>:
}

void tc_set_ccc_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2658:	28 e0       	ldi	r18, 0x08	; 8
    265a:	80 30       	cpi	r24, 0x00	; 0
    265c:	92 07       	cpc	r25, r18
    265e:	29 f4       	brne	.+10     	; 0x266a <tc_set_ccc_interrupt_callback+0x12>
		tc_tcc0_ccc_callback = callback;
    2660:	60 93 45 20 	sts	0x2045, r22
    2664:	70 93 46 20 	sts	0x2046, r23
    2668:	08 95       	ret
	} else
#endif

#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    266a:	29 e0       	ldi	r18, 0x09	; 9
    266c:	80 30       	cpi	r24, 0x00	; 0
    266e:	92 07       	cpc	r25, r18
    2670:	29 f4       	brne	.+10     	; 0x267c <tc_set_ccc_interrupt_callback+0x24>
		tc_tcd0_ccc_callback = callback;
    2672:	60 93 59 20 	sts	0x2059, r22
    2676:	70 93 5a 20 	sts	0x205A, r23
    267a:	08 95       	ret
	} else
#endif

#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    267c:	2a e0       	ldi	r18, 0x0A	; 10
    267e:	80 30       	cpi	r24, 0x00	; 0
    2680:	92 07       	cpc	r25, r18
    2682:	29 f4       	brne	.+10     	; 0x268e <tc_set_ccc_interrupt_callback+0x36>
		tc_tce0_ccc_callback = callback;
    2684:	60 93 6d 20 	sts	0x206D, r22
    2688:	70 93 6e 20 	sts	0x206E, r23
    268c:	08 95       	ret
	} else
#endif

#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    268e:	2b e0       	ldi	r18, 0x0B	; 11
    2690:	80 30       	cpi	r24, 0x00	; 0
    2692:	92 07       	cpc	r25, r18
    2694:	21 f4       	brne	.+8      	; 0x269e <tc_set_ccc_interrupt_callback+0x46>
		tc_tcf0_ccc_callback = callback;
    2696:	60 93 81 20 	sts	0x2081, r22
    269a:	70 93 82 20 	sts	0x2082, r23
    269e:	08 95       	ret

000026a0 <tc_set_ccd_interrupt_callback>:


void tc_set_ccd_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    26a0:	28 e0       	ldi	r18, 0x08	; 8
    26a2:	80 30       	cpi	r24, 0x00	; 0
    26a4:	92 07       	cpc	r25, r18
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <tc_set_ccd_interrupt_callback+0x12>
		tc_tcc0_ccd_callback = callback;
    26a8:	60 93 47 20 	sts	0x2047, r22
    26ac:	70 93 48 20 	sts	0x2048, r23
    26b0:	08 95       	ret
	} else
#endif

#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    26b2:	29 e0       	ldi	r18, 0x09	; 9
    26b4:	80 30       	cpi	r24, 0x00	; 0
    26b6:	92 07       	cpc	r25, r18
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <tc_set_ccd_interrupt_callback+0x24>
		tc_tcd0_ccd_callback = callback;
    26ba:	60 93 5b 20 	sts	0x205B, r22
    26be:	70 93 5c 20 	sts	0x205C, r23
    26c2:	08 95       	ret
	} else
#endif

#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    26c4:	2a e0       	ldi	r18, 0x0A	; 10
    26c6:	80 30       	cpi	r24, 0x00	; 0
    26c8:	92 07       	cpc	r25, r18
    26ca:	29 f4       	brne	.+10     	; 0x26d6 <tc_set_ccd_interrupt_callback+0x36>
		tc_tce0_ccd_callback = callback;
    26cc:	60 93 6f 20 	sts	0x206F, r22
    26d0:	70 93 70 20 	sts	0x2070, r23
    26d4:	08 95       	ret
	} else
#endif

#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    26d6:	2b e0       	ldi	r18, 0x0B	; 11
    26d8:	80 30       	cpi	r24, 0x00	; 0
    26da:	92 07       	cpc	r25, r18
    26dc:	21 f4       	brne	.+8      	; 0x26e6 <tc_set_ccd_interrupt_callback+0x46>
		tc_tcf0_ccd_callback = callback;
    26de:	60 93 83 20 	sts	0x2083, r22
    26e2:	70 93 84 20 	sts	0x2084, r23
    26e6:	08 95       	ret

000026e8 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    26e8:	cf 92       	push	r12
    26ea:	df 92       	push	r13
    26ec:	ef 92       	push	r14
    26ee:	ff 92       	push	r15
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	ec 01       	movw	r28, r24
    26fa:	6a 01       	movw	r12, r20
    26fc:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    26fe:	db 01       	movw	r26, r22
    2700:	ca 01       	movw	r24, r20
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	a1 09       	sbc	r26, r1
    2706:	b1 09       	sbc	r27, r1
    2708:	80 0f       	add	r24, r16
    270a:	91 1f       	adc	r25, r17
    270c:	a2 1f       	adc	r26, r18
    270e:	b3 1f       	adc	r27, r19
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	a7 01       	movw	r20, r14
    2716:	96 01       	movw	r18, r12
    2718:	0e 94 9d 18 	call	0x313a	; 0x313a <__udivmodsi4>
    271c:	89 01       	movw	r16, r18
    271e:	9a 01       	movw	r18, r20

	if (divisor > 128) {
    2720:	01 38       	cpi	r16, 0x81	; 129
    2722:	11 05       	cpc	r17, r1
    2724:	21 05       	cpc	r18, r1
    2726:	31 05       	cpc	r19, r1
    2728:	f8 f4       	brcc	.+62     	; 0x2768 <spi_xmega_set_baud_div+0x80>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    272a:	01 34       	cpi	r16, 0x41	; 65
    272c:	60 f4       	brcc	.+24     	; 0x2746 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    272e:	01 32       	cpi	r16, 0x21	; 33
    2730:	60 f4       	brcc	.+24     	; 0x274a <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    2732:	01 31       	cpi	r16, 0x11	; 17
    2734:	60 f4       	brcc	.+24     	; 0x274e <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    2736:	09 30       	cpi	r16, 0x09	; 9
    2738:	60 f4       	brcc	.+24     	; 0x2752 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    273a:	05 30       	cpi	r16, 0x05	; 5
    273c:	60 f4       	brcc	.+24     	; 0x2756 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    273e:	03 30       	cpi	r16, 0x03	; 3
    2740:	60 f0       	brcs	.+24     	; 0x275a <spi_xmega_set_baud_div+0x72>
		ctrl = SPI_PRESCALER_DIV4_gc;
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	0b c0       	rjmp	.+22     	; 0x275c <spi_xmega_set_baud_div+0x74>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	09 c0       	rjmp	.+18     	; 0x275c <spi_xmega_set_baud_div+0x74>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	07 c0       	rjmp	.+14     	; 0x275c <spi_xmega_set_baud_div+0x74>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    274e:	82 e8       	ldi	r24, 0x82	; 130
    2750:	05 c0       	rjmp	.+10     	; 0x275c <spi_xmega_set_baud_div+0x74>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	03 c0       	rjmp	.+6      	; 0x275c <spi_xmega_set_baud_div+0x74>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    2756:	81 e8       	ldi	r24, 0x81	; 129
    2758:	01 c0       	rjmp	.+2      	; 0x275c <spi_xmega_set_baud_div+0x74>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    275a:	80 e8       	ldi	r24, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    275c:	98 81       	ld	r25, Y
    275e:	9c 77       	andi	r25, 0x7C	; 124
    2760:	98 2b       	or	r25, r24
    2762:	98 83       	st	Y, r25

	return 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	01 c0       	rjmp	.+2      	; 0x276a <spi_xmega_set_baud_div+0x82>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    2768:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	ff 90       	pop	r15
    2774:	ef 90       	pop	r14
    2776:	df 90       	pop	r13
    2778:	cf 90       	pop	r12
    277a:	08 95       	ret

0000277c <nvm_wait_until_ready>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    277c:	80 91 cf 01 	lds	r24, 0x01CF
    2780:	87 fd       	sbrc	r24, 7
    2782:	fc cf       	rjmp	.-8      	; 0x277c <nvm_wait_until_ready>
}
    2784:	08 95       	ret

00002786 <nvm_issue_command>:
 *       before this function is called.
 *
 * \param nvm_command NVM Command to execute.
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    278c:	c0 ec       	ldi	r28, 0xC0	; 192
    278e:	d1 e0       	ldi	r29, 0x01	; 1
    2790:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    2792:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2794:	8b ec       	ldi	r24, 0xCB	; 203
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	61 e0       	ldi	r22, 0x01	; 1
    279a:	0e 94 97 18 	call	0x312e	; 0x312e <ccp_write_io>
	NVM.CMD = old_cmd;
    279e:	1a 87       	std	Y+10, r17	; 0x0a
}
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	08 95       	ret

000027a8 <nvm_read_production_signature_row>:
 *       the program space reads will be corrupted.
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
    27a8:	68 2f       	mov	r22, r24
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
}
    27b2:	08 95       	ret

000027b4 <nvm_read_device_serial>:
 *       the program space reads will be corrupted.
 *
 * \retval storage Pointer to the structure where to store the device serial
 */
void nvm_read_device_serial(struct nvm_device_serial *storage)
{
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	ec 01       	movw	r28, r24
	storage->lotnum0 = nvm_read_production_signature_row(
    27ba:	88 e0       	ldi	r24, 0x08	; 8
    27bc:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27c0:	88 83       	st	Y, r24
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    27c2:	89 e0       	ldi	r24, 0x09	; 9
    27c4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27c8:	89 83       	std	Y+1, r24	; 0x01
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    27ca:	8a e0       	ldi	r24, 0x0A	; 10
    27cc:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27d0:	8a 83       	std	Y+2, r24	; 0x02
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    27d2:	8b e0       	ldi	r24, 0x0B	; 11
    27d4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27d8:	8b 83       	std	Y+3, r24	; 0x03
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    27da:	8c e0       	ldi	r24, 0x0C	; 12
    27dc:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27e0:	8c 83       	std	Y+4, r24	; 0x04
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    27e2:	8d e0       	ldi	r24, 0x0D	; 13
    27e4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27e8:	8d 83       	std	Y+5, r24	; 0x05
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    27ea:	80 e1       	ldi	r24, 0x10	; 16
    27ec:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27f0:	8e 83       	std	Y+6, r24	; 0x06
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    27f2:	82 e1       	ldi	r24, 0x12	; 18
    27f4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    27f8:	8f 83       	std	Y+7, r24	; 0x07
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    27fa:	83 e1       	ldi	r24, 0x13	; 19
    27fc:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    2800:	88 87       	std	Y+8, r24	; 0x08
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    2802:	84 e1       	ldi	r24, 0x14	; 20
    2804:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    2808:	89 87       	std	Y+9, r24	; 0x09
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    280a:	85 e1       	ldi	r24, 0x15	; 21
    280c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <nvm_read_production_signature_row>
    2810:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	ec 01       	movw	r28, r24
	uint8_t data;
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
    281e:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2822:	ec ec       	ldi	r30, 0xCC	; 204
    2824:	f1 e0       	ldi	r31, 0x01	; 1
    2826:	80 81       	ld	r24, Z
    2828:	88 60       	ori	r24, 0x08	; 8
    282a:	80 83       	st	Z, r24
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
    282c:	c0 50       	subi	r28, 0x00	; 0
    282e:	d0 4f       	sbci	r29, 0xF0	; 240
    2830:	88 81       	ld	r24, Y
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2832:	90 81       	ld	r25, Z
    2834:	97 7f       	andi	r25, 0xF7	; 247
    2836:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret

0000283e <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	00 d0       	rcall	.+0      	; 0x284c <nvm_eeprom_read_buffer+0xe>
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	7c 01       	movw	r14, r24
    2854:	cb 01       	movw	r24, r22
	nvm_wait_until_ready();
    2856:	4b 83       	std	Y+3, r20	; 0x03
    2858:	5c 83       	std	Y+4, r21	; 0x04
    285a:	69 83       	std	Y+1, r22	; 0x01
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2862:	0c ec       	ldi	r16, 0xCC	; 204
    2864:	11 e0       	ldi	r17, 0x01	; 1
    2866:	f8 01       	movw	r30, r16
    2868:	20 81       	ld	r18, Z
    286a:	28 60       	ori	r18, 0x08	; 8
    286c:	20 83       	st	Z, r18
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    286e:	b7 01       	movw	r22, r14
    2870:	60 50       	subi	r22, 0x00	; 0
    2872:	70 4f       	sbci	r23, 0xF0	; 240
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	4b 81       	ldd	r20, Y+3	; 0x03
    287a:	5c 81       	ldd	r21, Y+4	; 0x04
    287c:	0e 94 bf 18 	call	0x317e	; 0x317e <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2880:	f8 01       	movw	r30, r16
    2882:	80 81       	ld	r24, Z
    2884:	87 7f       	andi	r24, 0xF7	; 247
    2886:	80 83       	st	Z, r24
	eeprom_disable_mapping();
}
    2888:	24 96       	adiw	r28, 0x04	; 4
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	ff 90       	pop	r15
    2898:	ef 90       	pop	r14
    289a:	08 95       	ret

0000289c <nvm_eeprom_flush_buffer>:
 * \note The function does not preserve the value of the NVM.CMD register
 */
void nvm_eeprom_flush_buffer(void)
{
	// Wait until NVM is ready
	nvm_wait_until_ready();
    289c:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    28a0:	80 91 cf 01 	lds	r24, 0x01CF
    28a4:	81 ff       	sbrs	r24, 1
    28a6:	09 c0       	rjmp	.+18     	; 0x28ba <nvm_eeprom_flush_buffer+0x1e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    28a8:	86 e3       	ldi	r24, 0x36	; 54
    28aa:	e0 ec       	ldi	r30, 0xC0	; 192
    28ac:	f1 e0       	ldi	r31, 0x01	; 1
    28ae:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    28b0:	8b ec       	ldi	r24, 0xCB	; 203
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	61 e0       	ldi	r22, 0x01	; 1
    28b6:	0e 94 97 18 	call	0x312e	; 0x312e <ccp_write_io>
    28ba:	08 95       	ret

000028bc <nvm_eeprom_load_byte_to_buffer>:
 *
 * \param  byte_addr EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 * \param  value     Byte value to write to buffer.
 */
void nvm_eeprom_load_byte_to_buffer(uint8_t byte_addr, uint8_t value)
{
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	0f 92       	push	r0
    28c2:	0f 92       	push	r0
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    28c8:	6a 83       	std	Y+2, r22	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    28d0:	2c ec       	ldi	r18, 0xCC	; 204
    28d2:	31 e0       	ldi	r19, 0x01	; 1
    28d4:	d9 01       	movw	r26, r18
    28d6:	9c 91       	ld	r25, X
    28d8:	98 60       	ori	r25, 0x08	; 8
    28da:	9c 93       	st	X, r25

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	a8 2f       	mov	r26, r24
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	a0 50       	subi	r26, 0x00	; 0
    28e4:	b0 4f       	sbci	r27, 0xF0	; 240
    28e6:	6a 81       	ldd	r22, Y+2	; 0x02
    28e8:	6c 93       	st	X, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    28ea:	f9 01       	movw	r30, r18
    28ec:	80 81       	ld	r24, Z
    28ee:	87 7f       	andi	r24, 0xF7	; 247
    28f0:	80 83       	st	Z, r24
	eeprom_disable_mapping();
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	08 95       	ret

000028fc <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    28fc:	ef 92       	push	r14
    28fe:	ff 92       	push	r15
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	0f 92       	push	r0
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	18 2f       	mov	r17, r24

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    2912:	80 ec       	ldi	r24, 0xC0	; 192
    2914:	e8 2e       	mov	r14, r24
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	f8 2e       	mov	r15, r24
    291a:	f7 01       	movw	r30, r14
    291c:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    291e:	69 83       	std	Y+1, r22	; 0x01
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	0e 94 4e 14 	call	0x289c	; 0x289c <nvm_eeprom_flush_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2926:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
	nvm_eeprom_load_byte_to_buffer(address, value);
    292a:	81 2f       	mov	r24, r17
    292c:	69 81       	ldd	r22, Y+1	; 0x01
    292e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2932:	f7 01       	movw	r30, r14
    2934:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2936:	9a 81       	ldd	r25, Y+2	; 0x02
    2938:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    293a:	10 83       	st	Z, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    293c:	85 e3       	ldi	r24, 0x35	; 53
    293e:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2940:	8b ec       	ldi	r24, 0xCB	; 203
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	0e 94 97 18 	call	0x312e	; 0x312e <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    294a:	f7 01       	movw	r30, r14
    294c:	02 87       	std	Z+10, r16	; 0x0a
}
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	08 95       	ret

00002960 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2968:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    296c:	10 e0       	ldi	r17, 0x00	; 0
		nvm_eeprom_load_byte_to_buffer(i, *values);
    296e:	81 2f       	mov	r24, r17
    2970:	69 91       	ld	r22, Y+
    2972:	0e 94 5e 14 	call	0x28bc	; 0x28bc <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2976:	1f 5f       	subi	r17, 0xFF	; 255
    2978:	10 32       	cpi	r17, 0x20	; 32
    297a:	c9 f7       	brne	.-14     	; 0x296e <nvm_eeprom_load_page_to_buffer+0xe>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	08 95       	ret

00002984 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	25 e0       	ldi	r18, 0x05	; 5
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	2a 95       	dec	r18
    29a0:	e1 f7       	brne	.-8      	; 0x299a <nvm_eeprom_atomic_write_page+0x16>

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    29a2:	e0 ec       	ldi	r30, 0xC0	; 192
    29a4:	f1 e0       	ldi	r31, 0x01	; 1
    29a6:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    29a8:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    29aa:	80 83       	st	Z, r24

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
    29ac:	85 e3       	ldi	r24, 0x35	; 53
    29ae:	0e 94 c3 13 	call	0x2786	; 0x2786 <nvm_issue_command>
}
    29b2:	0f 90       	pop	r0
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    29ba:	cf 92       	push	r12
    29bc:	df 92       	push	r13
    29be:	ef 92       	push	r14
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	8c 01       	movw	r16, r24
    29cc:	6b 01       	movw	r12, r22
    29ce:	7a 01       	movw	r14, r20
	while (len) {
    29d0:	2b c0       	rjmp	.+86     	; 0x2a28 <nvm_eeprom_erase_and_write_buffer+0x6e>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    29d2:	c8 01       	movw	r24, r16
    29d4:	8f 71       	andi	r24, 0x1F	; 31
    29d6:	90 70       	andi	r25, 0x00	; 0
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	d1 f4       	brne	.+52     	; 0x2a10 <nvm_eeprom_erase_and_write_buffer+0x56>
    29dc:	80 e2       	ldi	r24, 0x20	; 32
    29de:	e8 16       	cp	r14, r24
    29e0:	f1 04       	cpc	r15, r1
    29e2:	b0 f0       	brcs	.+44     	; 0x2a10 <nvm_eeprom_erase_and_write_buffer+0x56>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    29e4:	c6 01       	movw	r24, r12
    29e6:	0e 94 b0 14 	call	0x2960	; 0x2960 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    29ea:	c8 01       	movw	r24, r16
    29ec:	35 e0       	ldi	r19, 0x05	; 5
    29ee:	96 95       	lsr	r25
    29f0:	87 95       	ror	r24
    29f2:	3a 95       	dec	r19
    29f4:	e1 f7       	brne	.-8      	; 0x29ee <nvm_eeprom_erase_and_write_buffer+0x34>
    29f6:	0e 94 c2 14 	call	0x2984	; 0x2984 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    29fa:	00 5e       	subi	r16, 0xE0	; 224
    29fc:	1f 4f       	sbci	r17, 0xFF	; 255
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    29fe:	e0 e2       	ldi	r30, 0x20	; 32
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	ce 0e       	add	r12, r30
    2a04:	df 1e       	adc	r13, r31
			len -= EEPROM_PAGE_SIZE;
    2a06:	80 ee       	ldi	r24, 0xE0	; 224
    2a08:	9f ef       	ldi	r25, 0xFF	; 255
    2a0a:	e8 0e       	add	r14, r24
    2a0c:	f9 1e       	adc	r15, r25
    2a0e:	0c c0       	rjmp	.+24     	; 0x2a28 <nvm_eeprom_erase_and_write_buffer+0x6e>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2a10:	e8 01       	movw	r28, r16
    2a12:	21 96       	adiw	r28, 0x01	; 1
    2a14:	c8 01       	movw	r24, r16
    2a16:	f6 01       	movw	r30, r12
    2a18:	61 91       	ld	r22, Z+
    2a1a:	6f 01       	movw	r12, r30
    2a1c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2a20:	08 94       	sec
    2a22:	e1 08       	sbc	r14, r1
    2a24:	f1 08       	sbc	r15, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2a26:	8e 01       	movw	r16, r28
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    2a28:	e1 14       	cp	r14, r1
    2a2a:	f1 04       	cpc	r15, r1
    2a2c:	91 f6       	brne	.-92     	; 0x29d2 <nvm_eeprom_erase_and_write_buffer+0x18>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	ff 90       	pop	r15
    2a38:	ef 90       	pop	r14
    2a3a:	df 90       	pop	r13
    2a3c:	cf 90       	pop	r12
    2a3e:	08 95       	ret

00002a40 <nvm_eeprom_split_write_page>:
 * before writing.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_split_write_page(uint8_t page_addr)
{
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	0f 92       	push	r0
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	45 e0       	ldi	r20, 0x05	; 5
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	4a 95       	dec	r20
    2a5c:	e1 f7       	brne	.-8      	; 0x2a56 <nvm_eeprom_split_write_page+0x16>

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    2a5e:	e0 ec       	ldi	r30, 0xC0	; 192
    2a60:	f1 e0       	ldi	r31, 0x01	; 1
    2a62:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2a64:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2a66:	80 83       	st	Z, r24

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
    2a68:	84 e3       	ldi	r24, 0x34	; 52
    2a6a:	0e 94 c3 13 	call	0x2786	; 0x2786 <nvm_issue_command>
}
    2a6e:	0f 90       	pop	r0
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <nvm_eeprom_fill_buffer_with_value>:
 *       EEPROM write page operation.
 *
 * \param  value Value to copy to the page buffer.
 */
void nvm_eeprom_fill_buffer_with_value(uint8_t value)
{
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    2a7c:	0e 94 4e 14 	call	0x289c	; 0x289c <nvm_eeprom_flush_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2a80:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2a84:	c0 e0       	ldi	r28, 0x00	; 0
		nvm_eeprom_load_byte_to_buffer(i, value);
    2a86:	8c 2f       	mov	r24, r28
    2a88:	6d 2f       	mov	r22, r29
    2a8a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <nvm_eeprom_load_byte_to_buffer>
	nvm_eeprom_flush_buffer();
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2a8e:	cf 5f       	subi	r28, 0xFF	; 255
    2a90:	c0 32       	cpi	r28, 0x20	; 32
    2a92:	c9 f7       	brne	.-14     	; 0x2a86 <nvm_eeprom_fill_buffer_with_value+0x10>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	08 95       	ret

00002a9a <nvm_eeprom_erase_bytes_in_page>:
 * written to in the page buffer reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_bytes_in_page(uint8_t page_addr)
{
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	0f 92       	push	r0
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2aa4:	89 83       	std	Y+1, r24	; 0x01
    2aa6:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	55 e0       	ldi	r21, 0x05	; 5
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	5a 95       	dec	r21
    2ab6:	e1 f7       	brne	.-8      	; 0x2ab0 <nvm_eeprom_erase_bytes_in_page+0x16>

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    2ab8:	e0 ec       	ldi	r30, 0xC0	; 192
    2aba:	f1 e0       	ldi	r31, 0x01	; 1
    2abc:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2abe:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2ac0:	80 83       	st	Z, r24

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
    2ac2:	82 e3       	ldi	r24, 0x32	; 50
    2ac4:	0e 94 c3 13 	call	0x2786	; 0x2786 <nvm_issue_command>
}
    2ac8:	0f 90       	pop	r0
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <nvm_eeprom_erase_page>:
 * This function erases one EEPROM page, so that every location reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_page(uint8_t page_addr)
{
    2ad0:	cf 93       	push	r28
    2ad2:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    2ad4:	8f ef       	ldi	r24, 0xFF	; 255
    2ad6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    2ada:	8c 2f       	mov	r24, r28
    2adc:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <nvm_eeprom_erase_bytes_in_page>
}
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <nvm_eeprom_erase_bytes_in_all_pages>:
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2ae4:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
    2ae8:	80 e3       	ldi	r24, 0x30	; 48
    2aea:	0e 94 c3 13 	call	0x2786	; 0x2786 <nvm_issue_command>
}
    2aee:	08 95       	ret

00002af0 <nvm_eeprom_erase_all>:
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    2af0:	8f ef       	ldi	r24, 0xFF	; 255
    2af2:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    2af6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <nvm_eeprom_erase_bytes_in_all_pages>
}
    2afa:	08 95       	ret

00002afc <nvm_issue_flash_range_crc>:
 *
 * \param start_addr  end byte address
 * \param end_addr    start byte address
 */
void nvm_issue_flash_range_crc(flash_addr_t start_addr, flash_addr_t end_addr)
{
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	6b 01       	movw	r12, r22
    2b0c:	7c 01       	movw	r14, r24
    2b0e:	da 01       	movw	r26, r20
    2b10:	c9 01       	movw	r24, r18
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    2b12:	c0 ec       	ldi	r28, 0xC0	; 192
    2b14:	d1 e0       	ldi	r29, 0x01	; 1
    2b16:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    2b18:	2a e3       	ldi	r18, 0x3A	; 58
    2b1a:	2a 87       	std	Y+10, r18	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    2b1c:	c8 82       	st	Y, r12
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    2b1e:	77 27       	eor	r23, r23
    2b20:	6f 2d       	mov	r22, r15
    2b22:	5e 2d       	mov	r21, r14
    2b24:	4d 2d       	mov	r20, r13
    2b26:	49 83       	std	Y+1, r20	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    2b28:	67 01       	movw	r12, r14
    2b2a:	ee 24       	eor	r14, r14
    2b2c:	ff 24       	eor	r15, r15
    2b2e:	ca 82       	std	Y+2, r12	; 0x02
#endif

	// Load the end byte address in NVM Data Register
	NVM.DATA0 = end_addr & 0xFF;
    2b30:	8c 83       	std	Y+4, r24	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    2b32:	49 2f       	mov	r20, r25
    2b34:	5a 2f       	mov	r21, r26
    2b36:	6b 2f       	mov	r22, r27
    2b38:	77 27       	eor	r23, r23
    2b3a:	4d 83       	std	Y+5, r20	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	aa 27       	eor	r26, r26
    2b40:	bb 27       	eor	r27, r27
    2b42:	8e 83       	std	Y+6, r24	; 0x06
#endif

	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2b44:	8b ec       	ldi	r24, 0xCB	; 203
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	0e 94 97 18 	call	0x312e	; 0x312e <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    2b4e:	1a 87       	std	Y+10, r17	; 0x0a
}
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
    2b5e:	08 95       	ret

00002b60 <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    2b60:	cf 92       	push	r12
    2b62:	df 92       	push	r13
    2b64:	ef 92       	push	r14
    2b66:	ff 92       	push	r15
    2b68:	0f 93       	push	r16
    2b6a:	1f 93       	push	r17
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	0f 92       	push	r0
    2b72:	0f 92       	push	r0
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	f8 2e       	mov	r15, r24
    2b7a:	e9 2e       	mov	r14, r25
    2b7c:	8a 01       	movw	r16, r20
    2b7e:	69 01       	movw	r12, r18
#if (FLASH_SIZE>0x10000)
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
    2b80:	69 83       	std	Y+1, r22	; 0x01
    2b82:	7a 83       	std	Y+2, r23	; 0x02
    2b84:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
#if (FLASH_SIZE>0x10000)
	uint32_t opt_address = address;
    2b88:	69 81       	ldd	r22, Y+1	; 0x01
    2b8a:	86 2f       	mov	r24, r22
    2b8c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b8e:	97 2f       	mov	r25, r23
    2b90:	af 2d       	mov	r26, r15
    2b92:	be 2d       	mov	r27, r14
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    2b94:	0c c0       	rjmp	.+24     	; 0x2bae <nvm_flash_read_buffer+0x4e>
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    2b96:	ab bf       	out	0x3b, r26	; 59
    2b98:	fc 01       	movw	r30, r24
    2b9a:	27 91       	elpm	r18, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	21 93       	st	Z+, r18
    2ba0:	8f 01       	movw	r16, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	b1 1d       	adc	r27, r1
		len--;
    2ba8:	08 94       	sec
    2baa:	c1 08       	sbc	r12, r1
    2bac:	d1 08       	sbc	r13, r1
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    2bae:	c1 14       	cp	r12, r1
    2bb0:	d1 04       	cpc	r13, r1
    2bb2:	89 f7       	brne	.-30     	; 0x2b96 <nvm_flash_read_buffer+0x36>
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
    2bc8:	08 95       	ret

00002bca <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	7a 01       	movw	r14, r20
    2bdc:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    2bde:	ec 01       	movw	r28, r24
    2be0:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    2be2:	0a c0       	rjmp	.+20     	; 0x2bf8 <nvm_user_sig_read_buffer+0x2e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	be 01       	movw	r22, r28
    2be8:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    2bec:	f7 01       	movw	r30, r14
    2bee:	81 93       	st	Z+, r24
    2bf0:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    2bf2:	21 96       	adiw	r28, 0x01	; 1
		len--;
    2bf4:	01 50       	subi	r16, 0x01	; 1
    2bf6:	10 40       	sbci	r17, 0x00	; 0
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    2bf8:	01 15       	cp	r16, r1
    2bfa:	11 05       	cpc	r17, r1
    2bfc:	99 f7       	brne	.-26     	; 0x2be4 <nvm_user_sig_read_buffer+0x1a>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	ff 90       	pop	r15
    2c08:	ef 90       	pop	r14
    2c0a:	08 95       	ret

00002c0c <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    2c0c:	2f 92       	push	r2
    2c0e:	3f 92       	push	r3
    2c10:	4f 92       	push	r4
    2c12:	5f 92       	push	r5
    2c14:	6f 92       	push	r6
    2c16:	7f 92       	push	r7
    2c18:	8f 92       	push	r8
    2c1a:	9f 92       	push	r9
    2c1c:	af 92       	push	r10
    2c1e:	bf 92       	push	r11
    2c20:	cf 92       	push	r12
    2c22:	df 92       	push	r13
    2c24:	ef 92       	push	r14
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	0f 92       	push	r0
    2c32:	0f 92       	push	r0
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	2a 01       	movw	r4, r20
    2c3e:	79 01       	movw	r14, r18
    2c40:	70 2e       	mov	r7, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    2c42:	8c 01       	movw	r16, r24
	bool b_flag_erase = false;
    2c44:	66 24       	eor	r6, r6

	while ( len ) {
    2c46:	57 c0       	rjmp	.+174    	; 0x2cf6 <nvm_user_sig_write_buffer+0xea>
    2c48:	51 e0       	ldi	r21, 0x01	; 1
    2c4a:	c5 2e       	mov	r12, r21
    2c4c:	d1 2c       	mov	r13, r1
    2c4e:	88 24       	eor	r8, r8
    2c50:	99 24       	eor	r9, r9
    2c52:	54 01       	movw	r10, r8
    2c54:	14 01       	movw	r2, r8
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    2c56:	77 20       	and	r7, r7
    2c58:	89 f0       	breq	.+34     	; 0x2c7c <nvm_user_sig_write_buffer+0x70>
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	b4 01       	movw	r22, r8
    2c5e:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	b6 01       	movw	r22, r12
    2c68:	0e 94 8d 18 	call	0x311a	; 0x311a <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	9a 81       	ldd	r25, Y+2	; 0x02
    2c72:	2f ef       	ldi	r18, 0xFF	; 255
    2c74:	8f 3f       	cpi	r24, 0xFF	; 255
    2c76:	92 07       	cpc	r25, r18
    2c78:	31 f4       	brne	.+12     	; 0x2c86 <nvm_user_sig_write_buffer+0x7a>
    2c7a:	07 c0       	rjmp	.+14     	; 0x2c8a <nvm_user_sig_write_buffer+0x7e>
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    2c7c:	8f ef       	ldi	r24, 0xFF	; 255
    2c7e:	9f ef       	ldi	r25, 0xFF	; 255
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <nvm_user_sig_write_buffer+0x7e>
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
    2c86:	66 24       	eor	r6, r6
    2c88:	63 94       	inc	r6
				}
			}else{
				w_value = 0xFFFF;
			}
			// Update flash buffer
			if (len) {
    2c8a:	e1 14       	cp	r14, r1
    2c8c:	f1 04       	cpc	r15, r1
    2c8e:	d9 f0       	breq	.+54     	; 0x2cc6 <nvm_user_sig_write_buffer+0xba>
				if (opt_address == page_pos) {
    2c90:	02 15       	cp	r16, r2
    2c92:	13 05       	cpc	r17, r3
    2c94:	61 f4       	brne	.+24     	; 0x2cae <nvm_user_sig_write_buffer+0xa2>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    2c96:	08 94       	sec
    2c98:	e1 08       	sbc	r14, r1
    2c9a:	f1 08       	sbc	r15, r1
					opt_address++;
    2c9c:	0f 5f       	subi	r16, 0xFF	; 255
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
					LSB(w_value)=*(uint8_t*)buf;
    2ca0:	d2 01       	movw	r26, r4
    2ca2:	8d 91       	ld	r24, X+
    2ca4:	2d 01       	movw	r4, r26
    2ca6:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    2ca8:	e1 14       	cp	r14, r1
    2caa:	f1 04       	cpc	r15, r1
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <nvm_user_sig_write_buffer+0xba>
				if (opt_address == (page_pos+1)) {
    2cae:	0c 15       	cp	r16, r12
    2cb0:	1d 05       	cpc	r17, r13
    2cb2:	49 f4       	brne	.+18     	; 0x2cc6 <nvm_user_sig_write_buffer+0xba>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    2cb4:	08 94       	sec
    2cb6:	e1 08       	sbc	r14, r1
    2cb8:	f1 08       	sbc	r15, r1
					opt_address++;
    2cba:	0f 5f       	subi	r16, 0xFF	; 255
    2cbc:	1f 4f       	sbci	r17, 0xFF	; 255
					MSB(w_value)=*(uint8_t*)buf;
    2cbe:	f2 01       	movw	r30, r4
    2cc0:	81 91       	ld	r24, Z+
    2cc2:	2f 01       	movw	r4, r30
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    2cc6:	49 81       	ldd	r20, Y+1	; 0x01
    2cc8:	5a 81       	ldd	r21, Y+2	; 0x02
    2cca:	c5 01       	movw	r24, r10
    2ccc:	b4 01       	movw	r22, r8
    2cce:	1e 94 0f 00 	call	0x4001e	; 0x4001e <nvm_flash_load_word_to_buffer>
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 e0       	ldi	r26, 0x00	; 0
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	88 0e       	add	r8, r24
    2cdc:	99 1e       	adc	r9, r25
    2cde:	aa 1e       	adc	r10, r26
    2ce0:	bb 1e       	adc	r11, r27
    2ce2:	a2 e0       	ldi	r26, 0x02	; 2
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ca 0e       	add	r12, r26
    2ce8:	db 1e       	adc	r13, r27
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    2cea:	b1 e0       	ldi	r27, 0x01	; 1
    2cec:	cb 16       	cp	r12, r27
    2cee:	b2 e0       	ldi	r27, 0x02	; 2
    2cf0:	db 06       	cpc	r13, r27
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <nvm_user_sig_write_buffer+0xea>
    2cf4:	af cf       	rjmp	.-162    	; 0x2c54 <nvm_user_sig_write_buffer+0x48>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    2cf6:	e1 14       	cp	r14, r1
    2cf8:	f1 04       	cpc	r15, r1
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <nvm_user_sig_write_buffer+0xf2>
    2cfc:	a5 cf       	rjmp	.-182    	; 0x2c48 <nvm_user_sig_write_buffer+0x3c>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    2cfe:	66 20       	and	r6, r6
    2d00:	41 f0       	breq	.+16     	; 0x2d12 <nvm_user_sig_write_buffer+0x106>
 * Erase the user calibration section page. There is only one page, so no
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
    2d02:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	48 e1       	ldi	r20, 0x18	; 24
    2d0e:	1e 94 00 00 	call	0x40000	; 0x40000 <nvm_common_spm>
 * corruption of the data written. There is only one page, so no
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
    2d12:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	4a e1       	ldi	r20, 0x1A	; 26
    2d1e:	1e 94 00 00 	call	0x40000	; 0x40000 <nvm_common_spm>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	bf 90       	pop	r11
    2d38:	af 90       	pop	r10
    2d3a:	9f 90       	pop	r9
    2d3c:	8f 90       	pop	r8
    2d3e:	7f 90       	pop	r7
    2d40:	6f 90       	pop	r6
    2d42:	5f 90       	pop	r5
    2d44:	4f 90       	pop	r4
    2d46:	3f 90       	pop	r3
    2d48:	2f 90       	pop	r2
    2d4a:	08 95       	ret

00002d4c <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <nvm_flash_erase_and_write_buffer+0x26>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <nvm_flash_erase_and_write_buffer+0x28>
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	4b 83       	std	Y+3, r20	; 0x03
    2d7e:	5c 83       	std	Y+4, r21	; 0x04
    2d80:	19 01       	movw	r2, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    2d82:	41 2c       	mov	r4, r1
    2d84:	ee ef       	ldi	r30, 0xFE	; 254
    2d86:	5e 2e       	mov	r5, r30
    2d88:	ef ef       	ldi	r30, 0xFF	; 255
    2d8a:	6e 2e       	mov	r6, r30
    2d8c:	ef ef       	ldi	r30, 0xFF	; 255
    2d8e:	7e 2e       	mov	r7, r30
    2d90:	48 22       	and	r4, r24
    2d92:	59 22       	and	r5, r25
    2d94:	6a 22       	and	r6, r26
    2d96:	7b 22       	and	r7, r27
	uint16_t w_value;
	uint16_t page_pos;
	bool b_flag_erase;
#if (FLASH_SIZE>0x10000)
	uint32_t page_address;
	uint32_t opt_address = address;
    2d98:	6c 01       	movw	r12, r24
    2d9a:	7d 01       	movw	r14, r26

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    2d9c:	78 c0       	rjmp	.+240    	; 0x2e8e <nvm_flash_erase_and_write_buffer+0x142>
		b_flag_erase = false;

		nvm_wait_until_ready();
    2d9e:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
    2da2:	53 01       	movw	r10, r6
    2da4:	42 01       	movw	r8, r4
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	31 e0       	ldi	r19, 0x01	; 1
	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
		b_flag_erase = false;
    2daa:	10 e0       	ldi	r17, 0x00	; 0

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    2dac:	00 23       	and	r16, r16
    2dae:	59 f0       	breq	.+22     	; 0x2dc6 <nvm_flash_erase_and_write_buffer+0x7a>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    2db0:	ab be       	out	0x3b, r10	; 59
    2db2:	f4 01       	movw	r30, r8
    2db4:	87 91       	elpm	r24, Z+
    2db6:	96 91       	elpm	r25, Z
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    2dbc:	4f ef       	ldi	r20, 0xFF	; 255
    2dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc0:	94 07       	cpc	r25, r20
    2dc2:	31 f4       	brne	.+12     	; 0x2dd0 <nvm_flash_erase_and_write_buffer+0x84>
    2dc4:	06 c0       	rjmp	.+12     	; 0x2dd2 <nvm_flash_erase_and_write_buffer+0x86>
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    2dc6:	8f ef       	ldi	r24, 0xFF	; 255
    2dc8:	9f ef       	ldi	r25, 0xFF	; 255
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <nvm_flash_erase_and_write_buffer+0x86>
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
    2dd0:	11 e0       	ldi	r17, 0x01	; 1
			}else{
				w_value = 0xFFFF;
			}

			// Update flash buffer
			if (len) {
    2dd2:	21 14       	cp	r2, r1
    2dd4:	31 04       	cpc	r3, r1
    2dd6:	71 f1       	breq	.+92     	; 0x2e34 <nvm_flash_erase_and_write_buffer+0xe8>
				if (opt_address == page_address) {
    2dd8:	c8 14       	cp	r12, r8
    2dda:	d9 04       	cpc	r13, r9
    2ddc:	ea 04       	cpc	r14, r10
    2dde:	fb 04       	cpc	r15, r11
    2de0:	89 f4       	brne	.+34     	; 0x2e04 <nvm_flash_erase_and_write_buffer+0xb8>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    2de2:	08 94       	sec
    2de4:	21 08       	sbc	r2, r1
    2de6:	31 08       	sbc	r3, r1
					opt_address++;
    2de8:	08 94       	sec
    2dea:	c1 1c       	adc	r12, r1
    2dec:	d1 1c       	adc	r13, r1
    2dee:	e1 1c       	adc	r14, r1
    2df0:	f1 1c       	adc	r15, r1
					LSB(w_value)=*(uint8_t*)buf;
    2df2:	ab 81       	ldd	r26, Y+3	; 0x03
    2df4:	bc 81       	ldd	r27, Y+4	; 0x04
    2df6:	8d 91       	ld	r24, X+
    2df8:	ab 83       	std	Y+3, r26	; 0x03
    2dfa:	bc 83       	std	Y+4, r27	; 0x04
    2dfc:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    2dfe:	21 14       	cp	r2, r1
    2e00:	31 04       	cpc	r3, r1
    2e02:	c1 f0       	breq	.+48     	; 0x2e34 <nvm_flash_erase_and_write_buffer+0xe8>
				if (opt_address == (page_address+1)) {
    2e04:	d5 01       	movw	r26, r10
    2e06:	c4 01       	movw	r24, r8
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	a1 1d       	adc	r26, r1
    2e0c:	b1 1d       	adc	r27, r1
    2e0e:	c8 16       	cp	r12, r24
    2e10:	d9 06       	cpc	r13, r25
    2e12:	ea 06       	cpc	r14, r26
    2e14:	fb 06       	cpc	r15, r27
    2e16:	71 f4       	brne	.+28     	; 0x2e34 <nvm_flash_erase_and_write_buffer+0xe8>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    2e18:	08 94       	sec
    2e1a:	21 08       	sbc	r2, r1
    2e1c:	31 08       	sbc	r3, r1
					opt_address++;
    2e1e:	08 94       	sec
    2e20:	c1 1c       	adc	r12, r1
    2e22:	d1 1c       	adc	r13, r1
    2e24:	e1 1c       	adc	r14, r1
    2e26:	f1 1c       	adc	r15, r1
					MSB(w_value)=*(uint8_t*)buf;
    2e28:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2c:	81 91       	ld	r24, Z+
    2e2e:	eb 83       	std	Y+3, r30	; 0x03
    2e30:	fc 83       	std	Y+4, r31	; 0x04
    2e32:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    2e34:	49 81       	ldd	r20, Y+1	; 0x01
    2e36:	5a 81       	ldd	r21, Y+2	; 0x02
    2e38:	c5 01       	movw	r24, r10
    2e3a:	b4 01       	movw	r22, r8
    2e3c:	2d 83       	std	Y+5, r18	; 0x05
    2e3e:	3e 83       	std	Y+6, r19	; 0x06
    2e40:	1e 94 0f 00 	call	0x4001e	; 0x4001e <nvm_flash_load_word_to_buffer>
			page_address+=2;
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	88 0e       	add	r8, r24
    2e4e:	99 1e       	adc	r9, r25
    2e50:	aa 1e       	adc	r10, r26
    2e52:	bb 1e       	adc	r11, r27
    2e54:	2d 81       	ldd	r18, Y+5	; 0x05
    2e56:	3e 81       	ldd	r19, Y+6	; 0x06
    2e58:	21 50       	subi	r18, 0x01	; 1
    2e5a:	30 40       	sbci	r19, 0x00	; 0
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <nvm_flash_erase_and_write_buffer+0x114>
    2e5e:	a6 cf       	rjmp	.-180    	; 0x2dac <nvm_flash_erase_and_write_buffer+0x60>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    2e60:	11 23       	and	r17, r17
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <nvm_flash_erase_and_write_buffer+0x124>
 *
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
    2e64:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    2e68:	c3 01       	movw	r24, r6
    2e6a:	b2 01       	movw	r22, r4
    2e6c:	45 e2       	ldi	r20, 0x25	; 37
    2e6e:	05 c0       	rjmp	.+10     	; 0x2e7a <nvm_flash_erase_and_write_buffer+0x12e>
 *
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
    2e70:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    2e74:	c3 01       	movw	r24, r6
    2e76:	b2 01       	movw	r22, r4
    2e78:	44 e2       	ldi	r20, 0x24	; 36
    2e7a:	1e 94 00 00 	call	0x40000	; 0x40000 <nvm_common_spm>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	92 e0       	ldi	r25, 0x02	; 2
    2e82:	a0 e0       	ldi	r26, 0x00	; 0
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	48 0e       	add	r4, r24
    2e88:	59 1e       	adc	r5, r25
    2e8a:	6a 1e       	adc	r6, r26
    2e8c:	7b 1e       	adc	r7, r27

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    2e8e:	21 14       	cp	r2, r1
    2e90:	31 04       	cpc	r3, r1
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <nvm_flash_erase_and_write_buffer+0x14a>
    2e94:	84 cf       	rjmp	.-248    	; 0x2d9e <nvm_flash_erase_and_write_buffer+0x52>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    2e96:	26 96       	adiw	r28, 0x06	; 6
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	ff 90       	pop	r15
    2ea6:	ef 90       	pop	r14
    2ea8:	df 90       	pop	r13
    2eaa:	cf 90       	pop	r12
    2eac:	bf 90       	pop	r11
    2eae:	af 90       	pop	r10
    2eb0:	9f 90       	pop	r9
    2eb2:	8f 90       	pop	r8
    2eb4:	7f 90       	pop	r7
    2eb6:	6f 90       	pop	r6
    2eb8:	5f 90       	pop	r5
    2eba:	4f 90       	pop	r4
    2ebc:	3f 90       	pop	r3
    2ebe:	2f 90       	pop	r2
    2ec0:	08 95       	ret

00002ec2 <nvm_fuses_read>:
 * \param fuse Fuse byte to read.
 *
 * \return  Byte value of fuse.
 */
uint8_t nvm_fuses_read(enum fuse_byte_t fuse)
{
    2ec2:	0f 93       	push	r16
    2ec4:	1f 93       	push	r17
    2ec6:	cf 93       	push	r28
    2ec8:	df 93       	push	r29
    2eca:	0f 92       	push	r0
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	0e 94 be 13 	call	0x277c	; 0x277c <nvm_wait_until_ready>

	// Set address
	NVM.ADDR0 = fuse;
    2ed6:	00 ec       	ldi	r16, 0xC0	; 192
    2ed8:	11 e0       	ldi	r17, 0x01	; 1
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	f8 01       	movw	r30, r16
    2ede:	80 83       	st	Z, r24

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);
    2ee0:	87 e0       	ldi	r24, 0x07	; 7
    2ee2:	0e 94 c3 13 	call	0x2786	; 0x2786 <nvm_issue_command>

	return NVM.DATA0;
    2ee6:	f8 01       	movw	r30, r16
    2ee8:	84 81       	ldd	r24, Z+4	; 0x04
}
    2eea:	0f 90       	pop	r0
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	08 95       	ret

00002ef6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	dc 01       	movw	r26, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2f00:	c6 2f       	mov	r28, r22
    2f02:	d0 e0       	ldi	r29, 0x00	; 0
    2f04:	9e 01       	movw	r18, r28
    2f06:	08 2e       	mov	r0, r24
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <ioport_configure_port_pin+0x18>
    2f0a:	35 95       	asr	r19
    2f0c:	27 95       	ror	r18
    2f0e:	0a 94       	dec	r0
    2f10:	e2 f7       	brpl	.-8      	; 0x2f0a <ioport_configure_port_pin+0x14>
    2f12:	20 ff       	sbrs	r18, 0
    2f14:	04 c0       	rjmp	.+8      	; 0x2f1e <ioport_configure_port_pin+0x28>
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    2f16:	fd 01       	movw	r30, r26
    2f18:	e8 0f       	add	r30, r24
    2f1a:	f9 1f       	adc	r31, r25
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2f1c:	50 8b       	std	Z+16, r21	; 0x10
    2f1e:	01 96       	adiw	r24, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2f20:	88 30       	cpi	r24, 0x08	; 8
    2f22:	91 05       	cpc	r25, r1
    2f24:	79 f7       	brne	.-34     	; 0x2f04 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2f26:	40 ff       	sbrs	r20, 0
    2f28:	0d c0       	rjmp	.+26     	; 0x2f44 <ioport_configure_port_pin+0x4e>
		if (flags & IOPORT_INIT_HIGH) {
    2f2a:	41 ff       	sbrs	r20, 1
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <ioport_configure_port_pin+0x40>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2f2e:	15 96       	adiw	r26, 0x05	; 5
    2f30:	6c 93       	st	X, r22
    2f32:	15 97       	sbiw	r26, 0x05	; 5
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <ioport_configure_port_pin+0x46>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2f36:	16 96       	adiw	r26, 0x06	; 6
    2f38:	6c 93       	st	X, r22
    2f3a:	16 97       	sbiw	r26, 0x06	; 6
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2f3c:	11 96       	adiw	r26, 0x01	; 1
    2f3e:	6c 93       	st	X, r22
    2f40:	11 97       	sbiw	r26, 0x01	; 1
    2f42:	03 c0       	rjmp	.+6      	; 0x2f4a <ioport_configure_port_pin+0x54>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2f44:	12 96       	adiw	r26, 0x02	; 2
    2f46:	6c 93       	st	X, r22
    2f48:	12 97       	sbiw	r26, 0x02	; 2
	}
}
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    2f50:	ab 01       	movw	r20, r22
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2f52:	28 2f       	mov	r18, r24
    2f54:	26 95       	lsr	r18
    2f56:	26 95       	lsr	r18
    2f58:	26 95       	lsr	r18
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	20 5d       	subi	r18, 0xD0	; 208
    2f5e:	3f 4f       	sbci	r19, 0xFF	; 255
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2f60:	87 70       	andi	r24, 0x07	; 7
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <ioport_configure_pin+0x1c>
    2f68:	66 0f       	add	r22, r22
    2f6a:	77 1f       	adc	r23, r23
    2f6c:	8a 95       	dec	r24
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <ioport_configure_pin+0x18>
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2f70:	c9 01       	movw	r24, r18
    2f72:	75 e0       	ldi	r23, 0x05	; 5
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	7a 95       	dec	r23
    2f7a:	e1 f7       	brne	.-8      	; 0x2f74 <ioport_configure_pin+0x24>
    2f7c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <ioport_configure_port_pin>
			arch_ioport_pin_to_mask(pin), flags);
}
    2f80:	08 95       	ret

00002f82 <board_init>:
 * @{
 */

void board_init(void)
{
	ioport_configure_pin(LED0_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2f82:	88 e7       	ldi	r24, 0x78	; 120
    2f84:	63 e0       	ldi	r22, 0x03	; 3
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(LED1_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2f8c:	89 e7       	ldi	r24, 0x79	; 121
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(LED2_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2f96:	8c e1       	ldi	r24, 0x1C	; 28
    2f98:	63 e0       	ldi	r22, 0x03	; 3
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(LED3_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW
    2fa0:	8d e1       	ldi	r24, 0x1D	; 29
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	70 e4       	ldi	r23, 0x40	; 64
    2fa6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INV_ENABLED);

	ioport_configure_pin(GPIO_PUSH_BUTTON_0, IOPORT_DIR_INPUT
    2faa:	85 e2       	ldi	r24, 0x25	; 37
    2fac:	60 e0       	ldi	r22, 0x00	; 0
    2fae:	7b e1       	ldi	r23, 0x1B	; 27
    2fb0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);
	ioport_configure_pin(GPIO_PUSH_BUTTON_1, IOPORT_DIR_INPUT
    2fb4:	89 e2       	ldi	r24, 0x29	; 41
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	7b e1       	ldi	r23, 0x1B	; 27
    2fba:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);
	ioport_configure_pin(GPIO_PUSH_BUTTON_2, IOPORT_DIR_INPUT
    2fbe:	8a e2       	ldi	r24, 0x2A	; 42
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	7b e1       	ldi	r23, 0x1B	; 27
    2fc4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);

#ifdef CONF_BOARD_C12832A1Z
	ioport_configure_pin(NHD_C12832A1Z_SPI_SCK, IOPORT_DIR_OUTPUT
    2fc8:	89 e1       	ldi	r24, 0x19	; 25
    2fca:	63 e0       	ldi	r22, 0x03	; 3
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_SPI_MOSI, IOPORT_DIR_OUTPUT
    2fd2:	8b e1       	ldi	r24, 0x1B	; 27
    2fd4:	63 e0       	ldi	r22, 0x03	; 3
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_CSN, IOPORT_DIR_OUTPUT
    2fdc:	8b e2       	ldi	r24, 0x2B	; 43
    2fde:	63 e0       	ldi	r22, 0x03	; 3
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_REGISTER_SELECT, IOPORT_DIR_OUTPUT
    2fe6:	88 e1       	ldi	r24, 0x18	; 24
    2fe8:	63 e0       	ldi	r22, 0x03	; 3
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_RESETN, IOPORT_DIR_OUTPUT
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	63 e0       	ldi	r22, 0x03	; 3
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_BACKLIGHT, IOPORT_DIR_OUTPUT
    2ffa:	84 e2       	ldi	r24, 0x24	; 36
    2ffc:	61 e0       	ldi	r22, 0x01	; 1
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_LOW);
#endif

#ifdef CONF_BOARD_AT45DBX
	ioport_configure_pin(AT45DBX_MASTER_SCK, IOPORT_DIR_OUTPUT
    3004:	89 e1       	ldi	r24, 0x19	; 25
    3006:	63 e0       	ldi	r22, 0x03	; 3
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(AT45DBX_MASTER_MOSI, IOPORT_DIR_OUTPUT
    300e:	8b e1       	ldi	r24, 0x1B	; 27
    3010:	63 e0       	ldi	r22, 0x03	; 3
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(AT45DBX_MASTER_MISO, IOPORT_DIR_INPUT);
    3018:	8a e1       	ldi	r24, 0x1A	; 26
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(AT45DBX_CS, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    3022:	8c e2       	ldi	r24, 0x2C	; 44
    3024:	63 e0       	ldi	r22, 0x03	; 3
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(MXT143E_XPLAINED_LCD_RESET, IOPORT_DIR_OUTPUT
			| IOPORT_INIT_LOW);
#endif

#ifdef CONF_BOARD_ENABLE_AC_PINS
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 0), IOPORT_DIR_INPUT);
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 2), IOPORT_DIR_INPUT);
    3036:	82 e0       	ldi	r24, 0x02	; 2
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTB, 1), IOPORT_DIR_INPUT);
    3040:	89 e0       	ldi	r24, 0x09	; 9
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
#endif

#ifdef CONF_BOARD_ENABLE_USARTC0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT
    304a:	83 e1       	ldi	r24, 0x13	; 19
    304c:	63 e0       	ldi	r22, 0x03	; 3
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 2), IOPORT_DIR_INPUT);
    3054:	82 e1       	ldi	r24, 0x12	; 18
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
#endif

#ifdef CONF_BOARD_ENABLE_USARTD0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 3), IOPORT_DIR_OUTPUT
    305e:	8b e1       	ldi	r24, 0x1B	; 27
    3060:	63 e0       	ldi	r22, 0x03	; 3
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 2), IOPORT_DIR_INPUT);
    3068:	8a e1       	ldi	r24, 0x1A	; 26
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
#endif

#ifdef CONF_BOARD_ENABLE_USARTE0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
    3072:	83 e2       	ldi	r24, 0x23	; 35
    3074:	63 e0       	ldi	r22, 0x03	; 3
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
    307c:	82 e2       	ldi	r24, 0x22	; 34
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	70 e0       	ldi	r23, 0x00	; 0
    3082:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ioport_configure_pin>

	/* Initialize TRX_RST and SLP_TR as GPIO. */
	ioport_configure_pin(AT86RFX_RST_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	ioport_configure_pin(AT86RFX_SLP_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
#endif
}
    3086:	08 95       	ret

00003088 <main>:

int main (void)
{
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	27 97       	sbiw	r28, 0x07	; 7
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	de bf       	out	0x3e, r29	; 62
	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
    3096:	0e 94 b1 0a 	call	0x1562	; 0x1562 <sysclk_init>
	board_init();
    309a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <board_init>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    309e:	80 ea       	ldi	r24, 0xA0	; 160
    30a0:	98 e0       	ldi	r25, 0x08	; 8
    30a2:	80 93 8b 20 	sts	0x208B, r24
    30a6:	90 93 8c 20 	sts	0x208C, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    30aa:	89 e3       	ldi	r24, 0x39	; 57
    30ac:	91 e0       	ldi	r25, 0x01	; 1
    30ae:	80 93 89 20 	sts	0x2089, r24
    30b2:	90 93 8a 20 	sts	0x208A, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    30b6:	80 e3       	ldi	r24, 0x30	; 48
    30b8:	91 e0       	ldi	r25, 0x01	; 1
    30ba:	80 93 8d 20 	sts	0x208D, r24
    30be:	90 93 8e 20 	sts	0x208E, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    30c2:	83 e0       	ldi	r24, 0x03	; 3
    30c4:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    30c6:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    30c8:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    30ca:	80 e8       	ldi	r24, 0x80	; 128
    30cc:	95 e2       	ldi	r25, 0x25	; 37
    30ce:	a0 e0       	ldi	r26, 0x00	; 0
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	ab 83       	std	Y+3, r26	; 0x03
    30d8:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    30da:	83 e0       	ldi	r24, 0x03	; 3
    30dc:	60 e1       	ldi	r22, 0x10	; 16
    30de:	0e 94 c1 0a 	call	0x1582	; 0x1582 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    30e2:	80 ea       	ldi	r24, 0xA0	; 160
    30e4:	98 e0       	ldi	r25, 0x08	; 8
    30e6:	be 01       	movw	r22, r28
    30e8:	6f 5f       	subi	r22, 0xFF	; 255
    30ea:	7f 4f       	sbci	r23, 0xFF	; 255
    30ec:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    30f0:	8b ec       	ldi	r24, 0xCB	; 203
    30f2:	99 e0       	ldi	r25, 0x09	; 9
    30f4:	6e ed       	ldi	r22, 0xDE	; 222
    30f6:	79 e0       	ldi	r23, 0x09	; 9
    30f8:	0e 94 c8 18 	call	0x3190	; 0x3190 <fdevopen>
	stdio_serial_init(&USARTC0, &usart_serial_options);
	AD7705_Init();
    30fc:	0e 94 3c 01 	call	0x278	; 0x278 <AD7705_Init>
	printf("START\n\r");
    3100:	0f 92       	push	r0
    3102:	0f 92       	push	r0
    3104:	85 e1       	ldi	r24, 0x15	; 21
    3106:	90 e2       	ldi	r25, 0x20	; 32
    3108:	ed b7       	in	r30, 0x3d	; 61
    310a:	fe b7       	in	r31, 0x3e	; 62
    310c:	81 83       	std	Z+1, r24	; 0x01
    310e:	92 83       	std	Z+2, r25	; 0x02
    3110:	0e 94 12 19 	call	0x3224	; 0x3224 <printf>
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	ff cf       	rjmp	.-2      	; 0x3118 <main+0x90>

0000311a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    311a:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    311e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3120:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3122:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    3126:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3128:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    312c:	08 95       	ret

0000312e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    312e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3130:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3132:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3134:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3136:	60 83       	st	Z, r22
	ret                             // Return to caller
    3138:	08 95       	ret

0000313a <__udivmodsi4>:
    313a:	a1 e2       	ldi	r26, 0x21	; 33
    313c:	1a 2e       	mov	r1, r26
    313e:	aa 1b       	sub	r26, r26
    3140:	bb 1b       	sub	r27, r27
    3142:	fd 01       	movw	r30, r26
    3144:	0d c0       	rjmp	.+26     	; 0x3160 <__udivmodsi4_ep>

00003146 <__udivmodsi4_loop>:
    3146:	aa 1f       	adc	r26, r26
    3148:	bb 1f       	adc	r27, r27
    314a:	ee 1f       	adc	r30, r30
    314c:	ff 1f       	adc	r31, r31
    314e:	a2 17       	cp	r26, r18
    3150:	b3 07       	cpc	r27, r19
    3152:	e4 07       	cpc	r30, r20
    3154:	f5 07       	cpc	r31, r21
    3156:	20 f0       	brcs	.+8      	; 0x3160 <__udivmodsi4_ep>
    3158:	a2 1b       	sub	r26, r18
    315a:	b3 0b       	sbc	r27, r19
    315c:	e4 0b       	sbc	r30, r20
    315e:	f5 0b       	sbc	r31, r21

00003160 <__udivmodsi4_ep>:
    3160:	66 1f       	adc	r22, r22
    3162:	77 1f       	adc	r23, r23
    3164:	88 1f       	adc	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	1a 94       	dec	r1
    316a:	69 f7       	brne	.-38     	; 0x3146 <__udivmodsi4_loop>
    316c:	60 95       	com	r22
    316e:	70 95       	com	r23
    3170:	80 95       	com	r24
    3172:	90 95       	com	r25
    3174:	9b 01       	movw	r18, r22
    3176:	ac 01       	movw	r20, r24
    3178:	bd 01       	movw	r22, r26
    317a:	cf 01       	movw	r24, r30
    317c:	08 95       	ret

0000317e <memcpy>:
    317e:	fb 01       	movw	r30, r22
    3180:	dc 01       	movw	r26, r24
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <memcpy+0xa>
    3184:	01 90       	ld	r0, Z+
    3186:	0d 92       	st	X+, r0
    3188:	41 50       	subi	r20, 0x01	; 1
    318a:	50 40       	sbci	r21, 0x00	; 0
    318c:	d8 f7       	brcc	.-10     	; 0x3184 <memcpy+0x6>
    318e:	08 95       	ret

00003190 <fdevopen>:
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	8c 01       	movw	r16, r24
    319a:	eb 01       	movw	r28, r22
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	11 f4       	brne	.+4      	; 0x31a4 <fdevopen+0x14>
    31a0:	20 97       	sbiw	r28, 0x00	; 0
    31a2:	c1 f1       	breq	.+112    	; 0x3214 <fdevopen+0x84>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	6e e0       	ldi	r22, 0x0E	; 14
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	0e 94 25 1b 	call	0x364a	; 0x364a <calloc>
    31b0:	fc 01       	movw	r30, r24
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	89 f1       	breq	.+98     	; 0x3218 <fdevopen+0x88>
    31b6:	80 e8       	ldi	r24, 0x80	; 128
    31b8:	83 83       	std	Z+3, r24	; 0x03
    31ba:	20 97       	sbiw	r28, 0x00	; 0
    31bc:	71 f0       	breq	.+28     	; 0x31da <fdevopen+0x4a>
    31be:	c2 87       	std	Z+10, r28	; 0x0a
    31c0:	d3 87       	std	Z+11, r29	; 0x0b
    31c2:	81 e8       	ldi	r24, 0x81	; 129
    31c4:	83 83       	std	Z+3, r24	; 0x03
    31c6:	80 91 95 20 	lds	r24, 0x2095
    31ca:	90 91 96 20 	lds	r25, 0x2096
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	21 f4       	brne	.+8      	; 0x31da <fdevopen+0x4a>
    31d2:	e0 93 95 20 	sts	0x2095, r30
    31d6:	f0 93 96 20 	sts	0x2096, r31
    31da:	01 15       	cp	r16, r1
    31dc:	11 05       	cpc	r17, r1
    31de:	e1 f0       	breq	.+56     	; 0x3218 <fdevopen+0x88>
    31e0:	00 87       	std	Z+8, r16	; 0x08
    31e2:	11 87       	std	Z+9, r17	; 0x09
    31e4:	83 81       	ldd	r24, Z+3	; 0x03
    31e6:	82 60       	ori	r24, 0x02	; 2
    31e8:	83 83       	std	Z+3, r24	; 0x03
    31ea:	80 91 97 20 	lds	r24, 0x2097
    31ee:	90 91 98 20 	lds	r25, 0x2098
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	89 f4       	brne	.+34     	; 0x3218 <fdevopen+0x88>
    31f6:	e0 93 97 20 	sts	0x2097, r30
    31fa:	f0 93 98 20 	sts	0x2098, r31
    31fe:	80 91 99 20 	lds	r24, 0x2099
    3202:	90 91 9a 20 	lds	r25, 0x209A
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	39 f4       	brne	.+14     	; 0x3218 <fdevopen+0x88>
    320a:	e0 93 99 20 	sts	0x2099, r30
    320e:	f0 93 9a 20 	sts	0x209A, r31
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <fdevopen+0x88>
    3214:	e0 e0       	ldi	r30, 0x00	; 0
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	cf 01       	movw	r24, r30
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	08 95       	ret

00003224 <printf>:
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	fe 01       	movw	r30, r28
    322e:	36 96       	adiw	r30, 0x06	; 6
    3230:	61 91       	ld	r22, Z+
    3232:	71 91       	ld	r23, Z+
    3234:	80 91 97 20 	lds	r24, 0x2097
    3238:	90 91 98 20 	lds	r25, 0x2098
    323c:	af 01       	movw	r20, r30
    323e:	0e 94 24 19 	call	0x3248	; 0x3248 <vfprintf>
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	08 95       	ret

00003248 <vfprintf>:
    3248:	2f 92       	push	r2
    324a:	3f 92       	push	r3
    324c:	4f 92       	push	r4
    324e:	5f 92       	push	r5
    3250:	6f 92       	push	r6
    3252:	7f 92       	push	r7
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	2d 97       	sbiw	r28, 0x0d	; 13
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	3c 01       	movw	r6, r24
    3278:	6c 87       	std	Y+12, r22	; 0x0c
    327a:	7d 87       	std	Y+13, r23	; 0x0d
    327c:	5a 01       	movw	r10, r20
    327e:	fc 01       	movw	r30, r24
    3280:	16 82       	std	Z+6, r1	; 0x06
    3282:	17 82       	std	Z+7, r1	; 0x07
    3284:	83 81       	ldd	r24, Z+3	; 0x03
    3286:	81 ff       	sbrs	r24, 1
    3288:	c8 c1       	rjmp	.+912    	; 0x361a <vfprintf+0x3d2>
    328a:	2e 01       	movw	r4, r28
    328c:	08 94       	sec
    328e:	41 1c       	adc	r4, r1
    3290:	51 1c       	adc	r5, r1
    3292:	f3 01       	movw	r30, r6
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	ec 85       	ldd	r30, Y+12	; 0x0c
    3298:	fd 85       	ldd	r31, Y+13	; 0x0d
    329a:	93 fd       	sbrc	r25, 3
    329c:	85 91       	lpm	r24, Z+
    329e:	93 ff       	sbrs	r25, 3
    32a0:	81 91       	ld	r24, Z+
    32a2:	ec 87       	std	Y+12, r30	; 0x0c
    32a4:	fd 87       	std	Y+13, r31	; 0x0d
    32a6:	88 23       	and	r24, r24
    32a8:	09 f4       	brne	.+2      	; 0x32ac <vfprintf+0x64>
    32aa:	b3 c1       	rjmp	.+870    	; 0x3612 <vfprintf+0x3ca>
    32ac:	85 32       	cpi	r24, 0x25	; 37
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <vfprintf+0x78>
    32b0:	93 fd       	sbrc	r25, 3
    32b2:	85 91       	lpm	r24, Z+
    32b4:	93 ff       	sbrs	r25, 3
    32b6:	81 91       	ld	r24, Z+
    32b8:	ec 87       	std	Y+12, r30	; 0x0c
    32ba:	fd 87       	std	Y+13, r31	; 0x0d
    32bc:	85 32       	cpi	r24, 0x25	; 37
    32be:	29 f4       	brne	.+10     	; 0x32ca <vfprintf+0x82>
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	b3 01       	movw	r22, r6
    32c4:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    32c8:	e4 cf       	rjmp	.-56     	; 0x3292 <vfprintf+0x4a>
    32ca:	ff 24       	eor	r15, r15
    32cc:	ee 24       	eor	r14, r14
    32ce:	10 e0       	ldi	r17, 0x00	; 0
    32d0:	10 32       	cpi	r17, 0x20	; 32
    32d2:	b0 f4       	brcc	.+44     	; 0x3300 <vfprintf+0xb8>
    32d4:	8b 32       	cpi	r24, 0x2B	; 43
    32d6:	69 f0       	breq	.+26     	; 0x32f2 <vfprintf+0xaa>
    32d8:	8c 32       	cpi	r24, 0x2C	; 44
    32da:	28 f4       	brcc	.+10     	; 0x32e6 <vfprintf+0x9e>
    32dc:	80 32       	cpi	r24, 0x20	; 32
    32de:	51 f0       	breq	.+20     	; 0x32f4 <vfprintf+0xac>
    32e0:	83 32       	cpi	r24, 0x23	; 35
    32e2:	71 f4       	brne	.+28     	; 0x3300 <vfprintf+0xb8>
    32e4:	0b c0       	rjmp	.+22     	; 0x32fc <vfprintf+0xb4>
    32e6:	8d 32       	cpi	r24, 0x2D	; 45
    32e8:	39 f0       	breq	.+14     	; 0x32f8 <vfprintf+0xb0>
    32ea:	80 33       	cpi	r24, 0x30	; 48
    32ec:	49 f4       	brne	.+18     	; 0x3300 <vfprintf+0xb8>
    32ee:	11 60       	ori	r17, 0x01	; 1
    32f0:	2c c0       	rjmp	.+88     	; 0x334a <vfprintf+0x102>
    32f2:	12 60       	ori	r17, 0x02	; 2
    32f4:	14 60       	ori	r17, 0x04	; 4
    32f6:	29 c0       	rjmp	.+82     	; 0x334a <vfprintf+0x102>
    32f8:	18 60       	ori	r17, 0x08	; 8
    32fa:	27 c0       	rjmp	.+78     	; 0x334a <vfprintf+0x102>
    32fc:	10 61       	ori	r17, 0x10	; 16
    32fe:	25 c0       	rjmp	.+74     	; 0x334a <vfprintf+0x102>
    3300:	17 fd       	sbrc	r17, 7
    3302:	2e c0       	rjmp	.+92     	; 0x3360 <vfprintf+0x118>
    3304:	28 2f       	mov	r18, r24
    3306:	20 53       	subi	r18, 0x30	; 48
    3308:	2a 30       	cpi	r18, 0x0A	; 10
    330a:	98 f4       	brcc	.+38     	; 0x3332 <vfprintf+0xea>
    330c:	16 ff       	sbrs	r17, 6
    330e:	08 c0       	rjmp	.+16     	; 0x3320 <vfprintf+0xd8>
    3310:	8f 2d       	mov	r24, r15
    3312:	88 0f       	add	r24, r24
    3314:	f8 2e       	mov	r15, r24
    3316:	ff 0c       	add	r15, r15
    3318:	ff 0c       	add	r15, r15
    331a:	f8 0e       	add	r15, r24
    331c:	f2 0e       	add	r15, r18
    331e:	15 c0       	rjmp	.+42     	; 0x334a <vfprintf+0x102>
    3320:	8e 2d       	mov	r24, r14
    3322:	88 0f       	add	r24, r24
    3324:	e8 2e       	mov	r14, r24
    3326:	ee 0c       	add	r14, r14
    3328:	ee 0c       	add	r14, r14
    332a:	e8 0e       	add	r14, r24
    332c:	e2 0e       	add	r14, r18
    332e:	10 62       	ori	r17, 0x20	; 32
    3330:	0c c0       	rjmp	.+24     	; 0x334a <vfprintf+0x102>
    3332:	8e 32       	cpi	r24, 0x2E	; 46
    3334:	21 f4       	brne	.+8      	; 0x333e <vfprintf+0xf6>
    3336:	16 fd       	sbrc	r17, 6
    3338:	6c c1       	rjmp	.+728    	; 0x3612 <vfprintf+0x3ca>
    333a:	10 64       	ori	r17, 0x40	; 64
    333c:	06 c0       	rjmp	.+12     	; 0x334a <vfprintf+0x102>
    333e:	8c 36       	cpi	r24, 0x6C	; 108
    3340:	11 f4       	brne	.+4      	; 0x3346 <vfprintf+0xfe>
    3342:	10 68       	ori	r17, 0x80	; 128
    3344:	02 c0       	rjmp	.+4      	; 0x334a <vfprintf+0x102>
    3346:	88 36       	cpi	r24, 0x68	; 104
    3348:	59 f4       	brne	.+22     	; 0x3360 <vfprintf+0x118>
    334a:	ec 85       	ldd	r30, Y+12	; 0x0c
    334c:	fd 85       	ldd	r31, Y+13	; 0x0d
    334e:	93 fd       	sbrc	r25, 3
    3350:	85 91       	lpm	r24, Z+
    3352:	93 ff       	sbrs	r25, 3
    3354:	81 91       	ld	r24, Z+
    3356:	ec 87       	std	Y+12, r30	; 0x0c
    3358:	fd 87       	std	Y+13, r31	; 0x0d
    335a:	88 23       	and	r24, r24
    335c:	09 f0       	breq	.+2      	; 0x3360 <vfprintf+0x118>
    335e:	b8 cf       	rjmp	.-144    	; 0x32d0 <vfprintf+0x88>
    3360:	98 2f       	mov	r25, r24
    3362:	95 54       	subi	r25, 0x45	; 69
    3364:	93 30       	cpi	r25, 0x03	; 3
    3366:	18 f0       	brcs	.+6      	; 0x336e <vfprintf+0x126>
    3368:	90 52       	subi	r25, 0x20	; 32
    336a:	93 30       	cpi	r25, 0x03	; 3
    336c:	38 f4       	brcc	.+14     	; 0x337c <vfprintf+0x134>
    336e:	24 e0       	ldi	r18, 0x04	; 4
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	a2 0e       	add	r10, r18
    3374:	b3 1e       	adc	r11, r19
    3376:	3f e3       	ldi	r19, 0x3F	; 63
    3378:	39 83       	std	Y+1, r19	; 0x01
    337a:	0f c0       	rjmp	.+30     	; 0x339a <vfprintf+0x152>
    337c:	83 36       	cpi	r24, 0x63	; 99
    337e:	31 f0       	breq	.+12     	; 0x338c <vfprintf+0x144>
    3380:	83 37       	cpi	r24, 0x73	; 115
    3382:	81 f0       	breq	.+32     	; 0x33a4 <vfprintf+0x15c>
    3384:	83 35       	cpi	r24, 0x53	; 83
    3386:	09 f0       	breq	.+2      	; 0x338a <vfprintf+0x142>
    3388:	5a c0       	rjmp	.+180    	; 0x343e <vfprintf+0x1f6>
    338a:	22 c0       	rjmp	.+68     	; 0x33d0 <vfprintf+0x188>
    338c:	f5 01       	movw	r30, r10
    338e:	80 81       	ld	r24, Z
    3390:	89 83       	std	Y+1, r24	; 0x01
    3392:	22 e0       	ldi	r18, 0x02	; 2
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	a2 0e       	add	r10, r18
    3398:	b3 1e       	adc	r11, r19
    339a:	21 e0       	ldi	r18, 0x01	; 1
    339c:	c2 2e       	mov	r12, r18
    339e:	d1 2c       	mov	r13, r1
    33a0:	42 01       	movw	r8, r4
    33a2:	14 c0       	rjmp	.+40     	; 0x33cc <vfprintf+0x184>
    33a4:	92 e0       	ldi	r25, 0x02	; 2
    33a6:	29 2e       	mov	r2, r25
    33a8:	31 2c       	mov	r3, r1
    33aa:	2a 0c       	add	r2, r10
    33ac:	3b 1c       	adc	r3, r11
    33ae:	f5 01       	movw	r30, r10
    33b0:	80 80       	ld	r8, Z
    33b2:	91 80       	ldd	r9, Z+1	; 0x01
    33b4:	16 ff       	sbrs	r17, 6
    33b6:	03 c0       	rjmp	.+6      	; 0x33be <vfprintf+0x176>
    33b8:	6f 2d       	mov	r22, r15
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <vfprintf+0x17a>
    33be:	6f ef       	ldi	r22, 0xFF	; 255
    33c0:	7f ef       	ldi	r23, 0xFF	; 255
    33c2:	c4 01       	movw	r24, r8
    33c4:	0e 94 84 1c 	call	0x3908	; 0x3908 <strnlen>
    33c8:	6c 01       	movw	r12, r24
    33ca:	51 01       	movw	r10, r2
    33cc:	1f 77       	andi	r17, 0x7F	; 127
    33ce:	15 c0       	rjmp	.+42     	; 0x33fa <vfprintf+0x1b2>
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	28 2e       	mov	r2, r24
    33d4:	31 2c       	mov	r3, r1
    33d6:	2a 0c       	add	r2, r10
    33d8:	3b 1c       	adc	r3, r11
    33da:	f5 01       	movw	r30, r10
    33dc:	80 80       	ld	r8, Z
    33de:	91 80       	ldd	r9, Z+1	; 0x01
    33e0:	16 ff       	sbrs	r17, 6
    33e2:	03 c0       	rjmp	.+6      	; 0x33ea <vfprintf+0x1a2>
    33e4:	6f 2d       	mov	r22, r15
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <vfprintf+0x1a6>
    33ea:	6f ef       	ldi	r22, 0xFF	; 255
    33ec:	7f ef       	ldi	r23, 0xFF	; 255
    33ee:	c4 01       	movw	r24, r8
    33f0:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <strnlen_P>
    33f4:	6c 01       	movw	r12, r24
    33f6:	10 68       	ori	r17, 0x80	; 128
    33f8:	51 01       	movw	r10, r2
    33fa:	13 fd       	sbrc	r17, 3
    33fc:	1c c0       	rjmp	.+56     	; 0x3436 <vfprintf+0x1ee>
    33fe:	06 c0       	rjmp	.+12     	; 0x340c <vfprintf+0x1c4>
    3400:	80 e2       	ldi	r24, 0x20	; 32
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	b3 01       	movw	r22, r6
    3406:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    340a:	ea 94       	dec	r14
    340c:	8e 2d       	mov	r24, r14
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	c8 16       	cp	r12, r24
    3412:	d9 06       	cpc	r13, r25
    3414:	a8 f3       	brcs	.-22     	; 0x3400 <vfprintf+0x1b8>
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <vfprintf+0x1ee>
    3418:	f4 01       	movw	r30, r8
    341a:	17 fd       	sbrc	r17, 7
    341c:	85 91       	lpm	r24, Z+
    341e:	17 ff       	sbrs	r17, 7
    3420:	81 91       	ld	r24, Z+
    3422:	4f 01       	movw	r8, r30
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	b3 01       	movw	r22, r6
    3428:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    342c:	e1 10       	cpse	r14, r1
    342e:	ea 94       	dec	r14
    3430:	08 94       	sec
    3432:	c1 08       	sbc	r12, r1
    3434:	d1 08       	sbc	r13, r1
    3436:	c1 14       	cp	r12, r1
    3438:	d1 04       	cpc	r13, r1
    343a:	71 f7       	brne	.-36     	; 0x3418 <vfprintf+0x1d0>
    343c:	e7 c0       	rjmp	.+462    	; 0x360c <vfprintf+0x3c4>
    343e:	84 36       	cpi	r24, 0x64	; 100
    3440:	11 f0       	breq	.+4      	; 0x3446 <vfprintf+0x1fe>
    3442:	89 36       	cpi	r24, 0x69	; 105
    3444:	51 f5       	brne	.+84     	; 0x349a <vfprintf+0x252>
    3446:	f5 01       	movw	r30, r10
    3448:	17 ff       	sbrs	r17, 7
    344a:	07 c0       	rjmp	.+14     	; 0x345a <vfprintf+0x212>
    344c:	80 81       	ld	r24, Z
    344e:	91 81       	ldd	r25, Z+1	; 0x01
    3450:	a2 81       	ldd	r26, Z+2	; 0x02
    3452:	b3 81       	ldd	r27, Z+3	; 0x03
    3454:	24 e0       	ldi	r18, 0x04	; 4
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	08 c0       	rjmp	.+16     	; 0x346a <vfprintf+0x222>
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	aa 27       	eor	r26, r26
    3460:	97 fd       	sbrc	r25, 7
    3462:	a0 95       	com	r26
    3464:	ba 2f       	mov	r27, r26
    3466:	22 e0       	ldi	r18, 0x02	; 2
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	a2 0e       	add	r10, r18
    346c:	b3 1e       	adc	r11, r19
    346e:	01 2f       	mov	r16, r17
    3470:	0f 76       	andi	r16, 0x6F	; 111
    3472:	b7 ff       	sbrs	r27, 7
    3474:	08 c0       	rjmp	.+16     	; 0x3486 <vfprintf+0x23e>
    3476:	b0 95       	com	r27
    3478:	a0 95       	com	r26
    347a:	90 95       	com	r25
    347c:	81 95       	neg	r24
    347e:	9f 4f       	sbci	r25, 0xFF	; 255
    3480:	af 4f       	sbci	r26, 0xFF	; 255
    3482:	bf 4f       	sbci	r27, 0xFF	; 255
    3484:	00 68       	ori	r16, 0x80	; 128
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	a2 01       	movw	r20, r4
    348c:	2a e0       	ldi	r18, 0x0A	; 10
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__ultoa_invert>
    3494:	d8 2e       	mov	r13, r24
    3496:	d4 18       	sub	r13, r4
    3498:	3f c0       	rjmp	.+126    	; 0x3518 <vfprintf+0x2d0>
    349a:	85 37       	cpi	r24, 0x75	; 117
    349c:	21 f4       	brne	.+8      	; 0x34a6 <vfprintf+0x25e>
    349e:	1f 7e       	andi	r17, 0xEF	; 239
    34a0:	2a e0       	ldi	r18, 0x0A	; 10
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	20 c0       	rjmp	.+64     	; 0x34e6 <vfprintf+0x29e>
    34a6:	19 7f       	andi	r17, 0xF9	; 249
    34a8:	8f 36       	cpi	r24, 0x6F	; 111
    34aa:	a9 f0       	breq	.+42     	; 0x34d6 <vfprintf+0x28e>
    34ac:	80 37       	cpi	r24, 0x70	; 112
    34ae:	20 f4       	brcc	.+8      	; 0x34b8 <vfprintf+0x270>
    34b0:	88 35       	cpi	r24, 0x58	; 88
    34b2:	09 f0       	breq	.+2      	; 0x34b6 <vfprintf+0x26e>
    34b4:	ae c0       	rjmp	.+348    	; 0x3612 <vfprintf+0x3ca>
    34b6:	0b c0       	rjmp	.+22     	; 0x34ce <vfprintf+0x286>
    34b8:	80 37       	cpi	r24, 0x70	; 112
    34ba:	21 f0       	breq	.+8      	; 0x34c4 <vfprintf+0x27c>
    34bc:	88 37       	cpi	r24, 0x78	; 120
    34be:	09 f0       	breq	.+2      	; 0x34c2 <vfprintf+0x27a>
    34c0:	a8 c0       	rjmp	.+336    	; 0x3612 <vfprintf+0x3ca>
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <vfprintf+0x27e>
    34c4:	10 61       	ori	r17, 0x10	; 16
    34c6:	14 ff       	sbrs	r17, 4
    34c8:	09 c0       	rjmp	.+18     	; 0x34dc <vfprintf+0x294>
    34ca:	14 60       	ori	r17, 0x04	; 4
    34cc:	07 c0       	rjmp	.+14     	; 0x34dc <vfprintf+0x294>
    34ce:	14 ff       	sbrs	r17, 4
    34d0:	08 c0       	rjmp	.+16     	; 0x34e2 <vfprintf+0x29a>
    34d2:	16 60       	ori	r17, 0x06	; 6
    34d4:	06 c0       	rjmp	.+12     	; 0x34e2 <vfprintf+0x29a>
    34d6:	28 e0       	ldi	r18, 0x08	; 8
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	05 c0       	rjmp	.+10     	; 0x34e6 <vfprintf+0x29e>
    34dc:	20 e1       	ldi	r18, 0x10	; 16
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <vfprintf+0x29e>
    34e2:	20 e1       	ldi	r18, 0x10	; 16
    34e4:	32 e0       	ldi	r19, 0x02	; 2
    34e6:	f5 01       	movw	r30, r10
    34e8:	17 ff       	sbrs	r17, 7
    34ea:	07 c0       	rjmp	.+14     	; 0x34fa <vfprintf+0x2b2>
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	44 e0       	ldi	r20, 0x04	; 4
    34f6:	50 e0       	ldi	r21, 0x00	; 0
    34f8:	06 c0       	rjmp	.+12     	; 0x3506 <vfprintf+0x2be>
    34fa:	60 81       	ld	r22, Z
    34fc:	71 81       	ldd	r23, Z+1	; 0x01
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	42 e0       	ldi	r20, 0x02	; 2
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	a4 0e       	add	r10, r20
    3508:	b5 1e       	adc	r11, r21
    350a:	a2 01       	movw	r20, r4
    350c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__ultoa_invert>
    3510:	d8 2e       	mov	r13, r24
    3512:	d4 18       	sub	r13, r4
    3514:	01 2f       	mov	r16, r17
    3516:	0f 77       	andi	r16, 0x7F	; 127
    3518:	06 ff       	sbrs	r16, 6
    351a:	09 c0       	rjmp	.+18     	; 0x352e <vfprintf+0x2e6>
    351c:	0e 7f       	andi	r16, 0xFE	; 254
    351e:	df 14       	cp	r13, r15
    3520:	30 f4       	brcc	.+12     	; 0x352e <vfprintf+0x2e6>
    3522:	04 ff       	sbrs	r16, 4
    3524:	06 c0       	rjmp	.+12     	; 0x3532 <vfprintf+0x2ea>
    3526:	02 fd       	sbrc	r16, 2
    3528:	04 c0       	rjmp	.+8      	; 0x3532 <vfprintf+0x2ea>
    352a:	0f 7e       	andi	r16, 0xEF	; 239
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <vfprintf+0x2ea>
    352e:	1d 2d       	mov	r17, r13
    3530:	01 c0       	rjmp	.+2      	; 0x3534 <vfprintf+0x2ec>
    3532:	1f 2d       	mov	r17, r15
    3534:	80 2f       	mov	r24, r16
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	04 ff       	sbrs	r16, 4
    353a:	0c c0       	rjmp	.+24     	; 0x3554 <vfprintf+0x30c>
    353c:	fe 01       	movw	r30, r28
    353e:	ed 0d       	add	r30, r13
    3540:	f1 1d       	adc	r31, r1
    3542:	20 81       	ld	r18, Z
    3544:	20 33       	cpi	r18, 0x30	; 48
    3546:	11 f4       	brne	.+4      	; 0x354c <vfprintf+0x304>
    3548:	09 7e       	andi	r16, 0xE9	; 233
    354a:	09 c0       	rjmp	.+18     	; 0x355e <vfprintf+0x316>
    354c:	02 ff       	sbrs	r16, 2
    354e:	06 c0       	rjmp	.+12     	; 0x355c <vfprintf+0x314>
    3550:	1e 5f       	subi	r17, 0xFE	; 254
    3552:	05 c0       	rjmp	.+10     	; 0x355e <vfprintf+0x316>
    3554:	86 78       	andi	r24, 0x86	; 134
    3556:	90 70       	andi	r25, 0x00	; 0
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	09 f0       	breq	.+2      	; 0x355e <vfprintf+0x316>
    355c:	1f 5f       	subi	r17, 0xFF	; 255
    355e:	80 2e       	mov	r8, r16
    3560:	99 24       	eor	r9, r9
    3562:	03 fd       	sbrc	r16, 3
    3564:	12 c0       	rjmp	.+36     	; 0x358a <vfprintf+0x342>
    3566:	00 ff       	sbrs	r16, 0
    3568:	0d c0       	rjmp	.+26     	; 0x3584 <vfprintf+0x33c>
    356a:	fd 2c       	mov	r15, r13
    356c:	1e 15       	cp	r17, r14
    356e:	50 f4       	brcc	.+20     	; 0x3584 <vfprintf+0x33c>
    3570:	fe 0c       	add	r15, r14
    3572:	f1 1a       	sub	r15, r17
    3574:	1e 2d       	mov	r17, r14
    3576:	06 c0       	rjmp	.+12     	; 0x3584 <vfprintf+0x33c>
    3578:	80 e2       	ldi	r24, 0x20	; 32
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	b3 01       	movw	r22, r6
    357e:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    3582:	1f 5f       	subi	r17, 0xFF	; 255
    3584:	1e 15       	cp	r17, r14
    3586:	c0 f3       	brcs	.-16     	; 0x3578 <vfprintf+0x330>
    3588:	04 c0       	rjmp	.+8      	; 0x3592 <vfprintf+0x34a>
    358a:	1e 15       	cp	r17, r14
    358c:	10 f4       	brcc	.+4      	; 0x3592 <vfprintf+0x34a>
    358e:	e1 1a       	sub	r14, r17
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <vfprintf+0x34c>
    3592:	ee 24       	eor	r14, r14
    3594:	84 fe       	sbrs	r8, 4
    3596:	0f c0       	rjmp	.+30     	; 0x35b6 <vfprintf+0x36e>
    3598:	80 e3       	ldi	r24, 0x30	; 48
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	b3 01       	movw	r22, r6
    359e:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    35a2:	82 fe       	sbrs	r8, 2
    35a4:	1f c0       	rjmp	.+62     	; 0x35e4 <vfprintf+0x39c>
    35a6:	81 fe       	sbrs	r8, 1
    35a8:	03 c0       	rjmp	.+6      	; 0x35b0 <vfprintf+0x368>
    35aa:	88 e5       	ldi	r24, 0x58	; 88
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	10 c0       	rjmp	.+32     	; 0x35d0 <vfprintf+0x388>
    35b0:	88 e7       	ldi	r24, 0x78	; 120
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0d c0       	rjmp	.+26     	; 0x35d0 <vfprintf+0x388>
    35b6:	c4 01       	movw	r24, r8
    35b8:	86 78       	andi	r24, 0x86	; 134
    35ba:	90 70       	andi	r25, 0x00	; 0
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	91 f0       	breq	.+36     	; 0x35e4 <vfprintf+0x39c>
    35c0:	81 fc       	sbrc	r8, 1
    35c2:	02 c0       	rjmp	.+4      	; 0x35c8 <vfprintf+0x380>
    35c4:	80 e2       	ldi	r24, 0x20	; 32
    35c6:	01 c0       	rjmp	.+2      	; 0x35ca <vfprintf+0x382>
    35c8:	8b e2       	ldi	r24, 0x2B	; 43
    35ca:	07 fd       	sbrc	r16, 7
    35cc:	8d e2       	ldi	r24, 0x2D	; 45
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	b3 01       	movw	r22, r6
    35d2:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    35d6:	06 c0       	rjmp	.+12     	; 0x35e4 <vfprintf+0x39c>
    35d8:	80 e3       	ldi	r24, 0x30	; 48
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	b3 01       	movw	r22, r6
    35de:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    35e2:	fa 94       	dec	r15
    35e4:	df 14       	cp	r13, r15
    35e6:	c0 f3       	brcs	.-16     	; 0x35d8 <vfprintf+0x390>
    35e8:	da 94       	dec	r13
    35ea:	f2 01       	movw	r30, r4
    35ec:	ed 0d       	add	r30, r13
    35ee:	f1 1d       	adc	r31, r1
    35f0:	80 81       	ld	r24, Z
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	b3 01       	movw	r22, r6
    35f6:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    35fa:	dd 20       	and	r13, r13
    35fc:	a9 f7       	brne	.-22     	; 0x35e8 <vfprintf+0x3a0>
    35fe:	06 c0       	rjmp	.+12     	; 0x360c <vfprintf+0x3c4>
    3600:	80 e2       	ldi	r24, 0x20	; 32
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	b3 01       	movw	r22, r6
    3606:	0e 94 8f 1c 	call	0x391e	; 0x391e <fputc>
    360a:	ea 94       	dec	r14
    360c:	ee 20       	and	r14, r14
    360e:	c1 f7       	brne	.-16     	; 0x3600 <vfprintf+0x3b8>
    3610:	40 ce       	rjmp	.-896    	; 0x3292 <vfprintf+0x4a>
    3612:	f3 01       	movw	r30, r6
    3614:	86 81       	ldd	r24, Z+6	; 0x06
    3616:	97 81       	ldd	r25, Z+7	; 0x07
    3618:	02 c0       	rjmp	.+4      	; 0x361e <vfprintf+0x3d6>
    361a:	8f ef       	ldi	r24, 0xFF	; 255
    361c:	9f ef       	ldi	r25, 0xFF	; 255
    361e:	2d 96       	adiw	r28, 0x0d	; 13
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	bf 90       	pop	r11
    3636:	af 90       	pop	r10
    3638:	9f 90       	pop	r9
    363a:	8f 90       	pop	r8
    363c:	7f 90       	pop	r7
    363e:	6f 90       	pop	r6
    3640:	5f 90       	pop	r5
    3642:	4f 90       	pop	r4
    3644:	3f 90       	pop	r3
    3646:	2f 90       	pop	r2
    3648:	08 95       	ret

0000364a <calloc>:
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	68 9f       	mul	r22, r24
    3654:	80 01       	movw	r16, r0
    3656:	69 9f       	mul	r22, r25
    3658:	10 0d       	add	r17, r0
    365a:	78 9f       	mul	r23, r24
    365c:	10 0d       	add	r17, r0
    365e:	11 24       	eor	r1, r1
    3660:	c8 01       	movw	r24, r16
    3662:	0e 94 43 1b 	call	0x3686	; 0x3686 <malloc>
    3666:	c8 2f       	mov	r28, r24
    3668:	d9 2f       	mov	r29, r25
    366a:	20 97       	sbiw	r28, 0x00	; 0
    366c:	31 f0       	breq	.+12     	; 0x367a <calloc+0x30>
    366e:	8c 2f       	mov	r24, r28
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	a8 01       	movw	r20, r16
    3676:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <memset>
    367a:	ce 01       	movw	r24, r28
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	08 95       	ret

00003686 <malloc>:
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	ac 01       	movw	r20, r24
    368c:	82 30       	cpi	r24, 0x02	; 2
    368e:	91 05       	cpc	r25, r1
    3690:	10 f4       	brcc	.+4      	; 0x3696 <malloc+0x10>
    3692:	42 e0       	ldi	r20, 0x02	; 2
    3694:	50 e0       	ldi	r21, 0x00	; 0
    3696:	e0 91 9d 20 	lds	r30, 0x209D
    369a:	f0 91 9e 20 	lds	r31, 0x209E
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	a0 e0       	ldi	r26, 0x00	; 0
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	24 c0       	rjmp	.+72     	; 0x36f0 <malloc+0x6a>
    36a8:	80 81       	ld	r24, Z
    36aa:	91 81       	ldd	r25, Z+1	; 0x01
    36ac:	84 17       	cp	r24, r20
    36ae:	95 07       	cpc	r25, r21
    36b0:	d0 f0       	brcs	.+52     	; 0x36e6 <malloc+0x60>
    36b2:	84 17       	cp	r24, r20
    36b4:	95 07       	cpc	r25, r21
    36b6:	71 f4       	brne	.+28     	; 0x36d4 <malloc+0x4e>
    36b8:	82 81       	ldd	r24, Z+2	; 0x02
    36ba:	93 81       	ldd	r25, Z+3	; 0x03
    36bc:	10 97       	sbiw	r26, 0x00	; 0
    36be:	29 f0       	breq	.+10     	; 0x36ca <malloc+0x44>
    36c0:	12 96       	adiw	r26, 0x02	; 2
    36c2:	8d 93       	st	X+, r24
    36c4:	9c 93       	st	X, r25
    36c6:	13 97       	sbiw	r26, 0x03	; 3
    36c8:	2c c0       	rjmp	.+88     	; 0x3722 <malloc+0x9c>
    36ca:	80 93 9d 20 	sts	0x209D, r24
    36ce:	90 93 9e 20 	sts	0x209E, r25
    36d2:	27 c0       	rjmp	.+78     	; 0x3722 <malloc+0x9c>
    36d4:	21 15       	cp	r18, r1
    36d6:	31 05       	cpc	r19, r1
    36d8:	19 f0       	breq	.+6      	; 0x36e0 <malloc+0x5a>
    36da:	82 17       	cp	r24, r18
    36dc:	93 07       	cpc	r25, r19
    36de:	18 f4       	brcc	.+6      	; 0x36e6 <malloc+0x60>
    36e0:	9c 01       	movw	r18, r24
    36e2:	bd 01       	movw	r22, r26
    36e4:	ef 01       	movw	r28, r30
    36e6:	92 81       	ldd	r25, Z+2	; 0x02
    36e8:	83 81       	ldd	r24, Z+3	; 0x03
    36ea:	df 01       	movw	r26, r30
    36ec:	e9 2f       	mov	r30, r25
    36ee:	f8 2f       	mov	r31, r24
    36f0:	30 97       	sbiw	r30, 0x00	; 0
    36f2:	d1 f6       	brne	.-76     	; 0x36a8 <malloc+0x22>
    36f4:	21 15       	cp	r18, r1
    36f6:	31 05       	cpc	r19, r1
    36f8:	f9 f0       	breq	.+62     	; 0x3738 <malloc+0xb2>
    36fa:	c9 01       	movw	r24, r18
    36fc:	84 1b       	sub	r24, r20
    36fe:	95 0b       	sbc	r25, r21
    3700:	84 30       	cpi	r24, 0x04	; 4
    3702:	91 05       	cpc	r25, r1
    3704:	80 f4       	brcc	.+32     	; 0x3726 <malloc+0xa0>
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	9b 81       	ldd	r25, Y+3	; 0x03
    370a:	61 15       	cp	r22, r1
    370c:	71 05       	cpc	r23, r1
    370e:	21 f0       	breq	.+8      	; 0x3718 <malloc+0x92>
    3710:	fb 01       	movw	r30, r22
    3712:	82 83       	std	Z+2, r24	; 0x02
    3714:	93 83       	std	Z+3, r25	; 0x03
    3716:	04 c0       	rjmp	.+8      	; 0x3720 <malloc+0x9a>
    3718:	80 93 9d 20 	sts	0x209D, r24
    371c:	90 93 9e 20 	sts	0x209E, r25
    3720:	fe 01       	movw	r30, r28
    3722:	32 96       	adiw	r30, 0x02	; 2
    3724:	42 c0       	rjmp	.+132    	; 0x37aa <malloc+0x124>
    3726:	fe 01       	movw	r30, r28
    3728:	e8 0f       	add	r30, r24
    372a:	f9 1f       	adc	r31, r25
    372c:	41 93       	st	Z+, r20
    372e:	51 93       	st	Z+, r21
    3730:	02 97       	sbiw	r24, 0x02	; 2
    3732:	88 83       	st	Y, r24
    3734:	99 83       	std	Y+1, r25	; 0x01
    3736:	39 c0       	rjmp	.+114    	; 0x37aa <malloc+0x124>
    3738:	80 91 9b 20 	lds	r24, 0x209B
    373c:	90 91 9c 20 	lds	r25, 0x209C
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	41 f4       	brne	.+16     	; 0x3754 <malloc+0xce>
    3744:	80 91 2c 20 	lds	r24, 0x202C
    3748:	90 91 2d 20 	lds	r25, 0x202D
    374c:	80 93 9b 20 	sts	0x209B, r24
    3750:	90 93 9c 20 	sts	0x209C, r25
    3754:	20 91 2a 20 	lds	r18, 0x202A
    3758:	30 91 2b 20 	lds	r19, 0x202B
    375c:	21 15       	cp	r18, r1
    375e:	31 05       	cpc	r19, r1
    3760:	41 f4       	brne	.+16     	; 0x3772 <malloc+0xec>
    3762:	2d b7       	in	r18, 0x3d	; 61
    3764:	3e b7       	in	r19, 0x3e	; 62
    3766:	80 91 2e 20 	lds	r24, 0x202E
    376a:	90 91 2f 20 	lds	r25, 0x202F
    376e:	28 1b       	sub	r18, r24
    3770:	39 0b       	sbc	r19, r25
    3772:	e0 91 9b 20 	lds	r30, 0x209B
    3776:	f0 91 9c 20 	lds	r31, 0x209C
    377a:	e2 17       	cp	r30, r18
    377c:	f3 07       	cpc	r31, r19
    377e:	98 f4       	brcc	.+38     	; 0x37a6 <malloc+0x120>
    3780:	2e 1b       	sub	r18, r30
    3782:	3f 0b       	sbc	r19, r31
    3784:	24 17       	cp	r18, r20
    3786:	35 07       	cpc	r19, r21
    3788:	70 f0       	brcs	.+28     	; 0x37a6 <malloc+0x120>
    378a:	ca 01       	movw	r24, r20
    378c:	02 96       	adiw	r24, 0x02	; 2
    378e:	28 17       	cp	r18, r24
    3790:	39 07       	cpc	r19, r25
    3792:	48 f0       	brcs	.+18     	; 0x37a6 <malloc+0x120>
    3794:	8e 0f       	add	r24, r30
    3796:	9f 1f       	adc	r25, r31
    3798:	80 93 9b 20 	sts	0x209B, r24
    379c:	90 93 9c 20 	sts	0x209C, r25
    37a0:	41 93       	st	Z+, r20
    37a2:	51 93       	st	Z+, r21
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <malloc+0x124>
    37a6:	e0 e0       	ldi	r30, 0x00	; 0
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	cf 01       	movw	r24, r30
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	08 95       	ret

000037b2 <free>:
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	9c 01       	movw	r18, r24
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	09 f4       	brne	.+2      	; 0x37c2 <free+0x10>
    37c0:	8c c0       	rjmp	.+280    	; 0x38da <free+0x128>
    37c2:	dc 01       	movw	r26, r24
    37c4:	12 97       	sbiw	r26, 0x02	; 2
    37c6:	12 96       	adiw	r26, 0x02	; 2
    37c8:	1d 92       	st	X+, r1
    37ca:	1c 92       	st	X, r1
    37cc:	13 97       	sbiw	r26, 0x03	; 3
    37ce:	60 91 9d 20 	lds	r22, 0x209D
    37d2:	70 91 9e 20 	lds	r23, 0x209E
    37d6:	61 15       	cp	r22, r1
    37d8:	71 05       	cpc	r23, r1
    37da:	89 f4       	brne	.+34     	; 0x37fe <free+0x4c>
    37dc:	8d 91       	ld	r24, X+
    37de:	9c 91       	ld	r25, X
    37e0:	11 97       	sbiw	r26, 0x01	; 1
    37e2:	82 0f       	add	r24, r18
    37e4:	93 1f       	adc	r25, r19
    37e6:	20 91 9b 20 	lds	r18, 0x209B
    37ea:	30 91 9c 20 	lds	r19, 0x209C
    37ee:	28 17       	cp	r18, r24
    37f0:	39 07       	cpc	r19, r25
    37f2:	69 f5       	brne	.+90     	; 0x384e <free+0x9c>
    37f4:	a0 93 9b 20 	sts	0x209B, r26
    37f8:	b0 93 9c 20 	sts	0x209C, r27
    37fc:	6e c0       	rjmp	.+220    	; 0x38da <free+0x128>
    37fe:	fb 01       	movw	r30, r22
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	01 c0       	rjmp	.+2      	; 0x3808 <free+0x56>
    3806:	fc 01       	movw	r30, r24
    3808:	ea 17       	cp	r30, r26
    380a:	fb 07       	cpc	r31, r27
    380c:	30 f4       	brcc	.+12     	; 0x381a <free+0x68>
    380e:	82 81       	ldd	r24, Z+2	; 0x02
    3810:	93 81       	ldd	r25, Z+3	; 0x03
    3812:	af 01       	movw	r20, r30
    3814:	00 97       	sbiw	r24, 0x00	; 0
    3816:	b9 f7       	brne	.-18     	; 0x3806 <free+0x54>
    3818:	1f c0       	rjmp	.+62     	; 0x3858 <free+0xa6>
    381a:	e9 01       	movw	r28, r18
    381c:	22 97       	sbiw	r28, 0x02	; 2
    381e:	ea 83       	std	Y+2, r30	; 0x02
    3820:	fb 83       	std	Y+3, r31	; 0x03
    3822:	08 81       	ld	r16, Y
    3824:	19 81       	ldd	r17, Y+1	; 0x01
    3826:	c9 01       	movw	r24, r18
    3828:	80 0f       	add	r24, r16
    382a:	91 1f       	adc	r25, r17
    382c:	8e 17       	cp	r24, r30
    382e:	9f 07       	cpc	r25, r31
    3830:	59 f4       	brne	.+22     	; 0x3848 <free+0x96>
    3832:	80 81       	ld	r24, Z
    3834:	91 81       	ldd	r25, Z+1	; 0x01
    3836:	80 0f       	add	r24, r16
    3838:	91 1f       	adc	r25, r17
    383a:	02 96       	adiw	r24, 0x02	; 2
    383c:	88 83       	st	Y, r24
    383e:	99 83       	std	Y+1, r25	; 0x01
    3840:	82 81       	ldd	r24, Z+2	; 0x02
    3842:	93 81       	ldd	r25, Z+3	; 0x03
    3844:	8a 83       	std	Y+2, r24	; 0x02
    3846:	9b 83       	std	Y+3, r25	; 0x03
    3848:	41 15       	cp	r20, r1
    384a:	51 05       	cpc	r21, r1
    384c:	29 f4       	brne	.+10     	; 0x3858 <free+0xa6>
    384e:	a0 93 9d 20 	sts	0x209D, r26
    3852:	b0 93 9e 20 	sts	0x209E, r27
    3856:	41 c0       	rjmp	.+130    	; 0x38da <free+0x128>
    3858:	fa 01       	movw	r30, r20
    385a:	a2 83       	std	Z+2, r26	; 0x02
    385c:	b3 83       	std	Z+3, r27	; 0x03
    385e:	c1 91       	ld	r28, Z+
    3860:	d1 91       	ld	r29, Z+
    3862:	ec 0f       	add	r30, r28
    3864:	fd 1f       	adc	r31, r29
    3866:	ae 17       	cp	r26, r30
    3868:	bf 07       	cpc	r27, r31
    386a:	81 f4       	brne	.+32     	; 0x388c <free+0xda>
    386c:	f9 01       	movw	r30, r18
    386e:	92 91       	ld	r25, -Z
    3870:	82 91       	ld	r24, -Z
    3872:	8c 0f       	add	r24, r28
    3874:	9d 1f       	adc	r25, r29
    3876:	02 96       	adiw	r24, 0x02	; 2
    3878:	da 01       	movw	r26, r20
    387a:	8d 93       	st	X+, r24
    387c:	9c 93       	st	X, r25
    387e:	11 97       	sbiw	r26, 0x01	; 1
    3880:	82 81       	ldd	r24, Z+2	; 0x02
    3882:	93 81       	ldd	r25, Z+3	; 0x03
    3884:	12 96       	adiw	r26, 0x02	; 2
    3886:	8d 93       	st	X+, r24
    3888:	9c 93       	st	X, r25
    388a:	13 97       	sbiw	r26, 0x03	; 3
    388c:	e0 e0       	ldi	r30, 0x00	; 0
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <free+0xe4>
    3892:	fb 01       	movw	r30, r22
    3894:	bc 01       	movw	r22, r24
    3896:	db 01       	movw	r26, r22
    3898:	12 96       	adiw	r26, 0x02	; 2
    389a:	8d 91       	ld	r24, X+
    389c:	9c 91       	ld	r25, X
    389e:	13 97       	sbiw	r26, 0x03	; 3
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	b9 f7       	brne	.-18     	; 0x3892 <free+0xe0>
    38a4:	cb 01       	movw	r24, r22
    38a6:	02 96       	adiw	r24, 0x02	; 2
    38a8:	2d 91       	ld	r18, X+
    38aa:	3c 91       	ld	r19, X
    38ac:	11 97       	sbiw	r26, 0x01	; 1
    38ae:	82 0f       	add	r24, r18
    38b0:	93 1f       	adc	r25, r19
    38b2:	20 91 9b 20 	lds	r18, 0x209B
    38b6:	30 91 9c 20 	lds	r19, 0x209C
    38ba:	28 17       	cp	r18, r24
    38bc:	39 07       	cpc	r19, r25
    38be:	69 f4       	brne	.+26     	; 0x38da <free+0x128>
    38c0:	30 97       	sbiw	r30, 0x00	; 0
    38c2:	29 f4       	brne	.+10     	; 0x38ce <free+0x11c>
    38c4:	10 92 9d 20 	sts	0x209D, r1
    38c8:	10 92 9e 20 	sts	0x209E, r1
    38cc:	02 c0       	rjmp	.+4      	; 0x38d2 <free+0x120>
    38ce:	12 82       	std	Z+2, r1	; 0x02
    38d0:	13 82       	std	Z+3, r1	; 0x03
    38d2:	60 93 9b 20 	sts	0x209B, r22
    38d6:	70 93 9c 20 	sts	0x209C, r23
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	1f 91       	pop	r17
    38e0:	0f 91       	pop	r16
    38e2:	08 95       	ret

000038e4 <strnlen_P>:
    38e4:	fc 01       	movw	r30, r24
    38e6:	05 90       	lpm	r0, Z+
    38e8:	61 50       	subi	r22, 0x01	; 1
    38ea:	70 40       	sbci	r23, 0x00	; 0
    38ec:	01 10       	cpse	r0, r1
    38ee:	d8 f7       	brcc	.-10     	; 0x38e6 <strnlen_P+0x2>
    38f0:	80 95       	com	r24
    38f2:	90 95       	com	r25
    38f4:	8e 0f       	add	r24, r30
    38f6:	9f 1f       	adc	r25, r31
    38f8:	08 95       	ret

000038fa <memset>:
    38fa:	dc 01       	movw	r26, r24
    38fc:	01 c0       	rjmp	.+2      	; 0x3900 <memset+0x6>
    38fe:	6d 93       	st	X+, r22
    3900:	41 50       	subi	r20, 0x01	; 1
    3902:	50 40       	sbci	r21, 0x00	; 0
    3904:	e0 f7       	brcc	.-8      	; 0x38fe <memset+0x4>
    3906:	08 95       	ret

00003908 <strnlen>:
    3908:	fc 01       	movw	r30, r24
    390a:	61 50       	subi	r22, 0x01	; 1
    390c:	70 40       	sbci	r23, 0x00	; 0
    390e:	01 90       	ld	r0, Z+
    3910:	01 10       	cpse	r0, r1
    3912:	d8 f7       	brcc	.-10     	; 0x390a <strnlen+0x2>
    3914:	80 95       	com	r24
    3916:	90 95       	com	r25
    3918:	8e 0f       	add	r24, r30
    391a:	9f 1f       	adc	r25, r31
    391c:	08 95       	ret

0000391e <fputc>:
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	8c 01       	movw	r16, r24
    3928:	eb 01       	movw	r28, r22
    392a:	8b 81       	ldd	r24, Y+3	; 0x03
    392c:	81 ff       	sbrs	r24, 1
    392e:	1b c0       	rjmp	.+54     	; 0x3966 <fputc+0x48>
    3930:	82 ff       	sbrs	r24, 2
    3932:	0d c0       	rjmp	.+26     	; 0x394e <fputc+0x30>
    3934:	2e 81       	ldd	r18, Y+6	; 0x06
    3936:	3f 81       	ldd	r19, Y+7	; 0x07
    3938:	8c 81       	ldd	r24, Y+4	; 0x04
    393a:	9d 81       	ldd	r25, Y+5	; 0x05
    393c:	28 17       	cp	r18, r24
    393e:	39 07       	cpc	r19, r25
    3940:	64 f4       	brge	.+24     	; 0x395a <fputc+0x3c>
    3942:	e8 81       	ld	r30, Y
    3944:	f9 81       	ldd	r31, Y+1	; 0x01
    3946:	01 93       	st	Z+, r16
    3948:	e8 83       	st	Y, r30
    394a:	f9 83       	std	Y+1, r31	; 0x01
    394c:	06 c0       	rjmp	.+12     	; 0x395a <fputc+0x3c>
    394e:	e8 85       	ldd	r30, Y+8	; 0x08
    3950:	f9 85       	ldd	r31, Y+9	; 0x09
    3952:	80 2f       	mov	r24, r16
    3954:	19 95       	eicall
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	31 f4       	brne	.+12     	; 0x3966 <fputc+0x48>
    395a:	8e 81       	ldd	r24, Y+6	; 0x06
    395c:	9f 81       	ldd	r25, Y+7	; 0x07
    395e:	01 96       	adiw	r24, 0x01	; 1
    3960:	8e 83       	std	Y+6, r24	; 0x06
    3962:	9f 83       	std	Y+7, r25	; 0x07
    3964:	02 c0       	rjmp	.+4      	; 0x396a <fputc+0x4c>
    3966:	0f ef       	ldi	r16, 0xFF	; 255
    3968:	1f ef       	ldi	r17, 0xFF	; 255
    396a:	c8 01       	movw	r24, r16
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	08 95       	ret

00003976 <__ultoa_invert>:
    3976:	fa 01       	movw	r30, r20
    3978:	aa 27       	eor	r26, r26
    397a:	28 30       	cpi	r18, 0x08	; 8
    397c:	51 f1       	breq	.+84     	; 0x39d2 <__ultoa_invert+0x5c>
    397e:	20 31       	cpi	r18, 0x10	; 16
    3980:	81 f1       	breq	.+96     	; 0x39e2 <__ultoa_invert+0x6c>
    3982:	e8 94       	clt
    3984:	6f 93       	push	r22
    3986:	6e 7f       	andi	r22, 0xFE	; 254
    3988:	6e 5f       	subi	r22, 0xFE	; 254
    398a:	7f 4f       	sbci	r23, 0xFF	; 255
    398c:	8f 4f       	sbci	r24, 0xFF	; 255
    398e:	9f 4f       	sbci	r25, 0xFF	; 255
    3990:	af 4f       	sbci	r26, 0xFF	; 255
    3992:	b1 e0       	ldi	r27, 0x01	; 1
    3994:	3e d0       	rcall	.+124    	; 0x3a12 <__ultoa_invert+0x9c>
    3996:	b4 e0       	ldi	r27, 0x04	; 4
    3998:	3c d0       	rcall	.+120    	; 0x3a12 <__ultoa_invert+0x9c>
    399a:	67 0f       	add	r22, r23
    399c:	78 1f       	adc	r23, r24
    399e:	89 1f       	adc	r24, r25
    39a0:	9a 1f       	adc	r25, r26
    39a2:	a1 1d       	adc	r26, r1
    39a4:	68 0f       	add	r22, r24
    39a6:	79 1f       	adc	r23, r25
    39a8:	8a 1f       	adc	r24, r26
    39aa:	91 1d       	adc	r25, r1
    39ac:	a1 1d       	adc	r26, r1
    39ae:	6a 0f       	add	r22, r26
    39b0:	71 1d       	adc	r23, r1
    39b2:	81 1d       	adc	r24, r1
    39b4:	91 1d       	adc	r25, r1
    39b6:	a1 1d       	adc	r26, r1
    39b8:	20 d0       	rcall	.+64     	; 0x39fa <__ultoa_invert+0x84>
    39ba:	09 f4       	brne	.+2      	; 0x39be <__ultoa_invert+0x48>
    39bc:	68 94       	set
    39be:	3f 91       	pop	r19
    39c0:	2a e0       	ldi	r18, 0x0A	; 10
    39c2:	26 9f       	mul	r18, r22
    39c4:	11 24       	eor	r1, r1
    39c6:	30 19       	sub	r19, r0
    39c8:	30 5d       	subi	r19, 0xD0	; 208
    39ca:	31 93       	st	Z+, r19
    39cc:	de f6       	brtc	.-74     	; 0x3984 <__ultoa_invert+0xe>
    39ce:	cf 01       	movw	r24, r30
    39d0:	08 95       	ret
    39d2:	46 2f       	mov	r20, r22
    39d4:	47 70       	andi	r20, 0x07	; 7
    39d6:	40 5d       	subi	r20, 0xD0	; 208
    39d8:	41 93       	st	Z+, r20
    39da:	b3 e0       	ldi	r27, 0x03	; 3
    39dc:	0f d0       	rcall	.+30     	; 0x39fc <__ultoa_invert+0x86>
    39de:	c9 f7       	brne	.-14     	; 0x39d2 <__ultoa_invert+0x5c>
    39e0:	f6 cf       	rjmp	.-20     	; 0x39ce <__ultoa_invert+0x58>
    39e2:	46 2f       	mov	r20, r22
    39e4:	4f 70       	andi	r20, 0x0F	; 15
    39e6:	40 5d       	subi	r20, 0xD0	; 208
    39e8:	4a 33       	cpi	r20, 0x3A	; 58
    39ea:	18 f0       	brcs	.+6      	; 0x39f2 <__ultoa_invert+0x7c>
    39ec:	49 5d       	subi	r20, 0xD9	; 217
    39ee:	31 fd       	sbrc	r19, 1
    39f0:	40 52       	subi	r20, 0x20	; 32
    39f2:	41 93       	st	Z+, r20
    39f4:	02 d0       	rcall	.+4      	; 0x39fa <__ultoa_invert+0x84>
    39f6:	a9 f7       	brne	.-22     	; 0x39e2 <__ultoa_invert+0x6c>
    39f8:	ea cf       	rjmp	.-44     	; 0x39ce <__ultoa_invert+0x58>
    39fa:	b4 e0       	ldi	r27, 0x04	; 4
    39fc:	a6 95       	lsr	r26
    39fe:	97 95       	ror	r25
    3a00:	87 95       	ror	r24
    3a02:	77 95       	ror	r23
    3a04:	67 95       	ror	r22
    3a06:	ba 95       	dec	r27
    3a08:	c9 f7       	brne	.-14     	; 0x39fc <__ultoa_invert+0x86>
    3a0a:	00 97       	sbiw	r24, 0x00	; 0
    3a0c:	61 05       	cpc	r22, r1
    3a0e:	71 05       	cpc	r23, r1
    3a10:	08 95       	ret
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
    3a16:	0a 2e       	mov	r0, r26
    3a18:	06 94       	lsr	r0
    3a1a:	57 95       	ror	r21
    3a1c:	47 95       	ror	r20
    3a1e:	37 95       	ror	r19
    3a20:	27 95       	ror	r18
    3a22:	ba 95       	dec	r27
    3a24:	c9 f7       	brne	.-14     	; 0x3a18 <__ultoa_invert+0xa2>
    3a26:	62 0f       	add	r22, r18
    3a28:	73 1f       	adc	r23, r19
    3a2a:	84 1f       	adc	r24, r20
    3a2c:	95 1f       	adc	r25, r21
    3a2e:	a0 1d       	adc	r26, r0
    3a30:	08 95       	ret

00003a32 <_exit>:
    3a32:	f8 94       	cli

00003a34 <__stop_program>:
    3a34:	ff cf       	rjmp	.-2      	; 0x3a34 <__stop_program>


usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00040000  00040000  000052b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000050ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000132  00802000  000050ce  00005184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000360  00802132  00802132  000052fa  2**2
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000052fa  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00005358  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002c0  00000000  00000000  000053a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00011cc7  00000000  00000000  00005660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006159  00000000  00000000  00017327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005a7b  00000000  00000000  0001d480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000226c  00000000  00000000  00022efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006a85  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000826d  00000000  00000000  0002bbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00033e60  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00040000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   40000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   40002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   40004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   40006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   4000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   4000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   40010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   40014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   40016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   4001a:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   4001c:	08 95       	ret

0004001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   4001e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   40022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   40024:	fc cf       	rjmp	.-8      	; 0x4001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   40026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   40028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   4002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   4002c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   40030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   40032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   40036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   40038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   4003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   4003c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   40040:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   40042:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_13>
      38:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_14>
      3c:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_15>
      40:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_16>
      44:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_17>
      48:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_18>
      4c:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_19>
      50:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_20>
      54:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_21>
      58:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_22>
      5c:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__vector_23>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      70:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      74:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      78:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      7c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      80:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      84:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      88:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      8c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      90:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      94:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      98:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      9c:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__vector_39>
      a0:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_40>
      a4:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_41>
      a8:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_42>
      ac:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      b8:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_46>
      bc:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_47>
      c0:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_48>
      c4:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_49>
      c8:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_50>
      cc:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_51>
      d0:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_52>
      d4:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_53>
      d8:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__vector_54>
      dc:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__vector_55>
      e0:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_56>
      e4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      e8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      ec:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      f8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      fc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     100:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     104:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     108:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     10c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     110:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     114:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     118:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     11c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_71>
     120:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_72>
     124:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_73>
     128:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_74>
     12c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     130:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     134:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_77>
     138:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_78>
     13c:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_79>
     140:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_80>
     144:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_81>
     148:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__vector_82>
     14c:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_83>
     150:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_84>
     154:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__vector_85>
     158:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__vector_86>
     15c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     160:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     164:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     168:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     16c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     170:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     174:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     178:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     17c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     180:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     184:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     188:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     18c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     190:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     194:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     198:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     19c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1a8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1ac:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1b0:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_108>
     1b4:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__vector_109>
     1b8:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__vector_110>
     1bc:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_111>
     1c0:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_112>
     1c4:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_113>
     1c8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1cc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1d8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1dc:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1e8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1ec:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f0:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
     1f4:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__vector_125>
     1f8:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__vector_126>

000001fc <__trampolines_start>:
     1fc:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <udi_vendor_getsetting>
     200:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_read>
     204:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <main_vendor_int_in_received>
     208:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <main_vendor_int_out_received>
     20c:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <_write>
     210:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <usart_serial_putchar>
     214:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <usart_serial_getchar>
     218:	0c 94 32 18 	jmp	0x3064	; 0x3064 <udi_vendor_setup>
     21c:	0c 94 1f 18 	jmp	0x303e	; 0x303e <udi_vendor_disable>
     220:	0c 94 26 18 	jmp	0x304c	; 0x304c <udi_vendor_enable>
     224:	0c 94 98 18 	jmp	0x3130	; 0x3130 <udc_valid_address>

00000228 <__trampolines_end>:
     228:	1d 03       	fmul	r17, r21
     22a:	ed 01       	movw	r28, r26
     22c:	dc fd       	.word	0xfddc	; ????
     22e:	cc f5       	brge	.+114    	; 0x2a2 <usart_serial_getchar+0x2>
     230:	bc e5       	ldi	r27, 0x5C	; 92
     232:	ac c5       	rjmp	.+2904   	; 0xd8c <cpu_irq_save+0x4>
     234:	a8 6e       	ori	r26, 0xE8	; 232

00000236 <baudctrl_2mhz>:
     236:	bc e5 ac c5 9c 85 96 03 92 c1 91 21 90 96           ...........!..

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df e5       	ldi	r29, 0x5F	; 95
     24e:	de bf       	out	0x3e, r29	; 62
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0c bf       	out	0x3c, r16	; 60

00000254 <__do_copy_data>:
     254:	11 e2       	ldi	r17, 0x21	; 33
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b0 e2       	ldi	r27, 0x20	; 32
     25a:	ee ec       	ldi	r30, 0xCE	; 206
     25c:	f0 e5       	ldi	r31, 0x50	; 80
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	0b bf       	out	0x3b, r16	; 59
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
     264:	07 90       	elpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a2 33       	cpi	r26, 0x32	; 50
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
     26e:	24 e2       	ldi	r18, 0x24	; 36
     270:	a2 e3       	ldi	r26, 0x32	; 50
     272:	b1 e2       	ldi	r27, 0x21	; 33
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a2 39       	cpi	r26, 0x92	; 146
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 e7 22 	call	0x45ce	; 0x45ce <main>
     282:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     28a:	04 c0       	rjmp	.+8      	; 0x294 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     28c:	61 50       	subi	r22, 0x01	; 1
     28e:	71 09       	sbc	r23, r1
     290:	81 09       	sbc	r24, r1
     292:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     294:	61 15       	cp	r22, r1
     296:	71 05       	cpc	r23, r1
     298:	81 05       	cpc	r24, r1
     29a:	91 05       	cpc	r25, r1
     29c:	b9 f7       	brne	.-18     	; 0x28c <__portable_avr_delay_cycles+0x2>
     29e:	08 95       	ret

000002a0 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     2a6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <usart_getchar>
     2aa:	88 83       	st	Y, r24
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     2b2:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <usart_putchar>

000002b6 <main_vendor_int_in_received>:
void main_vendor_int_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
	UNUSED(nb_transfered);
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
     2b6:	81 11       	cpse	r24, r1
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <main_vendor_int_in_received+0x14>
		return; // Transfer aborted, then stop loopback
	}
	// Wait a full buffer
	udi_vendor_interrupt_out_run(main_buf_loopback,	sizeof(main_buf_loopback), main_vendor_int_out_received);
     2ba:	46 e6       	ldi	r20, 0x66	; 102
     2bc:	51 e0       	ldi	r21, 0x01	; 1
     2be:	6c e0       	ldi	r22, 0x0C	; 12
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	82 e3       	ldi	r24, 0x32	; 50
     2c4:	91 e2       	ldi	r25, 0x21	; 33
     2c6:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <udi_vendor_interrupt_out_run>
     2ca:	08 95       	ret

000002cc <main_vendor_int_out_received>:

void main_vendor_int_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
     2cc:	81 11       	cpse	r24, r1
     2ce:	06 c0       	rjmp	.+12     	; 0x2dc <main_vendor_int_out_received+0x10>
		return; // Transfer aborted, then stop loopback
	}
	// Send on IN endpoint the data received on endpoint OUT
	udi_vendor_interrupt_in_run(main_buf_answer, nb_transfered,	main_vendor_int_in_received);
     2d0:	4b e5       	ldi	r20, 0x5B	; 91
     2d2:	51 e0       	ldi	r21, 0x01	; 1
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e2       	ldi	r25, 0x20	; 32
     2d8:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <udi_vendor_interrupt_in_run>
     2dc:	08 95       	ret

000002de <main_suspend_action>:
		printf("%02X %02X\r\n", main_buf_answer[0], main_buf_answer[1]);
	}
}

void main_suspend_action(void)
{
     2de:	08 95       	ret

000002e0 <main_resume_action>:
	;
}

void main_resume_action(void)
{
     2e0:	08 95       	ret

000002e2 <main_sof_action>:
	;
}

void main_sof_action(void)
{
	if (!main_b_vendor_enable)
     2e2:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <main_b_vendor_enable>
     2e6:	08 95       	ret

000002e8 <main_vendor_enable>:
		return;
}

bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <main_b_vendor_enable>
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
		return; // Transfer aborted, then stop loopback
	}
	// Wait a full buffer
	udi_vendor_interrupt_out_run(main_buf_loopback,	sizeof(main_buf_loopback), main_vendor_int_out_received);
     2ee:	46 e6       	ldi	r20, 0x66	; 102
     2f0:	51 e0       	ldi	r21, 0x01	; 1
     2f2:	6c e0       	ldi	r22, 0x0C	; 12
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	82 e3       	ldi	r24, 0x32	; 50
     2f8:	91 e2       	ldi	r25, 0x21	; 33
     2fa:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <udi_vendor_interrupt_out_run>
bool main_vendor_enable(void)
{
	main_b_vendor_enable = true;
	main_vendor_int_in_received(UDD_EP_TRANSFER_OK, 0, 0);
	return true;
}
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	08 95       	ret

00000302 <main_vendor_disable>:

void main_vendor_disable(void)
{
	main_b_vendor_enable = false;
     302:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <main_b_vendor_enable>
     306:	08 95       	ret

00000308 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
	udd_g_ctrlreq.payload = main_buf_loopback;
     308:	82 e3       	ldi	r24, 0x32	; 50
     30a:	91 e2       	ldi	r25, 0x21	; 33
     30c:	80 93 80 24 	sts	0x2480, r24	; 0x802480 <udd_g_ctrlreq+0x8>
     310:	90 93 81 24 	sts	0x2481, r25	; 0x802481 <udd_g_ctrlreq+0x9>
	udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(main_buf_loopback));
     314:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
     318:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
     31c:	8d 30       	cpi	r24, 0x0D	; 13
     31e:	91 05       	cpc	r25, r1
     320:	10 f0       	brcs	.+4      	; 0x326 <main_setup_out_received+0x1e>
     322:	8c e0       	ldi	r24, 0x0C	; 12
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	80 93 82 24 	sts	0x2482, r24	; 0x802482 <udd_g_ctrlreq+0xa>
     32a:	90 93 83 24 	sts	0x2483, r25	; 0x802483 <udd_g_ctrlreq+0xb>
	return true;
}
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	08 95       	ret

00000332 <main_setup_in_received>:

bool main_setup_in_received(void)
{
	udd_g_ctrlreq.payload = main_buf_loopback;
     332:	82 e3       	ldi	r24, 0x32	; 50
     334:	91 e2       	ldi	r25, 0x21	; 33
     336:	80 93 80 24 	sts	0x2480, r24	; 0x802480 <udd_g_ctrlreq+0x8>
     33a:	90 93 81 24 	sts	0x2481, r25	; 0x802481 <udd_g_ctrlreq+0x9>
	udd_g_ctrlreq.payload_size = min( udd_g_ctrlreq.req.wLength, sizeof(main_buf_loopback) );
     33e:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
     342:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
     346:	8d 30       	cpi	r24, 0x0D	; 13
     348:	91 05       	cpc	r25, r1
     34a:	10 f0       	brcs	.+4      	; 0x350 <main_setup_in_received+0x1e>
     34c:	8c e0       	ldi	r24, 0x0C	; 12
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	80 93 82 24 	sts	0x2482, r24	; 0x802482 <udd_g_ctrlreq+0xa>
     354:	90 93 83 24 	sts	0x2483, r25	; 0x802483 <udd_g_ctrlreq+0xb>
	return true;
}
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	08 95       	ret

0000035c <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	09 f4       	brne	.+2      	; 0x362 <sysclk_enable_peripheral_clock+0x6>
     360:	b4 c0       	rjmp	.+360    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     362:	80 3c       	cpi	r24, 0xC0	; 192
     364:	91 05       	cpc	r25, r1
     366:	11 f4       	brne	.+4      	; 0x36c <sysclk_enable_peripheral_clock+0x10>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     368:	60 e1       	ldi	r22, 0x10	; 16
     36a:	05 c0       	rjmp	.+10     	; 0x376 <sysclk_enable_peripheral_clock+0x1a>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     36c:	80 38       	cpi	r24, 0x80	; 128
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	92 07       	cpc	r25, r18
     372:	19 f4       	brne	.+6      	; 0x37a <sysclk_enable_peripheral_clock+0x1e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     374:	62 e0       	ldi	r22, 0x02	; 2
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	a6 c0       	rjmp	.+332    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     37a:	81 15       	cp	r24, r1
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	92 07       	cpc	r25, r18
     380:	11 f4       	brne	.+4      	; 0x386 <sysclk_enable_peripheral_clock+0x2a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	f8 cf       	rjmp	.-16     	; 0x376 <sysclk_enable_peripheral_clock+0x1a>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     386:	80 38       	cpi	r24, 0x80	; 128
     388:	23 e0       	ldi	r18, 0x03	; 3
     38a:	92 07       	cpc	r25, r18
     38c:	11 f4       	brne	.+4      	; 0x392 <sysclk_enable_peripheral_clock+0x36>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <sysclk_enable_peripheral_clock+0x4c>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     392:	80 39       	cpi	r24, 0x90	; 144
     394:	23 e0       	ldi	r18, 0x03	; 3
     396:	92 07       	cpc	r25, r18
     398:	11 f4       	brne	.+4      	; 0x39e <sysclk_enable_peripheral_clock+0x42>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	12 c0       	rjmp	.+36     	; 0x3c2 <sysclk_enable_peripheral_clock+0x66>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     39e:	81 15       	cp	r24, r1
     3a0:	22 e0       	ldi	r18, 0x02	; 2
     3a2:	92 07       	cpc	r25, r18
     3a4:	19 f4       	brne	.+6      	; 0x3ac <sysclk_enable_peripheral_clock+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	8d c0       	rjmp	.+282    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     3ac:	80 34       	cpi	r24, 0x40	; 64
     3ae:	22 e0       	ldi	r18, 0x02	; 2
     3b0:	92 07       	cpc	r25, r18
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <sysclk_enable_peripheral_clock+0x5c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <sysclk_enable_peripheral_clock+0x66>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     3b8:	80 32       	cpi	r24, 0x20	; 32
     3ba:	23 e0       	ldi	r18, 0x03	; 3
     3bc:	92 07       	cpc	r25, r18
     3be:	19 f4       	brne	.+6      	; 0x3c6 <sysclk_enable_peripheral_clock+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     3c0:	64 e0       	ldi	r22, 0x04	; 4
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	80 c0       	rjmp	.+256    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     3c6:	81 15       	cp	r24, r1
     3c8:	28 e0       	ldi	r18, 0x08	; 8
     3ca:	92 07       	cpc	r25, r18
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <sysclk_enable_peripheral_clock+0x76>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	73 c0       	rjmp	.+230    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     3d2:	81 15       	cp	r24, r1
     3d4:	29 e0       	ldi	r18, 0x09	; 9
     3d6:	92 07       	cpc	r25, r18
     3d8:	11 f4       	brne	.+4      	; 0x3de <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	66 c0       	rjmp	.+204    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     3de:	81 15       	cp	r24, r1
     3e0:	2a e0       	ldi	r18, 0x0A	; 10
     3e2:	92 07       	cpc	r25, r18
     3e4:	11 f4       	brne	.+4      	; 0x3ea <sysclk_enable_peripheral_clock+0x8e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	6d c0       	rjmp	.+218    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     3ea:	81 15       	cp	r24, r1
     3ec:	2b e0       	ldi	r18, 0x0B	; 11
     3ee:	92 07       	cpc	r25, r18
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <sysclk_enable_peripheral_clock+0x9a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	4d c0       	rjmp	.+154    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     3f6:	80 34       	cpi	r24, 0x40	; 64
     3f8:	28 e0       	ldi	r18, 0x08	; 8
     3fa:	92 07       	cpc	r25, r18
     3fc:	11 f4       	brne	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     3fe:	62 e0       	ldi	r22, 0x02	; 2
     400:	5b c0       	rjmp	.+182    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     402:	80 34       	cpi	r24, 0x40	; 64
     404:	29 e0       	ldi	r18, 0x09	; 9
     406:	92 07       	cpc	r25, r18
     408:	11 f4       	brne	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	4e c0       	rjmp	.+156    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     40e:	80 34       	cpi	r24, 0x40	; 64
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	92 07       	cpc	r25, r18
     414:	11 f4       	brne	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	55 c0       	rjmp	.+170    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     41a:	80 39       	cpi	r24, 0x90	; 144
     41c:	28 e0       	ldi	r18, 0x08	; 8
     41e:	92 07       	cpc	r25, r18
     420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     422:	64 e0       	ldi	r22, 0x04	; 4
     424:	49 c0       	rjmp	.+146    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     426:	80 39       	cpi	r24, 0x90	; 144
     428:	29 e0       	ldi	r18, 0x09	; 9
     42a:	92 07       	cpc	r25, r18
     42c:	11 f4       	brne	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     42e:	64 e0       	ldi	r22, 0x04	; 4
     430:	3c c0       	rjmp	.+120    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     432:	80 39       	cpi	r24, 0x90	; 144
     434:	2a e0       	ldi	r18, 0x0A	; 10
     436:	92 07       	cpc	r25, r18
     438:	11 f4       	brne	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     43a:	64 e0       	ldi	r22, 0x04	; 4
     43c:	43 c0       	rjmp	.+134    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     43e:	80 39       	cpi	r24, 0x90	; 144
     440:	2b e0       	ldi	r18, 0x0B	; 11
     442:	92 07       	cpc	r25, r18
     444:	11 f4       	brne	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	23 c0       	rjmp	.+70     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     44a:	80 3c       	cpi	r24, 0xC0	; 192
     44c:	28 e0       	ldi	r18, 0x08	; 8
     44e:	92 07       	cpc	r25, r18
     450:	11 f4       	brne	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     452:	68 e0       	ldi	r22, 0x08	; 8
     454:	31 c0       	rjmp	.+98     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     456:	80 3c       	cpi	r24, 0xC0	; 192
     458:	29 e0       	ldi	r18, 0x09	; 9
     45a:	92 07       	cpc	r25, r18
     45c:	11 f4       	brne	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     45e:	68 e0       	ldi	r22, 0x08	; 8
     460:	24 c0       	rjmp	.+72     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     462:	80 3a       	cpi	r24, 0xA0	; 160
     464:	28 e0       	ldi	r18, 0x08	; 8
     466:	92 07       	cpc	r25, r18
     468:	11 f4       	brne	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     46a:	60 e1       	ldi	r22, 0x10	; 16
     46c:	25 c0       	rjmp	.+74     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     46e:	80 3a       	cpi	r24, 0xA0	; 160
     470:	29 e0       	ldi	r18, 0x09	; 9
     472:	92 07       	cpc	r25, r18
     474:	11 f4       	brne	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     476:	60 e1       	ldi	r22, 0x10	; 16
     478:	18 c0       	rjmp	.+48     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     47a:	80 3a       	cpi	r24, 0xA0	; 160
     47c:	2a e0       	ldi	r18, 0x0A	; 10
     47e:	92 07       	cpc	r25, r18
     480:	11 f4       	brne	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     482:	60 e1       	ldi	r22, 0x10	; 16
     484:	1f c0       	rjmp	.+62     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     486:	80 3a       	cpi	r24, 0xA0	; 160
     488:	2b e0       	ldi	r18, 0x0B	; 11
     48a:	92 07       	cpc	r25, r18
     48c:	19 f4       	brne	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     48e:	60 e1       	ldi	r22, 0x10	; 16
     490:	86 e0       	ldi	r24, 0x06	; 6
     492:	19 c0       	rjmp	.+50     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     494:	80 3b       	cpi	r24, 0xB0	; 176
     496:	28 e0       	ldi	r18, 0x08	; 8
     498:	92 07       	cpc	r25, r18
     49a:	11 f4       	brne	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     49c:	60 e2       	ldi	r22, 0x20	; 32
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     4a0:	80 3b       	cpi	r24, 0xB0	; 176
     4a2:	29 e0       	ldi	r18, 0x09	; 9
     4a4:	92 07       	cpc	r25, r18
     4a6:	19 f4       	brne	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     4a8:	60 e2       	ldi	r22, 0x20	; 32
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     4ae:	80 38       	cpi	r24, 0x80	; 128
     4b0:	24 e0       	ldi	r18, 0x04	; 4
     4b2:	92 07       	cpc	r25, r18
     4b4:	19 f4       	brne	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     4b6:	60 e4       	ldi	r22, 0x40	; 64
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     4bc:	80 3a       	cpi	r24, 0xA0	; 160
     4be:	94 40       	sbci	r25, 0x04	; 4
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     4c2:	60 e4       	ldi	r22, 0x40	; 64
     4c4:	85 e0       	ldi	r24, 0x05	; 5
     4c6:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <sysclk_enable_module>
     4ca:	08 95       	ret

000004cc <usart_putchar>:
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4cc:	fc 01       	movw	r30, r24
     4ce:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
	while (usart_data_register_is_empty(usart) == false) {
     4d0:	25 ff       	sbrs	r18, 5
     4d2:	fc cf       	rjmp	.-8      	; 0x4cc <usart_putchar>
	}
	
	(usart)->DATA = c;
     4d4:	60 83       	st	Z, r22
	return STATUS_OK;
}
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	08 95       	ret

000004dc <usart_getchar>:
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
     4dc:	fc 01       	movw	r30, r24
     4de:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \return The received data.
 */
uint8_t usart_getchar(USART_t *usart)
{
	while (usart_rx_is_complete(usart) == false) {
     4e0:	27 ff       	sbrs	r18, 7
     4e2:	fc cf       	rjmp	.-8      	; 0x4dc <usart_getchar>
	}
	
	return ((uint8_t)(usart)->DATA);
     4e4:	80 81       	ld	r24, Z
}
     4e6:	08 95       	ret

000004e8 <usart_set_bsel_bscale_value>:
 * \param bscale Calculated BSEL value.
 *
 */
void usart_set_bsel_bscale_value(USART_t *usart, uint16_t bsel, uint8_t bscale)
{
	(usart)->BAUDCTRLA = (uint8_t)(bsel);
     4e8:	fc 01       	movw	r30, r24
     4ea:	66 83       	std	Z+6, r22	; 0x06
	(usart)->BAUDCTRLB = (uint8_t)(((bsel >> 8) & 0X0F) | (bscale << 4));
     4ec:	7f 70       	andi	r23, 0x0F	; 15
     4ee:	42 95       	swap	r20
     4f0:	40 7f       	andi	r20, 0xF0	; 240
     4f2:	47 2b       	or	r20, r23
     4f4:	47 83       	std	Z+7, r20	; 0x07
     4f6:	08 95       	ret

000004f8 <usart_set_baudrate_precalculated>:
 * \param cpu_hz The CPU frequency.
 *
 */
void usart_set_baudrate_precalculated(USART_t *usart, uint32_t baud,
		uint32_t cpu_hz)
{
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	dc 01       	movw	r26, r24
 * \return The baudrate offset in PROGMEM table
 * \retval USART_BAUD_UNDEFINED for baudrates not in lookup table
 */
static uint8_t usart_get_baud_offset(uint32_t baud)
{
	switch (baud) {
     4fe:	40 38       	cpi	r20, 0x80	; 128
     500:	85 e2       	ldi	r24, 0x25	; 37
     502:	58 07       	cpc	r21, r24
     504:	61 05       	cpc	r22, r1
     506:	71 05       	cpc	r23, r1
     508:	51 f1       	breq	.+84     	; 0x55e <usart_set_baudrate_precalculated+0x66>
     50a:	90 f4       	brcc	.+36     	; 0x530 <usart_set_baudrate_precalculated+0x38>
     50c:	40 36       	cpi	r20, 0x60	; 96
     50e:	89 e0       	ldi	r24, 0x09	; 9
     510:	58 07       	cpc	r21, r24
     512:	61 05       	cpc	r22, r1
     514:	71 05       	cpc	r23, r1
     516:	f9 f0       	breq	.+62     	; 0x556 <usart_set_baudrate_precalculated+0x5e>
     518:	40 3c       	cpi	r20, 0xC0	; 192
     51a:	82 e1       	ldi	r24, 0x12	; 18
     51c:	58 07       	cpc	r21, r24
     51e:	61 05       	cpc	r22, r1
     520:	71 05       	cpc	r23, r1
     522:	d9 f0       	breq	.+54     	; 0x55a <usart_set_baudrate_precalculated+0x62>
     524:	40 3b       	cpi	r20, 0xB0	; 176
     526:	54 40       	sbci	r21, 0x04	; 4
     528:	61 05       	cpc	r22, r1
     52a:	71 05       	cpc	r23, r1
     52c:	f1 f4       	brne	.+60     	; 0x56a <usart_set_baudrate_precalculated+0x72>
     52e:	1f c0       	rjmp	.+62     	; 0x56e <usart_set_baudrate_precalculated+0x76>
     530:	41 15       	cp	r20, r1
     532:	86 e9       	ldi	r24, 0x96	; 150
     534:	58 07       	cpc	r21, r24
     536:	61 05       	cpc	r22, r1
     538:	71 05       	cpc	r23, r1
     53a:	99 f0       	breq	.+38     	; 0x562 <usart_set_baudrate_precalculated+0x6a>
     53c:	41 15       	cp	r20, r1
     53e:	81 ee       	ldi	r24, 0xE1	; 225
     540:	58 07       	cpc	r21, r24
     542:	61 05       	cpc	r22, r1
     544:	71 05       	cpc	r23, r1
     546:	79 f0       	breq	.+30     	; 0x566 <usart_set_baudrate_precalculated+0x6e>
     548:	41 15       	cp	r20, r1
     54a:	5b 44       	sbci	r21, 0x4B	; 75
     54c:	61 05       	cpc	r22, r1
     54e:	71 05       	cpc	r23, r1
     550:	61 f4       	brne	.+24     	; 0x56a <usart_set_baudrate_precalculated+0x72>

	case 9600:
		return (uint8_t)USART_BAUD_9600;

	case 19200:
		return (uint8_t)USART_BAUD_19200;
     552:	94 e0       	ldi	r25, 0x04	; 4
     554:	0d c0       	rjmp	.+26     	; 0x570 <usart_set_baudrate_precalculated+0x78>
	switch (baud) {
	case 1200:
		return (uint8_t)USART_BAUD_1200;

	case 2400:
		return (uint8_t)USART_BAUD_2400;
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0b c0       	rjmp	.+22     	; 0x570 <usart_set_baudrate_precalculated+0x78>

	case 4800:
		return (uint8_t)USART_BAUD_4800;
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	09 c0       	rjmp	.+18     	; 0x570 <usart_set_baudrate_precalculated+0x78>

	case 9600:
		return (uint8_t)USART_BAUD_9600;
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	07 c0       	rjmp	.+14     	; 0x570 <usart_set_baudrate_precalculated+0x78>

	case 19200:
		return (uint8_t)USART_BAUD_19200;

	case 38400:
		return (uint8_t)USART_BAUD_38400;
     562:	95 e0       	ldi	r25, 0x05	; 5
     564:	05 c0       	rjmp	.+10     	; 0x570 <usart_set_baudrate_precalculated+0x78>

	case 57600:
		return (uint8_t)USART_BAUD_57600;
     566:	96 e0       	ldi	r25, 0x06	; 6
     568:	03 c0       	rjmp	.+6      	; 0x570 <usart_set_baudrate_precalculated+0x78>

	default:
		return (uint8_t)USART_BAUD_UNDEFINED;
     56a:	9f ef       	ldi	r25, 0xFF	; 255
     56c:	01 c0       	rjmp	.+2      	; 0x570 <usart_set_baudrate_precalculated+0x78>
 */
static uint8_t usart_get_baud_offset(uint32_t baud)
{
	switch (baud) {
	case 1200:
		return (uint8_t)USART_BAUD_1200;
     56e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t baud_offset;
	uint16_t baudctrl = 0;

	baud_offset = usart_get_baud_offset(baud);

	if (cpu_hz == 2000000UL) {
     570:	00 38       	cpi	r16, 0x80	; 128
     572:	84 e8       	ldi	r24, 0x84	; 132
     574:	18 07       	cpc	r17, r24
     576:	8e e1       	ldi	r24, 0x1E	; 30
     578:	28 07       	cpc	r18, r24
     57a:	31 05       	cpc	r19, r1
     57c:	39 f4       	brne	.+14     	; 0x58c <usart_set_baudrate_precalculated+0x94>
		baudctrl = PROGMEM_READ_WORD(baudctrl_2mhz + baud_offset);
     57e:	e9 2f       	mov	r30, r25
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	ee 0f       	add	r30, r30
     584:	ff 1f       	adc	r31, r31
     586:	ea 5c       	subi	r30, 0xCA	; 202
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	0b c0       	rjmp	.+22     	; 0x5a2 <usart_set_baudrate_precalculated+0xaa>
	} else if (cpu_hz == 32000000UL) {
     58c:	01 15       	cp	r16, r1
     58e:	18 44       	sbci	r17, 0x48	; 72
     590:	28 4e       	sbci	r18, 0xE8	; 232
     592:	31 40       	sbci	r19, 0x01	; 1
     594:	51 f4       	brne	.+20     	; 0x5aa <usart_set_baudrate_precalculated+0xb2>
		baudctrl = PROGMEM_READ_WORD(baudctrl_32mhz + baud_offset);
     596:	e9 2f       	mov	r30, r25
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	e8 5d       	subi	r30, 0xD8	; 216
     5a0:	fd 4f       	sbci	r31, 0xFD	; 253
     5a2:	25 91       	lpm	r18, Z+
     5a4:	34 91       	lpm	r19, Z
     5a6:	83 2f       	mov	r24, r19
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <usart_set_baudrate_precalculated+0xb6>
 */
void usart_set_baudrate_precalculated(USART_t *usart, uint32_t baud,
		uint32_t cpu_hz)
{
	uint8_t baud_offset;
	uint16_t baudctrl = 0;
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
		/* Error, system clock speed or USART baud rate is not supported
		 * by the look-up table */
		Assert(false);
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
     5ae:	9f 3f       	cpi	r25, 0xFF	; 255
     5b0:	29 f0       	breq	.+10     	; 0x5bc <usart_set_baudrate_precalculated+0xc4>
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
     5b2:	17 96       	adiw	r26, 0x07	; 7
     5b4:	2c 93       	st	X, r18
     5b6:	17 97       	sbiw	r26, 0x07	; 7
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
     5b8:	16 96       	adiw	r26, 0x06	; 6
     5ba:	8c 93       	st	X, r24
	}
}
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	ec 01       	movw	r28, r24
     5dc:	6a 01       	movw	r12, r20
     5de:	7b 01       	movw	r14, r22
     5e0:	48 01       	movw	r8, r16
     5e2:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     5e4:	b9 01       	movw	r22, r18
     5e6:	a8 01       	movw	r20, r16
     5e8:	e3 e0       	ldi	r30, 0x03	; 3
     5ea:	76 95       	lsr	r23
     5ec:	67 95       	ror	r22
     5ee:	57 95       	ror	r21
     5f0:	47 95       	ror	r20
     5f2:	ea 95       	dec	r30
     5f4:	d1 f7       	brne	.-12     	; 0x5ea <usart_set_baudrate+0x28>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     5f6:	d9 01       	movw	r26, r18
     5f8:	c8 01       	movw	r24, r16
     5fa:	f6 e1       	ldi	r31, 0x16	; 22
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	fa 95       	dec	r31
     606:	d1 f7       	brne	.-12     	; 0x5fc <usart_set_baudrate+0x3a>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     608:	2c 81       	ldd	r18, Y+4	; 0x04
     60a:	22 fd       	sbrc	r18, 2
     60c:	08 c0       	rjmp	.+16     	; 0x61e <usart_set_baudrate+0x5c>
		max_rate /= 2;
     60e:	76 95       	lsr	r23
     610:	67 95       	ror	r22
     612:	57 95       	ror	r21
     614:	47 95       	ror	r20
		min_rate /= 2;
     616:	b6 95       	lsr	r27
     618:	a7 95       	ror	r26
     61a:	97 95       	ror	r25
     61c:	87 95       	ror	r24
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     61e:	4c 15       	cp	r20, r12
     620:	5d 05       	cpc	r21, r13
     622:	6e 05       	cpc	r22, r14
     624:	7f 05       	cpc	r23, r15
     626:	08 f4       	brcc	.+2      	; 0x62a <usart_set_baudrate+0x68>
     628:	98 c0       	rjmp	.+304    	; 0x75a <usart_set_baudrate+0x198>
     62a:	c8 16       	cp	r12, r24
     62c:	d9 06       	cpc	r13, r25
     62e:	ea 06       	cpc	r14, r26
     630:	fb 06       	cpc	r15, r27
     632:	08 f4       	brcc	.+2      	; 0x636 <usart_set_baudrate+0x74>
     634:	92 c0       	rjmp	.+292    	; 0x75a <usart_set_baudrate+0x198>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     636:	8c 81       	ldd	r24, Y+4	; 0x04
     638:	82 fd       	sbrc	r24, 2
     63a:	04 c0       	rjmp	.+8      	; 0x644 <usart_set_baudrate+0x82>
		baud *= 2;
     63c:	cc 0c       	add	r12, r12
     63e:	dd 1c       	adc	r13, r13
     640:	ee 1c       	adc	r14, r14
     642:	ff 1c       	adc	r15, r15
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     644:	c5 01       	movw	r24, r10
     646:	b4 01       	movw	r22, r8
     648:	a7 01       	movw	r20, r14
     64a:	96 01       	movw	r18, r12
     64c:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
     650:	19 ef       	ldi	r17, 0xF9	; 249
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a0 e0       	ldi	r26, 0x00	; 0
     658:	b0 e0       	ldi	r27, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     65a:	28 17       	cp	r18, r24
     65c:	39 07       	cpc	r19, r25
     65e:	4a 07       	cpc	r20, r26
     660:	5b 07       	cpc	r21, r27
     662:	58 f0       	brcs	.+22     	; 0x67a <usart_set_baudrate+0xb8>
			break;
		}

		limit <<= 1;
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	aa 1f       	adc	r26, r26
     66a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     66c:	1d 3f       	cpi	r17, 0xFD	; 253
     66e:	0c f4       	brge	.+2      	; 0x672 <usart_set_baudrate+0xb0>
			limit |= 1;
     670:	81 60       	ori	r24, 0x01	; 1
     672:	1f 5f       	subi	r17, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     674:	17 30       	cpi	r17, 0x07	; 7
     676:	89 f7       	brne	.-30     	; 0x65a <usart_set_baudrate+0x98>
     678:	49 c0       	rjmp	.+146    	; 0x70c <usart_set_baudrate+0x14a>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     67a:	17 ff       	sbrs	r17, 7
     67c:	47 c0       	rjmp	.+142    	; 0x70c <usart_set_baudrate+0x14a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     67e:	d7 01       	movw	r26, r14
     680:	c6 01       	movw	r24, r12
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	aa 1f       	adc	r26, r26
     68a:	bb 1f       	adc	r27, r27
     68c:	fa 95       	dec	r31
     68e:	d1 f7       	brne	.-12     	; 0x684 <usart_set_baudrate+0xc2>
     690:	88 1a       	sub	r8, r24
     692:	99 0a       	sbc	r9, r25
     694:	aa 0a       	sbc	r10, r26
     696:	bb 0a       	sbc	r11, r27
     698:	81 2f       	mov	r24, r17
     69a:	01 2e       	mov	r0, r17
     69c:	00 0c       	add	r0, r0
     69e:	99 0b       	sbc	r25, r25
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     6a0:	1e 3f       	cpi	r17, 0xFE	; 254
     6a2:	dc f4       	brge	.+54     	; 0x6da <usart_set_baudrate+0x118>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     6a4:	2d ef       	ldi	r18, 0xFD	; 253
     6a6:	3f ef       	ldi	r19, 0xFF	; 255
     6a8:	a9 01       	movw	r20, r18
     6aa:	48 1b       	sub	r20, r24
     6ac:	59 0b       	sbc	r21, r25
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <usart_set_baudrate+0xf6>
     6b0:	88 0c       	add	r8, r8
     6b2:	99 1c       	adc	r9, r9
     6b4:	aa 1c       	adc	r10, r10
     6b6:	bb 1c       	adc	r11, r11
     6b8:	4a 95       	dec	r20
     6ba:	d2 f7       	brpl	.-12     	; 0x6b0 <usart_set_baudrate+0xee>
     6bc:	d7 01       	movw	r26, r14
     6be:	c6 01       	movw	r24, r12
     6c0:	b6 95       	lsr	r27
     6c2:	a7 95       	ror	r26
     6c4:	97 95       	ror	r25
     6c6:	87 95       	ror	r24
     6c8:	bc 01       	movw	r22, r24
     6ca:	cd 01       	movw	r24, r26
     6cc:	68 0d       	add	r22, r8
     6ce:	79 1d       	adc	r23, r9
     6d0:	8a 1d       	adc	r24, r10
     6d2:	9b 1d       	adc	r25, r11
     6d4:	a7 01       	movw	r20, r14
     6d6:	96 01       	movw	r18, r12
     6d8:	16 c0       	rjmp	.+44     	; 0x706 <usart_set_baudrate+0x144>
		} else {
			baud <<= exp + 3;
     6da:	03 96       	adiw	r24, 0x03	; 3
     6dc:	a7 01       	movw	r20, r14
     6de:	96 01       	movw	r18, r12
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <usart_set_baudrate+0x128>
     6e2:	22 0f       	add	r18, r18
     6e4:	33 1f       	adc	r19, r19
     6e6:	44 1f       	adc	r20, r20
     6e8:	55 1f       	adc	r21, r21
     6ea:	8a 95       	dec	r24
     6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <usart_set_baudrate+0x120>
			div = (cpu_hz + baud / 2) / baud;
     6ee:	da 01       	movw	r26, r20
     6f0:	c9 01       	movw	r24, r18
     6f2:	b6 95       	lsr	r27
     6f4:	a7 95       	ror	r26
     6f6:	97 95       	ror	r25
     6f8:	87 95       	ror	r24
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	68 0d       	add	r22, r8
     700:	79 1d       	adc	r23, r9
     702:	8a 1d       	adc	r24, r10
     704:	9b 1d       	adc	r25, r11
     706:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__udivmodsi4>
     70a:	1d c0       	rjmp	.+58     	; 0x746 <usart_set_baudrate+0x184>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	81 0f       	add	r24, r17
     710:	a7 01       	movw	r20, r14
     712:	96 01       	movw	r18, r12
     714:	04 c0       	rjmp	.+8      	; 0x71e <usart_set_baudrate+0x15c>
     716:	22 0f       	add	r18, r18
     718:	33 1f       	adc	r19, r19
     71a:	44 1f       	adc	r20, r20
     71c:	55 1f       	adc	r21, r21
     71e:	8a 95       	dec	r24
     720:	d2 f7       	brpl	.-12     	; 0x716 <usart_set_baudrate+0x154>
		div = (cpu_hz + baud / 2) / baud - 1;
     722:	da 01       	movw	r26, r20
     724:	c9 01       	movw	r24, r18
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	68 0d       	add	r22, r8
     734:	79 1d       	adc	r23, r9
     736:	8a 1d       	adc	r24, r10
     738:	9b 1d       	adc	r25, r11
     73a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__udivmodsi4>
     73e:	21 50       	subi	r18, 0x01	; 1
     740:	31 09       	sbc	r19, r1
     742:	41 09       	sbc	r20, r1
     744:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     746:	93 2f       	mov	r25, r19
     748:	9f 70       	andi	r25, 0x0F	; 15
     74a:	81 2f       	mov	r24, r17
     74c:	82 95       	swap	r24
     74e:	80 7f       	andi	r24, 0xF0	; 240
     750:	89 2b       	or	r24, r25
     752:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     754:	2e 83       	std	Y+6, r18	; 0x06
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	01 c0       	rjmp	.+2      	; 0x75c <usart_set_baudrate+0x19a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     75a:	80 e0       	ldi	r24, 0x00	; 0

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	9f 90       	pop	r9
     772:	8f 90       	pop	r8
     774:	08 95       	ret

00000776 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ec 01       	movw	r28, r24
     780:	8b 01       	movw	r16, r22
	bool result;
	sysclk_enable_peripheral_clock(usart);
     782:	0e 94 ae 01 	call	0x35c	; 0x35c <sysclk_enable_peripheral_clock>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     786:	8d 81       	ldd	r24, Y+5	; 0x05
     788:	8f 73       	andi	r24, 0x3F	; 63
     78a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     78c:	f8 01       	movw	r30, r16
     78e:	94 81       	ldd	r25, Z+4	; 0x04
     790:	85 81       	ldd	r24, Z+5	; 0x05
     792:	89 2b       	or	r24, r25
     794:	96 81       	ldd	r25, Z+6	; 0x06
     796:	91 11       	cpse	r25, r1
     798:	98 e0       	ldi	r25, 0x08	; 8
     79a:	89 2b       	or	r24, r25
     79c:	8d 83       	std	Y+5, r24	; 0x05
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     79e:	f8 01       	movw	r30, r16
     7a0:	40 81       	ld	r20, Z
     7a2:	51 81       	ldd	r21, Z+1	; 0x01
     7a4:	62 81       	ldd	r22, Z+2	; 0x02
     7a6:	73 81       	ldd	r23, Z+3	; 0x03
     7a8:	00 e0       	ldi	r16, 0x00	; 0
     7aa:	16 e3       	ldi	r17, 0x36	; 54
     7ac:	2e e6       	ldi	r18, 0x6E	; 110
     7ae:	31 e0       	ldi	r19, 0x01	; 1
     7b0:	ce 01       	movw	r24, r28
     7b2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	98 60       	ori	r25, 0x08	; 8
     7ba:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	90 61       	ori	r25, 0x10	; 16
     7c0:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
     7d6:	d9 01       	movw	r26, r18
     7d8:	c8 01       	movw	r24, r16
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     7da:	36 95       	lsr	r19
     7dc:	27 95       	ror	r18
     7de:	17 95       	ror	r17
     7e0:	07 95       	ror	r16
     7e2:	40 17       	cp	r20, r16
     7e4:	51 07       	cpc	r21, r17
     7e6:	62 07       	cpc	r22, r18
     7e8:	73 07       	cpc	r23, r19
     7ea:	68 f4       	brcc	.+26     	; 0x806 <usart_spi_set_baudrate+0x3a>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     7ec:	9a 01       	movw	r18, r20
     7ee:	ab 01       	movw	r20, r22
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	44 1f       	adc	r20, r20
     7f6:	55 1f       	adc	r21, r21
     7f8:	bc 01       	movw	r22, r24
     7fa:	cd 01       	movw	r24, r26
     7fc:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__udivmodsi4>
     800:	21 50       	subi	r18, 0x01	; 1
     802:	31 09       	sbc	r19, r1
     804:	02 c0       	rjmp	.+4      	; 0x80a <usart_spi_set_baudrate+0x3e>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     80a:	83 2f       	mov	r24, r19
     80c:	8f 70       	andi	r24, 0x0F	; 15
     80e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     810:	2e 83       	std	Y+6, r18	; 0x06
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	08 95       	ret

0000081c <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	1f 92       	push	r1
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	7c 01       	movw	r14, r24
     834:	6b 01       	movw	r12, r22
	ioport_pin_t sck_pin;
	bool invert_sck;

	sysclk_enable_peripheral_clock(usart);
     836:	0e 94 ae 01 	call	0x35c	; 0x35c <sysclk_enable_peripheral_clock>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     83a:	f7 01       	movw	r30, r14
     83c:	84 81       	ldd	r24, Z+4	; 0x04
     83e:	8f 7e       	andi	r24, 0xEF	; 239
     840:	84 83       	std	Z+4, r24	; 0x04

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     842:	f6 01       	movw	r30, r12
     844:	24 81       	ldd	r18, Z+4	; 0x04
     846:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     848:	f0 ea       	ldi	r31, 0xA0	; 160
     84a:	ef 16       	cp	r14, r31
     84c:	f8 e0       	ldi	r31, 0x08	; 8
     84e:	ff 06       	cpc	r15, r31
     850:	31 f4       	brne	.+12     	; 0x85e <usart_init_spi+0x42>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     852:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
     856:	84 fd       	sbrc	r24, 4
     858:	23 c0       	rjmp	.+70     	; 0x8a0 <usart_init_spi+0x84>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     85a:	11 e1       	ldi	r17, 0x11	; 17
     85c:	22 c0       	rjmp	.+68     	; 0x8a2 <usart_init_spi+0x86>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     85e:	80 eb       	ldi	r24, 0xB0	; 176
     860:	e8 16       	cp	r14, r24
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	f8 06       	cpc	r15, r24
     866:	e1 f0       	breq	.+56     	; 0x8a0 <usart_init_spi+0x84>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     868:	e0 ea       	ldi	r30, 0xA0	; 160
     86a:	ee 16       	cp	r14, r30
     86c:	e9 e0       	ldi	r30, 0x09	; 9
     86e:	fe 06       	cpc	r15, r30
     870:	31 f4       	brne	.+12     	; 0x87e <usart_init_spi+0x62>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     872:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
     876:	84 fd       	sbrc	r24, 4
     878:	7f c0       	rjmp	.+254    	; 0x978 <usart_init_spi+0x15c>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     87a:	19 e1       	ldi	r17, 0x19	; 25
     87c:	1e c0       	rjmp	.+60     	; 0x8ba <usart_init_spi+0x9e>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     87e:	f0 eb       	ldi	r31, 0xB0	; 176
     880:	ef 16       	cp	r14, r31
     882:	f9 e0       	ldi	r31, 0x09	; 9
     884:	ff 06       	cpc	r15, r31
     886:	09 f4       	brne	.+2      	; 0x88a <usart_init_spi+0x6e>
     888:	77 c0       	rjmp	.+238    	; 0x978 <usart_init_spi+0x15c>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     88a:	80 ea       	ldi	r24, 0xA0	; 160
     88c:	e8 16       	cp	r14, r24
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	f8 06       	cpc	r15, r24
     892:	39 f4       	brne	.+14     	; 0x8a2 <usart_init_spi+0x86>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     894:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
     898:	84 fd       	sbrc	r24, 4
     89a:	70 c0       	rjmp	.+224    	; 0x97c <usart_init_spi+0x160>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     89c:	11 e2       	ldi	r17, 0x21	; 33
     89e:	0d c0       	rjmp	.+26     	; 0x8ba <usart_init_spi+0x9e>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     8a0:	15 e1       	ldi	r17, 0x15	; 21
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     8a2:	e0 ea       	ldi	r30, 0xA0	; 160
     8a4:	ee 16       	cp	r14, r30
     8a6:	eb e0       	ldi	r30, 0x0B	; 11
     8a8:	fe 06       	cpc	r15, r30
     8aa:	39 f4       	brne	.+14     	; 0x8ba <usart_init_spi+0x9e>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     8ac:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
     8b0:	84 fd       	sbrc	r24, 4
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <usart_init_spi+0x9c>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     8b4:	19 e2       	ldi	r17, 0x29	; 41
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <usart_init_spi+0x9e>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     8b8:	1d e2       	ldi	r17, 0x2D	; 45
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     8ba:	e1 2f       	mov	r30, r17
     8bc:	e6 95       	lsr	r30
     8be:	e6 95       	lsr	r30
     8c0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     8c2:	80 e2       	ldi	r24, 0x20	; 32
     8c4:	e8 9f       	mul	r30, r24
     8c6:	f0 01       	movw	r30, r0
     8c8:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     8ca:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     8cc:	17 70       	andi	r17, 0x07	; 7
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	01 2e       	mov	r0, r17
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <usart_init_spi+0xbc>
     8d6:	88 0f       	add	r24, r24
     8d8:	0a 94       	dec	r0
     8da:	ea f7       	brpl	.-6      	; 0x8d6 <usart_init_spi+0xba>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     8dc:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     8de:	22 30       	cpi	r18, 0x02	; 2
     8e0:	10 f0       	brcs	.+4      	; 0x8e6 <usart_init_spi+0xca>
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <usart_init_spi+0xcc>
     8e6:	30 e4       	ldi	r19, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     8e8:	df 01       	movw	r26, r30
     8ea:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     8ec:	a1 0f       	add	r26, r17
     8ee:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8f0:	9f b7       	in	r25, 0x3f	; 63
     8f2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8f4:	f8 94       	cli
	return flags;
     8f6:	49 81       	ldd	r20, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     8f8:	2c 91       	ld	r18, X
     8fa:	27 70       	andi	r18, 0x07	; 7
     8fc:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     8fe:	9c 91       	ld	r25, X
     900:	93 2b       	or	r25, r19
     902:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     904:	4f bf       	out	0x3f, r20	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     906:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     908:	f7 01       	movw	r30, r14
     90a:	85 81       	ldd	r24, Z+5	; 0x05
     90c:	80 6c       	ori	r24, 0xC0	; 192
     90e:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     910:	f6 01       	movw	r30, r12
     912:	84 81       	ldd	r24, Z+4	; 0x04
     914:	8d 7f       	andi	r24, 0xFD	; 253
		usart->CTRLC |= USART_UCPHA_bm;
     916:	f7 01       	movw	r30, r14
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	19 f4       	brne	.+6      	; 0x922 <usart_init_spi+0x106>
		usart->CTRLC |= USART_UCPHA_bm;
     91c:	85 81       	ldd	r24, Z+5	; 0x05
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	02 c0       	rjmp	.+4      	; 0x926 <usart_init_spi+0x10a>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     922:	85 81       	ldd	r24, Z+5	; 0x05
     924:	8d 7f       	andi	r24, 0xFD	; 253
     926:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
     928:	f6 01       	movw	r30, r12
     92a:	85 81       	ldd	r24, Z+5	; 0x05
		(usart)->CTRLC |= USART_DORD_bm;
     92c:	f7 01       	movw	r30, r14
	if (opt->spimode == 1 || opt->spimode == 3) {
		usart->CTRLC |= USART_UCPHA_bm;
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
	}
	if (opt->data_order) {
     92e:	88 23       	and	r24, r24
     930:	19 f0       	breq	.+6      	; 0x938 <usart_init_spi+0x11c>
		(usart)->CTRLC |= USART_DORD_bm;
     932:	85 81       	ldd	r24, Z+5	; 0x05
     934:	84 60       	ori	r24, 0x04	; 4
     936:	02 c0       	rjmp	.+4      	; 0x93c <usart_init_spi+0x120>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     938:	85 81       	ldd	r24, Z+5	; 0x05
     93a:	8b 7f       	andi	r24, 0xFB	; 251
     93c:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     93e:	f6 01       	movw	r30, r12
     940:	40 81       	ld	r20, Z
     942:	51 81       	ldd	r21, Z+1	; 0x01
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	00 e0       	ldi	r16, 0x00	; 0
     94a:	16 e3       	ldi	r17, 0x36	; 54
     94c:	2e e6       	ldi	r18, 0x6E	; 110
     94e:	31 e0       	ldi	r19, 0x01	; 1
     950:	c7 01       	movw	r24, r14
     952:	0e 94 e6 03 	call	0x7cc	; 0x7cc <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     956:	f7 01       	movw	r30, r14
     958:	84 81       	ldd	r24, Z+4	; 0x04
     95a:	88 60       	ori	r24, 0x08	; 8
     95c:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     95e:	84 81       	ldd	r24, Z+4	; 0x04
     960:	80 61       	ori	r24, 0x10	; 16
     962:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	08 95       	ret
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     978:	1d e1       	ldi	r17, 0x1D	; 29
     97a:	9f cf       	rjmp	.-194    	; 0x8ba <usart_init_spi+0x9e>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     97c:	15 e2       	ldi	r17, 0x25	; 37
     97e:	9d cf       	rjmp	.-198    	; 0x8ba <usart_init_spi+0x9e>

00000980 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     984:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <transfer>
     988:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <transfer+0x1>
     98c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     98e:	83 ff       	sbrs	r24, 3
     990:	06 c0       	rjmp	.+12     	; 0x99e <twim_interrupt_handler+0x1e>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     992:	88 60       	ori	r24, 0x08	; 8
     994:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     99a:	86 ef       	ldi	r24, 0xF6	; 246
     99c:	7f c0       	rjmp	.+254    	; 0xa9c <twim_interrupt_handler+0x11c>
     99e:	98 2f       	mov	r25, r24
     9a0:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     9a2:	21 f0       	breq	.+8      	; 0x9ac <twim_interrupt_handler+0x2c>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	78 c0       	rjmp	.+240    	; 0xa9c <twim_interrupt_handler+0x11c>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     9ac:	86 ff       	sbrs	r24, 6
     9ae:	41 c0       	rjmp	.+130    	; 0xa32 <twim_interrupt_handler+0xb2>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     9b0:	a0 91 42 21 	lds	r26, 0x2142	; 0x802142 <transfer+0x2>
     9b4:	b0 91 43 21 	lds	r27, 0x2143	; 0x802143 <transfer+0x3>

	if (transfer.addr_count < pkg->addr_length) {
     9b8:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <transfer+0x4>
     9bc:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <transfer+0x5>
     9c0:	14 96       	adiw	r26, 0x04	; 4
     9c2:	2d 91       	ld	r18, X+
     9c4:	3c 91       	ld	r19, X
     9c6:	15 97       	sbiw	r26, 0x05	; 5
     9c8:	82 17       	cp	r24, r18
     9ca:	93 07       	cpc	r25, r19
     9cc:	64 f4       	brge	.+24     	; 0x9e6 <twim_interrupt_handler+0x66>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     9ce:	9c 01       	movw	r18, r24
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
     9d4:	20 93 44 21 	sts	0x2144, r18	; 0x802144 <transfer+0x4>
     9d8:	30 93 45 21 	sts	0x2145, r19	; 0x802145 <transfer+0x5>
     9dc:	a8 0f       	add	r26, r24
     9de:	b9 1f       	adc	r27, r25
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	8c 91       	ld	r24, X
     9e4:	22 c0       	rjmp	.+68     	; 0xa2a <twim_interrupt_handler+0xaa>

	} else if (transfer.data_count < pkg->length) {
     9e6:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <transfer+0x6>
     9ea:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <transfer+0x7>
     9ee:	18 96       	adiw	r26, 0x08	; 8
     9f0:	2d 91       	ld	r18, X+
     9f2:	3c 91       	ld	r19, X
     9f4:	19 97       	sbiw	r26, 0x09	; 9
     9f6:	82 17       	cp	r24, r18
     9f8:	93 07       	cpc	r25, r19
     9fa:	c8 f4       	brcc	.+50     	; 0xa2e <twim_interrupt_handler+0xae>

		if (transfer.read) {
     9fc:	20 91 48 21 	lds	r18, 0x2148	; 0x802148 <transfer+0x8>
     a00:	22 23       	and	r18, r18
     a02:	21 f0       	breq	.+8      	; 0xa0c <twim_interrupt_handler+0x8c>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     a04:	86 81       	ldd	r24, Z+6	; 0x06
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	86 83       	std	Z+6, r24	; 0x06
     a0a:	4a c0       	rjmp	.+148    	; 0xaa0 <twim_interrupt_handler+0x120>

		} else {
			const uint8_t * const data = pkg->buffer;
     a0c:	16 96       	adiw	r26, 0x06	; 6
     a0e:	2d 91       	ld	r18, X+
     a10:	3c 91       	ld	r19, X
     a12:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     a14:	ac 01       	movw	r20, r24
     a16:	4f 5f       	subi	r20, 0xFF	; 255
     a18:	5f 4f       	sbci	r21, 0xFF	; 255
     a1a:	40 93 46 21 	sts	0x2146, r20	; 0x802146 <transfer+0x6>
     a1e:	50 93 47 21 	sts	0x2147, r21	; 0x802147 <transfer+0x7>
     a22:	d9 01       	movw	r26, r18
     a24:	a8 0f       	add	r26, r24
     a26:	b9 1f       	adc	r27, r25
     a28:	8c 91       	ld	r24, X
     a2a:	87 83       	std	Z+7, r24	; 0x07
     a2c:	39 c0       	rjmp	.+114    	; 0xaa0 <twim_interrupt_handler+0x120>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	2c c0       	rjmp	.+88     	; 0xa8a <twim_interrupt_handler+0x10a>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     a32:	87 ff       	sbrs	r24, 7
     a34:	32 c0       	rjmp	.+100    	; 0xa9a <twim_interrupt_handler+0x11a>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     a36:	a0 91 42 21 	lds	r26, 0x2142	; 0x802142 <transfer+0x2>
     a3a:	b0 91 43 21 	lds	r27, 0x2143	; 0x802143 <transfer+0x3>

	if (transfer.data_count < pkg->length) {
     a3e:	80 91 46 21 	lds	r24, 0x2146	; 0x802146 <transfer+0x6>
     a42:	90 91 47 21 	lds	r25, 0x2147	; 0x802147 <transfer+0x7>
     a46:	18 96       	adiw	r26, 0x08	; 8
     a48:	2d 91       	ld	r18, X+
     a4a:	3c 91       	ld	r19, X
     a4c:	19 97       	sbiw	r26, 0x09	; 9
     a4e:	82 17       	cp	r24, r18
     a50:	93 07       	cpc	r25, r19
     a52:	f8 f4       	brcc	.+62     	; 0xa92 <twim_interrupt_handler+0x112>

		uint8_t * const data = pkg->buffer;
     a54:	16 96       	adiw	r26, 0x06	; 6
     a56:	6d 91       	ld	r22, X+
     a58:	7c 91       	ld	r23, X
     a5a:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
     a5c:	9c 01       	movw	r18, r24
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	20 93 46 21 	sts	0x2146, r18	; 0x802146 <transfer+0x6>
     a66:	30 93 47 21 	sts	0x2147, r19	; 0x802147 <transfer+0x7>
     a6a:	47 81       	ldd	r20, Z+7	; 0x07
     a6c:	eb 01       	movw	r28, r22
     a6e:	c8 0f       	add	r28, r24
     a70:	d9 1f       	adc	r29, r25
     a72:	48 83       	st	Y, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     a74:	18 96       	adiw	r26, 0x08	; 8
     a76:	8d 91       	ld	r24, X+
     a78:	9c 91       	ld	r25, X
     a7a:	19 97       	sbiw	r26, 0x09	; 9
     a7c:	28 17       	cp	r18, r24
     a7e:	39 07       	cpc	r19, r25
     a80:	18 f4       	brcc	.+6      	; 0xa88 <twim_interrupt_handler+0x108>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	83 83       	std	Z+3, r24	; 0x03
     a86:	0c c0       	rjmp	.+24     	; 0xaa0 <twim_interrupt_handler+0x120>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     a88:	87 e0       	ldi	r24, 0x07	; 7
     a8a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     a8c:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <transfer+0xa>
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <twim_interrupt_handler+0x120>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     a96:	89 ef       	ldi	r24, 0xF9	; 249
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <twim_interrupt_handler+0x11c>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     a9a:	8b ef       	ldi	r24, 0xFB	; 251
     a9c:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <transfer+0xa>
	}
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	0b b6       	in	r0, 0x3b	; 59
     ab2:	0f 92       	push	r0
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
     acc:	0e 94 c0 04 	call	0x980	; 0x980 <twim_interrupt_handler>
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0b be       	out	0x3b, r0	; 59
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	0b b6       	in	r0, 0x3b	; 59
     b02:	0f 92       	push	r0
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	4f 93       	push	r20
     b0a:	5f 93       	push	r21
     b0c:	6f 93       	push	r22
     b0e:	7f 93       	push	r23
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	af 93       	push	r26
     b16:	bf 93       	push	r27
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
     b1c:	0e 94 c0 04 	call	0x980	; 0x980 <twim_interrupt_handler>
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0b be       	out	0x3b, r0	; 59
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     b46:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     b48:	db 01       	movw	r26, r22
     b4a:	14 96       	adiw	r26, 0x04	; 4
     b4c:	8c 91       	ld	r24, X
     b4e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     b50:	88 eb       	ldi	r24, 0xB8	; 184
     b52:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     b58:	e0 e4       	ldi	r30, 0x40	; 64
     b5a:	f1 e2       	ldi	r31, 0x21	; 33
     b5c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     b5e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     b60:	e0 ea       	ldi	r30, 0xA0	; 160
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     b6a:	78 94       	sei

	return STATUS_OK;
}
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	08 95       	ret

00000b70 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	1f 92       	push	r1
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	dc 01       	movw	r26, r24
     b7c:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     b7e:	89 2b       	or	r24, r25
     b80:	09 f4       	brne	.+2      	; 0xb84 <twi_master_transfer+0x14>
     b82:	44 c0       	rjmp	.+136    	; 0xc0c <twi_master_transfer+0x9c>
     b84:	30 97       	sbiw	r30, 0x00	; 0
     b86:	09 f4       	brne	.+2      	; 0xb8a <twi_master_transfer+0x1a>
     b88:	41 c0       	rjmp	.+130    	; 0xc0c <twi_master_transfer+0x9c>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     b8a:	82 85       	ldd	r24, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     b8c:	90 91 49 21 	lds	r25, 0x2149	; 0x802149 <transfer+0x9>
     b90:	99 23       	and	r25, r25
     b92:	19 f0       	breq	.+6      	; 0xb9a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     b94:	81 11       	cpse	r24, r1
     b96:	3c c0       	rjmp	.+120    	; 0xc10 <twi_master_transfer+0xa0>
     b98:	ff cf       	rjmp	.-2      	; 0xb98 <twi_master_transfer+0x28>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b9a:	8f b7       	in	r24, 0x3f	; 63
     b9c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b9e:	f8 94       	cli
	return flags;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	90 93 49 21 	sts	0x2149, r25	; 0x802149 <transfer+0x9>
	transfer.status = OPERATION_IN_PROGRESS;
     ba8:	90 e8       	ldi	r25, 0x80	; 128
     baa:	90 93 4a 21 	sts	0x214A, r25	; 0x80214a <transfer+0xa>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bae:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     bb0:	a0 93 40 21 	sts	0x2140, r26	; 0x802140 <transfer>
     bb4:	b0 93 41 21 	sts	0x2141, r27	; 0x802141 <transfer+0x1>
		transfer.pkg         = (twi_package_t *) package;
     bb8:	60 93 42 21 	sts	0x2142, r22	; 0x802142 <transfer+0x2>
     bbc:	70 93 43 21 	sts	0x2143, r23	; 0x802143 <transfer+0x3>
		transfer.addr_count  = 0;
     bc0:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <transfer+0x4>
     bc4:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <transfer+0x5>
		transfer.data_count  = 0;
     bc8:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <transfer+0x6>
     bcc:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <transfer+0x7>
		transfer.read        = read;
     bd0:	40 93 48 21 	sts	0x2148, r20	; 0x802148 <transfer+0x8>

		uint8_t const chip = (package->chip) << 1;
     bd4:	90 81       	ld	r25, Z
     bd6:	99 0f       	add	r25, r25

		if (package->addr_length || (false == read)) {
     bd8:	24 81       	ldd	r18, Z+4	; 0x04
     bda:	35 81       	ldd	r19, Z+5	; 0x05
     bdc:	23 2b       	or	r18, r19
     bde:	11 f4       	brne	.+4      	; 0xbe4 <twi_master_transfer+0x74>
     be0:	41 11       	cpse	r20, r1
			transfer.bus->MASTER.ADDR = chip;
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     be2:	91 60       	ori	r25, 0x01	; 1
     be4:	16 96       	adiw	r26, 0x06	; 6
     be6:	9c 93       	st	X, r25
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     be8:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <transfer+0xa>
     bec:	80 38       	cpi	r24, 0x80	; 128
     bee:	e1 f3       	breq	.-8      	; 0xbe8 <twi_master_transfer+0x78>

	while (! twim_idle(transfer.bus)) { barrier(); }
     bf0:	e0 91 40 21 	lds	r30, 0x2140	; 0x802140 <transfer>
     bf4:	f0 91 41 21 	lds	r31, 0x2141	; 0x802141 <transfer+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <twi_master_transfer+0x92>
     c00:	f7 cf       	rjmp	.-18     	; 0xbf0 <twi_master_transfer+0x80>

	status_code_t const status = transfer.status;
     c02:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <transfer+0xa>

	transfer.locked = false;
     c06:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <transfer+0x9>
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <twi_master_transfer+0xa2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     c0c:	88 ef       	ldi	r24, 0xF8	; 248
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <twi_master_transfer+0xa2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     c10:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	1f 92       	push	r1
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     c24:	8f b7       	in	r24, 0x3f	; 63
     c26:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c28:	f8 94       	cli
	return flags;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	8c 01       	movw	r16, r24
     c3e:	eb 01       	movw	r28, r22
	irqflags_t flags;

	Assert(callback);

	flags = cpu_irq_save();
     c40:	0e 94 0d 06 	call	0xc1a	; 0xc1a <cpu_irq_save>

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     c44:	01 15       	cp	r16, r1
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	19 07       	cpc	r17, r25
     c4a:	29 f4       	brne	.+10     	; 0xc56 <adc_set_callback+0x22>
		adca_callback = callback;
     c4c:	c0 93 6a 24 	sts	0x246A, r28	; 0x80246a <adca_callback>
     c50:	d0 93 6b 24 	sts	0x246B, r29	; 0x80246b <adca_callback+0x1>
     c54:	07 c0       	rjmp	.+14     	; 0xc64 <adc_set_callback+0x30>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     c56:	00 34       	cpi	r16, 0x40	; 64
     c58:	12 40       	sbci	r17, 0x02	; 2
     c5a:	21 f4       	brne	.+8      	; 0xc64 <adc_set_callback+0x30>
		adcb_callback = callback;
     c5c:	c0 93 68 24 	sts	0x2468, r28	; 0x802468 <adcb_callback>
     c60:	d0 93 69 24 	sts	0x2469, r29	; 0x802469 <adcb_callback+0x1>

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c64:	8f bf       	out	0x3f, r24	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     c70:	81 15       	cp	r24, r1
     c72:	22 e0       	ldi	r18, 0x02	; 2
     c74:	92 07       	cpc	r25, r18
     c76:	59 f4       	brne	.+22     	; 0xc8e <adc_enable_clock+0x1e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     c78:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <adca_enable_count>
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	98 0f       	add	r25, r24
     c80:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <adca_enable_count>
     c84:	81 11       	cpse	r24, r1
     c86:	12 c0       	rjmp	.+36     	; 0xcac <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <adc_enable_clock+0x38>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     c8e:	80 34       	cpi	r24, 0x40	; 64
     c90:	92 40       	sbci	r25, 0x02	; 2
     c92:	61 f4       	brne	.+24     	; 0xcac <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     c94:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <adcb_enable_count>
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	98 0f       	add	r25, r24
     c9c:	90 93 4b 21 	sts	0x214B, r25	; 0x80214b <adcb_enable_count>
     ca0:	81 11       	cpse	r24, r1
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     ca4:	62 e0       	ldi	r22, 0x02	; 2
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <sysclk_enable_module>
     cac:	08 95       	ret

00000cae <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     cae:	81 15       	cp	r24, r1
     cb0:	22 e0       	ldi	r18, 0x02	; 2
     cb2:	92 07       	cpc	r25, r18
     cb4:	51 f4       	brne	.+20     	; 0xcca <adc_disable_clock+0x1c>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     cb6:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <adca_enable_count>
     cba:	81 50       	subi	r24, 0x01	; 1
     cbc:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <adca_enable_count>
     cc0:	81 11       	cpse	r24, r1
     cc2:	11 c0       	rjmp	.+34     	; 0xce6 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0c c0       	rjmp	.+24     	; 0xce2 <adc_disable_clock+0x34>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	92 40       	sbci	r25, 0x02	; 2
     cce:	59 f4       	brne	.+22     	; 0xce6 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     cd0:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <adcb_enable_count>
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <adcb_enable_count>
     cda:	81 11       	cpse	r24, r1
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	0c 94 07 0b 	jmp	0x160e	; 0x160e <sysclk_disable_module>
     ce6:	08 95       	ret

00000ce8 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	ec 01       	movw	r28, r24
	irqflags_t flags = cpu_irq_save();
     cf0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <cpu_irq_save>
     cf4:	18 2f       	mov	r17, r24
	adc_enable_clock(adc);
     cf6:	ce 01       	movw	r24, r28
     cf8:	0e 94 38 06 	call	0xc70	; 0xc70 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     cfc:	98 81       	ld	r25, Y
     cfe:	91 60       	ori	r25, 0x01	; 1
     d00:	98 83       	st	Y, r25
     d02:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     d04:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	09 f4       	brne	.+2      	; 0xd0e <adc_enable+0x26>
     d0c:	ff cf       	rjmp	.-2      	; 0xd0c <adc_enable+0x24>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     d0e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <cpu_irq_save>

	++sleepmgr_locks[mode];
     d12:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	90 93 73 24 	sts	0x2473, r25	; 0x802473 <sleepmgr_locks+0x1>
     d1c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	08 95       	ret

00000d26 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ec 01       	movw	r28, r24
	irqflags_t flags = cpu_irq_save();
     d2e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <cpu_irq_save>
     d32:	18 2f       	mov	r17, r24
	adc->CTRLA &= ~ADC_ENABLE_bm;
     d34:	98 81       	ld	r25, Y
     d36:	9e 7f       	andi	r25, 0xFE	; 254
     d38:	98 83       	st	Y, r25
	adc_disable_clock(adc);
     d3a:	ce 01       	movw	r24, r28
     d3c:	0e 94 57 06 	call	0xcae	; 0xcae <adc_disable_clock>
     d40:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     d42:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
     d46:	81 11       	cpse	r24, r1
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <adc_disable+0x26>
     d4a:	ff cf       	rjmp	.-2      	; 0xd4a <adc_disable+0x24>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     d4c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <cpu_irq_save>

	--sleepmgr_locks[mode];
     d50:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
     d54:	91 50       	subi	r25, 0x01	; 1
     d56:	90 93 73 24 	sts	0x2473, r25	; 0x802473 <sleepmgr_locks+0x1>
     d5a:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	08 95       	ret

00000d64 <adc_is_enabled>:
	 * since all driver functions that change the counts are protected
	 * against interrupts and only the enable/disable functions leave the
	 * counts incremented/decremented upon return.
	 */
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     d64:	81 15       	cp	r24, r1
     d66:	22 e0       	ldi	r18, 0x02	; 2
     d68:	92 07       	cpc	r25, r18
     d6a:	21 f4       	brne	.+8      	; 0xd74 <adc_is_enabled+0x10>
		return adca_enable_count;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 91 4c 21 	lds	r25, 0x214C	; 0x80214c <adca_enable_count>
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <adc_is_enabled+0x1c>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     d74:	80 34       	cpi	r24, 0x40	; 64
     d76:	92 40       	sbci	r25, 0x02	; 2
     d78:	29 f4       	brne	.+10     	; 0xd84 <adc_is_enabled+0x20>
		return adcb_enable_count;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <adcb_enable_count>
     d80:	91 11       	cpse	r25, r1
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <adc_is_enabled+0x22>
	} else
#endif

	{
		Assert(0);
		return false;
     d84:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     d86:	08 95       	ret

00000d88 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	1f 92       	push	r1
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
     d92:	8f b7       	in	r24, 0x3f	; 63
     d94:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d96:	f8 94       	cli
	return flags;
     d98:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9a:	0f 90       	pop	r0
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	0b b6       	in	r0, 0x3b	; 59
     dae:	0f 92       	push	r0
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     dc8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     dcc:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     dd0:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <adca_callback>
     dd4:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <adca_callback+0x1>
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	19 95       	eicall
}
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0b be       	out	0x3b, r0	; 59
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	0b b6       	in	r0, 0x3b	; 59
     e12:	0f 92       	push	r0
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     e2c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     e30:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     e34:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <adca_callback>
     e38:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <adca_callback+0x1>
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	19 95       	eicall
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0b be       	out	0x3b, r0	; 59
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	0b b6       	in	r0, 0x3b	; 59
     e76:	0f 92       	push	r0
     e78:	2f 93       	push	r18
     e7a:	3f 93       	push	r19
     e7c:	4f 93       	push	r20
     e7e:	5f 93       	push	r21
     e80:	6f 93       	push	r22
     e82:	7f 93       	push	r23
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	af 93       	push	r26
     e8a:	bf 93       	push	r27
     e8c:	ef 93       	push	r30
     e8e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     e90:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     e94:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     e98:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <adca_callback>
     e9c:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <adca_callback+0x1>
     ea0:	64 e0       	ldi	r22, 0x04	; 4
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	19 95       	eicall
}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0b be       	out	0x3b, r0	; 59
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	0b b6       	in	r0, 0x3b	; 59
     eda:	0f 92       	push	r0
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     ef4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     ef8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     efc:	e0 91 6a 24 	lds	r30, 0x246A	; 0x80246a <adca_callback>
     f00:	f0 91 6b 24 	lds	r31, 0x246B	; 0x80246b <adca_callback+0x1>
     f04:	68 e0       	ldi	r22, 0x08	; 8
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	19 95       	eicall
}
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0b be       	out	0x3b, r0	; 59
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     f32:	1f 92       	push	r1
     f34:	0f 92       	push	r0
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	0b b6       	in	r0, 0x3b	; 59
     f3e:	0f 92       	push	r0
     f40:	2f 93       	push	r18
     f42:	3f 93       	push	r19
     f44:	4f 93       	push	r20
     f46:	5f 93       	push	r21
     f48:	6f 93       	push	r22
     f4a:	7f 93       	push	r23
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
     f50:	af 93       	push	r26
     f52:	bf 93       	push	r27
     f54:	ef 93       	push	r30
     f56:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     f58:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     f5c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     f60:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <adcb_callback>
     f64:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <adcb_callback+0x1>
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	80 e4       	ldi	r24, 0x40	; 64
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	19 95       	eicall
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	0b b6       	in	r0, 0x3b	; 59
     fa2:	0f 92       	push	r0
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     fbc:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     fc0:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     fc4:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <adcb_callback>
     fc8:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <adcb_callback+0x1>
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	80 e4       	ldi	r24, 0x40	; 64
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	19 95       	eicall
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0b be       	out	0x3b, r0	; 59
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	0b b6       	in	r0, 0x3b	; 59
    1006:	0f 92       	push	r0
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1020:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1024:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1028:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <adcb_callback>
    102c:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <adcb_callback+0x1>
    1030:	64 e0       	ldi	r22, 0x04	; 4
    1032:	80 e4       	ldi	r24, 0x40	; 64
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	19 95       	eicall
}
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	0f 90       	pop	r0
    1052:	0b be       	out	0x3b, r0	; 59
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	0b b6       	in	r0, 0x3b	; 59
    106a:	0f 92       	push	r0
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1084:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1088:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    108c:	e0 91 68 24 	lds	r30, 0x2468	; 0x802468 <adcb_callback>
    1090:	f0 91 69 24 	lds	r31, 0x2469	; 0x802469 <adcb_callback+0x1>
    1094:	68 e0       	ldi	r22, 0x08	; 8
    1096:	80 e4       	ldi	r24, 0x40	; 64
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	19 95       	eicall
}
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	bf 91       	pop	r27
    10a2:	af 91       	pop	r26
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	7f 91       	pop	r23
    10aa:	6f 91       	pop	r22
    10ac:	5f 91       	pop	r21
    10ae:	4f 91       	pop	r20
    10b0:	3f 91       	pop	r19
    10b2:	2f 91       	pop	r18
    10b4:	0f 90       	pop	r0
    10b6:	0b be       	out	0x3b, r0	; 59
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	7c 01       	movw	r14, r24
    10d2:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    10d4:	e1 14       	cp	r14, r1
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	f8 06       	cpc	r15, r24
    10da:	51 f4       	brne	.+20     	; 0x10f0 <adc_write_configuration+0x2e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    10dc:	61 e2       	ldi	r22, 0x21	; 33
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    10e6:	c8 2f       	mov	r28, r24
    10e8:	d0 e0       	ldi	r29, 0x00	; 0
    10ea:	60 e2       	ldi	r22, 0x20	; 32
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <adc_write_configuration+0x4a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    10f0:	e0 e4       	ldi	r30, 0x40	; 64
    10f2:	ee 16       	cp	r14, r30
    10f4:	e2 e0       	ldi	r30, 0x02	; 2
    10f6:	fe 06       	cpc	r15, r30
    10f8:	d9 f5       	brne	.+118    	; 0x1170 <adc_write_configuration+0xae>
    10fa:	65 e2       	ldi	r22, 0x25	; 37
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1104:	c8 2f       	mov	r28, r24
    1106:	d0 e0       	ldi	r29, 0x00	; 0
    1108:	64 e2       	ldi	r22, 0x24	; 36
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
		data <<= 8;
    1112:	dc 2f       	mov	r29, r28
    1114:	cc 27       	eor	r28, r28
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1116:	c8 2b       	or	r28, r24
	{
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
    1118:	0e 94 c4 06 	call	0xd88	; 0xd88 <cpu_irq_save>
    111c:	d8 2e       	mov	r13, r24
	adc_enable_clock(adc);
    111e:	c7 01       	movw	r24, r14
    1120:	0e 94 38 06 	call	0xc70	; 0xc70 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1124:	f7 01       	movw	r30, r14
    1126:	90 81       	ld	r25, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	80 83       	st	Z, r24
	adc->CAL = cal;
    112c:	c4 87       	std	Z+12, r28	; 0x0c
    112e:	d5 87       	std	Z+13, r29	; 0x0d
	adc->CMP = conf->cmp;
    1130:	f8 01       	movw	r30, r16
    1132:	25 81       	ldd	r18, Z+5	; 0x05
    1134:	36 81       	ldd	r19, Z+6	; 0x06
    1136:	f7 01       	movw	r30, r14
    1138:	20 8f       	std	Z+24, r18	; 0x18
    113a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    113c:	f8 01       	movw	r30, r16
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	f7 01       	movw	r30, r14
    1142:	82 83       	std	Z+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    1144:	f8 01       	movw	r30, r16
    1146:	84 81       	ldd	r24, Z+4	; 0x04
    1148:	f7 01       	movw	r30, r14
    114a:	84 83       	std	Z+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    114c:	f8 01       	movw	r30, r16
    114e:	83 81       	ldd	r24, Z+3	; 0x03
    1150:	f7 01       	movw	r30, r14
    1152:	83 83       	std	Z+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    1154:	f8 01       	movw	r30, r16
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	f7 01       	movw	r30, r14
    115a:	81 83       	std	Z+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    115c:	91 70       	andi	r25, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    115e:	f8 01       	movw	r30, r16
    1160:	20 81       	ld	r18, Z
    1162:	92 2b       	or	r25, r18
    1164:	f7 01       	movw	r30, r14
    1166:	90 83       	st	Z, r25

	adc_disable_clock(adc);
    1168:	c7 01       	movw	r24, r14
    116a:	0e 94 57 06 	call	0xcae	; 0xcae <adc_disable_clock>

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    116e:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	08 95       	ret

00001180 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
    118c:	8b 01       	movw	r16, r22
	irqflags_t flags = cpu_irq_save();
    118e:	0e 94 c4 06 	call	0xd88	; 0xd88 <cpu_irq_save>
    1192:	f8 2e       	mov	r15, r24

	adc_enable_clock(adc);
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 38 06 	call	0xc70	; 0xc70 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    119a:	98 81       	ld	r25, Y
    119c:	90 7c       	andi	r25, 0xC0	; 192
    119e:	f8 01       	movw	r30, r16
    11a0:	90 83       	st	Z, r25

	conf->cmp = adc->CMP;
    11a2:	88 8d       	ldd	r24, Y+24	; 0x18
    11a4:	99 8d       	ldd	r25, Y+25	; 0x19
    11a6:	85 83       	std	Z+5, r24	; 0x05
    11a8:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    11ba:	ce 01       	movw	r24, r28
    11bc:	0e 94 57 06 	call	0xcae	; 0xcae <adc_disable_clock>
    11c0:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	08 95       	ret

000011ce <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	1f 92       	push	r1
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	7c 01       	movw	r14, r24
    11e8:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    11ea:	86 2f       	mov	r24, r22
    11ec:	83 70       	andi	r24, 0x03	; 3
    11ee:	29 f4       	brne	.+10     	; 0x11fa <adcch_write_configuration+0x2c>
		index += 2;
		ch_mask >>= 2;
    11f0:	86 2f       	mov	r24, r22
    11f2:	86 95       	lsr	r24
    11f4:	86 95       	lsr	r24
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <adcch_write_configuration+0x30>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    11fa:	86 2f       	mov	r24, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    11fc:	90 e0       	ldi	r25, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    11fe:	80 ff       	sbrs	r24, 0
		index++;
    1200:	9f 5f       	subi	r25, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1202:	57 01       	movw	r10, r14
    1204:	80 e2       	ldi	r24, 0x20	; 32
    1206:	a8 0e       	add	r10, r24
    1208:	b1 1c       	adc	r11, r1
    120a:	e8 e0       	ldi	r30, 0x08	; 8
    120c:	9e 9f       	mul	r25, r30
    120e:	a0 0c       	add	r10, r0
    1210:	b1 1c       	adc	r11, r1
    1212:	11 24       	eor	r1, r1
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
    1214:	69 83       	std	Y+1, r22	; 0x01
    1216:	0e 94 c4 06 	call	0xd88	; 0xd88 <cpu_irq_save>
    121a:	d8 2e       	mov	r13, r24
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    121c:	c7 01       	movw	r24, r14
    121e:	0e 94 38 06 	call	0xc70	; 0xc70 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1222:	f8 01       	movw	r30, r16
    1224:	80 81       	ld	r24, Z
    1226:	f5 01       	movw	r30, r10
    1228:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    122a:	f8 01       	movw	r30, r16
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	f5 01       	movw	r30, r10
    1230:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1232:	f8 01       	movw	r30, r16
    1234:	81 81       	ldd	r24, Z+1	; 0x01
    1236:	f5 01       	movw	r30, r10
    1238:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    123a:	69 81       	ldd	r22, Y+1	; 0x01
    123c:	60 ff       	sbrs	r22, 0
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <adcch_write_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1240:	f8 01       	movw	r30, r16
    1242:	83 81       	ldd	r24, Z+3	; 0x03
    1244:	f5 01       	movw	r30, r10
    1246:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1248:	c7 01       	movw	r24, r14
    124a:	0e 94 57 06 	call	0xcae	; 0xcae <adc_disable_clock>
    124e:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	08 95       	ret

00001266 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	1f 92       	push	r1
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	7c 01       	movw	r14, r24
    1280:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1282:	86 2f       	mov	r24, r22
    1284:	83 70       	andi	r24, 0x03	; 3
    1286:	29 f4       	brne	.+10     	; 0x1292 <adcch_read_configuration+0x2c>
		index += 2;
		ch_mask >>= 2;
    1288:	86 2f       	mov	r24, r22
    128a:	86 95       	lsr	r24
    128c:	86 95       	lsr	r24
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <adcch_read_configuration+0x30>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1292:	86 2f       	mov	r24, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1294:	90 e0       	ldi	r25, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1296:	80 ff       	sbrs	r24, 0
		index++;
    1298:	9f 5f       	subi	r25, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    129a:	57 01       	movw	r10, r14
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	a8 0e       	add	r10, r24
    12a0:	b1 1c       	adc	r11, r1
    12a2:	e8 e0       	ldi	r30, 0x08	; 8
    12a4:	9e 9f       	mul	r25, r30
    12a6:	a0 0c       	add	r10, r0
    12a8:	b1 1c       	adc	r11, r1
    12aa:	11 24       	eor	r1, r1
	ADC_CH_t *adc_ch;
	irqflags_t flags;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
    12ac:	69 83       	std	Y+1, r22	; 0x01
    12ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <cpu_irq_save>
    12b2:	d8 2e       	mov	r13, r24

	adc_enable_clock(adc);
    12b4:	c7 01       	movw	r24, r14
    12b6:	0e 94 38 06 	call	0xc70	; 0xc70 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    12ba:	f5 01       	movw	r30, r10
    12bc:	80 81       	ld	r24, Z
    12be:	f8 01       	movw	r30, r16
    12c0:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    12c2:	f5 01       	movw	r30, r10
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	f8 01       	movw	r30, r16
    12c8:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    12ca:	f5 01       	movw	r30, r10
    12cc:	81 81       	ldd	r24, Z+1	; 0x01
    12ce:	f8 01       	movw	r30, r16
    12d0:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    12d2:	69 81       	ldd	r22, Y+1	; 0x01
    12d4:	60 ff       	sbrs	r22, 0
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <adcch_read_configuration+0x7a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    12d8:	f5 01       	movw	r30, r10
    12da:	86 81       	ldd	r24, Z+6	; 0x06
    12dc:	f8 01       	movw	r30, r16
    12de:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    12e0:	c7 01       	movw	r24, r14
    12e2:	0e 94 57 06 	call	0xcae	; 0xcae <adc_disable_clock>
    12e6:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    12e8:	0f 90       	pop	r0
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	08 95       	ret

000012fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    12fe:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1300:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <stdio_base>
    1304:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <stdio_base+0x1>
    1308:	e0 91 6c 24 	lds	r30, 0x246C	; 0x80246c <ptr_put>
    130c:	f0 91 6d 24 	lds	r31, 0x246D	; 0x80246d <ptr_put+0x1>
    1310:	19 95       	eicall
    1312:	97 fd       	sbrc	r25, 7
    1314:	03 c0       	rjmp	.+6      	; 0x131c <_write+0x1e>
		return -1;
	}
	return 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    1320:	08 95       	ret

00001322 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    132c:	80 91 6e 24 	lds	r24, 0x246E	; 0x80246e <stdio_base>
    1330:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <stdio_base+0x1>
    1334:	e0 91 70 24 	lds	r30, 0x2470	; 0x802470 <ptr_get>
    1338:	f0 91 71 24 	lds	r31, 0x2471	; 0x802471 <ptr_get+0x1>
    133c:	be 01       	movw	r22, r28
    133e:	6f 5f       	subi	r22, 0xFF	; 255
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	19 95       	eicall
	return c;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
}
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
    1356:	c0 3c       	cpi	r28, 0xC0	; 192
    1358:	88 e0       	ldi	r24, 0x08	; 8
    135a:	d8 07       	cpc	r29, r24
    135c:	19 f4       	brne	.+6      	; 0x1364 <spi_master_init+0x14>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    135e:	68 e0       	ldi	r22, 0x08	; 8
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <spi_master_init+0x20>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
    1364:	c0 3c       	cpi	r28, 0xC0	; 192
    1366:	89 e0       	ldi	r24, 0x09	; 9
    1368:	d8 07       	cpc	r29, r24
    136a:	21 f4       	brne	.+8      	; 0x1374 <spi_master_init+0x24>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
    136c:	68 e0       	ldi	r22, 0x08	; 8
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
    1374:	88 81       	ld	r24, Y
    1376:	80 61       	ori	r24, 0x10	; 16
    1378:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	7c 01       	movw	r14, r24
    138c:	c4 2f       	mov	r28, r20
    138e:	b9 01       	movw	r22, r18
    1390:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	16 e3       	ldi	r17, 0x36	; 54
    1396:	2e e6       	ldi	r18, 0x6E	; 110
    1398:	31 e0       	ldi	r19, 0x01	; 1
    139a:	0e 94 91 13 	call	0x2722	; 0x2722 <spi_xmega_set_baud_div>
    139e:	87 fd       	sbrc	r24, 7
    13a0:	0b c0       	rjmp	.+22     	; 0x13b8 <spi_master_setup_device+0x38>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    13a2:	f7 01       	movw	r30, r14
    13a4:	90 81       	ld	r25, Z
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
    13a6:	f4 e0       	ldi	r31, 0x04	; 4
    13a8:	cf 9f       	mul	r28, r31
    13aa:	a0 01       	movw	r20, r0
    13ac:	11 24       	eor	r1, r1
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    13ae:	4c 70       	andi	r20, 0x0C	; 12
    13b0:	93 7f       	andi	r25, 0xF3	; 243
    13b2:	49 2b       	or	r20, r25
    13b4:	f7 01       	movw	r30, r14
    13b6:	40 83       	st	Z, r20
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	08 95       	ret

000013c4 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
    13c4:	fb 01       	movw	r30, r22
    13c6:	46 0f       	add	r20, r22
    13c8:	57 1f       	adc	r21, r23
	while (len--) {
    13ca:	e4 17       	cp	r30, r20
    13cc:	f5 07       	cpc	r31, r21
    13ce:	51 f0       	breq	.+20     	; 0x13e4 <spi_write_packet+0x20>
		spi_write_single(spi, *data++);
    13d0:	21 91       	ld	r18, Z+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    13d2:	dc 01       	movw	r26, r24
    13d4:	13 96       	adiw	r26, 0x03	; 3
    13d6:	2c 93       	st	X, r18
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    13d8:	dc 01       	movw	r26, r24
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	2c 91       	ld	r18, X
		
		while (!spi_is_rx_full(spi)) {
    13de:	27 ff       	sbrs	r18, 7
    13e0:	fb cf       	rjmp	.-10     	; 0x13d8 <spi_write_packet+0x14>
    13e2:	f3 cf       	rjmp	.-26     	; 0x13ca <spi_write_packet+0x6>
		}
	}
	
	return STATUS_OK;
}
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret

000013e8 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    13e8:	dc 01       	movw	r26, r24
    13ea:	fb 01       	movw	r30, r22
    13ec:	46 0f       	add	r20, r22
    13ee:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
	while (len--) {
    13f2:	e4 17       	cp	r30, r20
    13f4:	f5 07       	cpc	r31, r21
    13f6:	69 f0       	breq	.+26     	; 0x1412 <spi_read_packet+0x2a>
    13f8:	13 96       	adiw	r26, 0x03	; 3
    13fa:	8c 93       	st	X, r24
    13fc:	13 97       	sbiw	r26, 0x03	; 3
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    13fe:	12 96       	adiw	r26, 0x02	; 2
    1400:	9c 91       	ld	r25, X
    1402:	12 97       	sbiw	r26, 0x02	; 2
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    1404:	97 ff       	sbrs	r25, 7
    1406:	fb cf       	rjmp	.-10     	; 0x13fe <spi_read_packet+0x16>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    1408:	13 96       	adiw	r26, 0x03	; 3
    140a:	9c 91       	ld	r25, X
    140c:	13 97       	sbiw	r26, 0x03	; 3
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    140e:	91 93       	st	Z+, r25
    1410:	f0 cf       	rjmp	.-32     	; 0x13f2 <spi_read_packet+0xa>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	08 95       	ret

00001416 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    1416:	fb 01       	movw	r30, r22
    1418:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    141a:	e8 2f       	mov	r30, r24
    141c:	e6 95       	lsr	r30
    141e:	e6 95       	lsr	r30
    1420:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	e4 9f       	mul	r30, r20
    1426:	f0 01       	movw	r30, r0
    1428:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    142a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    142c:	87 70       	andi	r24, 0x07	; 7
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	a9 01       	movw	r20, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <spi_select_device+0x24>
    1436:	44 0f       	add	r20, r20
    1438:	55 1f       	adc	r21, r21
    143a:	8a 95       	dec	r24
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    143e:	46 83       	std	Z+6, r20	; 0x06
    1440:	08 95       	ret

00001442 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    1442:	fb 01       	movw	r30, r22
    1444:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1446:	e8 2f       	mov	r30, r24
    1448:	e6 95       	lsr	r30
    144a:	e6 95       	lsr	r30
    144c:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	e4 9f       	mul	r30, r20
    1452:	f0 01       	movw	r30, r0
    1454:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1456:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1458:	87 70       	andi	r24, 0x07	; 7
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	a9 01       	movw	r20, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <spi_deselect_device+0x24>
    1462:	44 0f       	add	r20, r20
    1464:	55 1f       	adc	r21, r21
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    146a:	45 83       	std	Z+5, r20	; 0x05
    146c:	08 95       	ret

0000146e <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	7c 01       	movw	r14, r24
    147c:	eb 01       	movw	r28, r22
    147e:	8b 01       	movw	r16, r22
    1480:	04 0f       	add	r16, r20
    1482:	15 1f       	adc	r17, r21
	while (len) {
    1484:	c0 17       	cp	r28, r16
    1486:	d1 07       	cpc	r29, r17
    1488:	29 f0       	breq	.+10     	; 0x1494 <usart_serial_write_packet+0x26>
		usart_serial_putchar(usart, *data);
    148a:	69 91       	ld	r22, Y+
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    148c:	c7 01       	movw	r24, r14
    148e:	0e 94 66 02 	call	0x4cc	; 0x4cc <usart_putchar>
    1492:	f8 cf       	rjmp	.-16     	; 0x1484 <usart_serial_write_packet+0x16>
		len--;
		data++;
	}
	return STATUS_OK;
}
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	08 95       	ret

000014a4 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	7c 01       	movw	r14, r24
    14b2:	eb 01       	movw	r28, r22
    14b4:	8b 01       	movw	r16, r22
    14b6:	04 0f       	add	r16, r20
    14b8:	15 1f       	adc	r17, r21
	while (len) {
    14ba:	c0 17       	cp	r28, r16
    14bc:	d1 07       	cpc	r29, r17
    14be:	29 f0       	breq	.+10     	; 0x14ca <usart_serial_read_packet+0x26>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
    14c0:	c7 01       	movw	r24, r14
    14c2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <usart_getchar>
    14c6:	89 93       	st	Y+, r24
    14c8:	f8 cf       	rjmp	.-16     	; 0x14ba <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	08 95       	ret

000014da <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	1f 92       	push	r1
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    14e4:	8f b7       	in	r24, 0x3f	; 63
    14e6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14e8:	f8 94       	cli
	return flags;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	0f 90       	pop	r0
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <osc_enable_autocalibration.constprop.3>:
 */
static inline void osc_enable_autocalibration(uint8_t id, uint8_t ref_id)
{
	irqflags_t flags;

	flags = cpu_irq_save();
    14f4:	0e 94 6d 0a 	call	0x14da	; 0x14da <cpu_irq_save>
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    14f8:	a0 e5       	ldi	r26, 0x50	; 80
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	16 96       	adiw	r26, 0x06	; 6
    14fe:	9c 91       	ld	r25, X
    1500:	16 97       	sbiw	r26, 0x06	; 6
    1502:	99 7f       	andi	r25, 0xF9	; 249
    1504:	16 96       	adiw	r26, 0x06	; 6
    1506:	9c 93       	st	X, r25
    1508:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    150a:	e0 e6       	ldi	r30, 0x60	; 96
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	90 e8       	ldi	r25, 0x80	; 128
    1510:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1512:	9b eb       	ldi	r25, 0xBB	; 187
    1514:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1516:	16 96       	adiw	r26, 0x06	; 6
    1518:	9c 91       	ld	r25, X
    151a:	16 97       	sbiw	r26, 0x06	; 6
    151c:	94 60       	ori	r25, 0x04	; 4
    151e:	16 96       	adiw	r26, 0x06	; 6
    1520:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1522:	90 81       	ld	r25, Z
    1524:	91 60       	ori	r25, 0x01	; 1
    1526:	90 83       	st	Z, r25

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1528:	8f bf       	out	0x3f, r24	; 63
    152a:	08 95       	ret

0000152c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	00 d0       	rcall	.+0      	; 0x1532 <sysclk_init+0x6>
    1532:	1f 92       	push	r1
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    153e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1542:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1546:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    154a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    154e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1552:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    1556:	64 e0       	ldi	r22, 0x04	; 4
    1558:	81 e4       	ldi	r24, 0x41	; 65
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <ccp_write_io>
    1560:	6c e1       	ldi	r22, 0x1C	; 28
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    156a:	8c 83       	std	Y+4, r24	; 0x04
    156c:	6d e1       	ldi	r22, 0x1D	; 29
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    1576:	8b 83       	std	Y+3, r24	; 0x03
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	21 f4       	brne	.+8      	; 0x1588 <sysclk_init+0x5c>
		cal = 0x2340;
    1580:	80 e4       	ldi	r24, 0x40	; 64
    1582:	93 e2       	ldi	r25, 0x23	; 35
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	9a 83       	std	Y+2, r25	; 0x02
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    1590:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x700062>
		DFLLRC32M.CALB=MSB(calib);
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__TEXT_REGION_LENGTH__+0x700063>
{
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    159a:	0e 94 6d 0a 	call	0x14da	; 0x14da <cpu_irq_save>
	OSC.CTRL |= id;
    159e:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    15a2:	92 60       	ori	r25, 0x02	; 2
    15a4:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    15a8:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    15aa:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    15ae:	81 ff       	sbrs	r24, 1
    15b0:	fc cf       	rjmp	.-8      	; 0x15aa <sysclk_init+0x7e>
			if (CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
					!= OSC_ID_USBSOF) {
				osc_enable(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
    15b2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <osc_enable_autocalibration.constprop.3>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	80 e4       	ldi	r24, 0x40	; 64
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <ccp_write_io>
{
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    15c0:	0e 94 6d 0a 	call	0x14da	; 0x14da <cpu_irq_save>
	OSC.CTRL &= ~id;
    15c4:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    15c8:	9e 7f       	andi	r25, 0xFE	; 254
    15ca:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    15ce:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    15d0:	24 96       	adiw	r28, 0x04	; 4
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	1f 92       	push	r1
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	18 2f       	mov	r17, r24
	irqflags_t flags = cpu_irq_save();
    15ea:	69 83       	std	Y+1, r22	; 0x01
    15ec:	0e 94 6d 0a 	call	0x14da	; 0x14da <cpu_irq_save>

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    15f0:	e1 2f       	mov	r30, r17
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	e0 59       	subi	r30, 0x90	; 144
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	69 81       	ldd	r22, Y+1	; 0x01
    15fa:	60 95       	com	r22
    15fc:	90 81       	ld	r25, Z
    15fe:	69 23       	and	r22, r25
    1600:	60 83       	st	Z, r22
    1602:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);
}
    1604:	0f 90       	pop	r0
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	08 95       	ret

0000160e <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	c8 2f       	mov	r28, r24
    1614:	d6 2f       	mov	r29, r22
	irqflags_t flags = cpu_irq_save();
    1616:	0e 94 6d 0a 	call	0x14da	; 0x14da <cpu_irq_save>

	*((uint8_t *)&PR.PRGEN + port) |= id;
    161a:	ec 2f       	mov	r30, r28
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	e0 59       	subi	r30, 0x90	; 144
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 81       	ld	r22, Z
    1624:	d6 2b       	or	r29, r22
    1626:	d0 83       	st	Z, r29
    1628:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    1630:	cf 93       	push	r28

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1632:	86 30       	cpi	r24, 0x06	; 6
    1634:	11 f0       	breq	.+4      	; 0x163a <sysclk_enable_usb+0xa>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1636:	c0 e0       	ldi	r28, 0x00	; 0
    1638:	01 c0       	rjmp	.+2      	; 0x163c <sysclk_enable_usb+0xc>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    163a:	c8 e1       	ldi	r28, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    163c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1640:	81 fd       	sbrc	r24, 1
    1642:	0e c0       	rjmp	.+28     	; 0x1660 <sysclk_enable_usb+0x30>
{
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
    1644:	0e 94 6d 0a 	call	0x14da	; 0x14da <cpu_irq_save>
	OSC.CTRL |= id;
    1648:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    164c:	92 60       	ori	r25, 0x02	; 2
    164e:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    1652:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1654:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    1658:	81 ff       	sbrs	r24, 1
    165a:	fc cf       	rjmp	.-8      	; 0x1654 <sysclk_enable_usb+0x24>
			if (CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
					!= OSC_ID_USBSOF) {
				osc_enable(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
    165c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <osc_enable_autocalibration.constprop.3>
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1660:	6c 2f       	mov	r22, r28
    1662:	63 60       	ori	r22, 0x03	; 3
    1664:	84 e4       	ldi	r24, 0x44	; 68
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    166c:	60 e4       	ldi	r22, 0x40	; 64
    166e:	80 e0       	ldi	r24, 0x00	; 0
}
    1670:	cf 91       	pop	r28
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1672:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <sysclk_enable_module>

00001676 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1676:	60 e4       	ldi	r22, 0x40	; 64
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	0e 94 07 0b 	call	0x160e	; 0x160e <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	84 e4       	ldi	r24, 0x44	; 68
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <ccp_write_io>

00001688 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	1f 92       	push	r1
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    1692:	8f b7       	in	r24, 0x3f	; 63
    1694:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1696:	f8 94       	cli
	return flags;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
}
    169a:	0f 90       	pop	r0
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	0b b6       	in	r0, 0x3b	; 59
    16ae:	0f 92       	push	r0
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    16c8:	e0 91 93 21 	lds	r30, 0x2193	; 0x802193 <tc_tcc0_ovf_callback>
    16cc:	f0 91 94 21 	lds	r31, 0x2194	; 0x802194 <tc_tcc0_ovf_callback+0x1>
    16d0:	30 97       	sbiw	r30, 0x00	; 0
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    16d4:	19 95       	eicall
	}
}
    16d6:	ff 91       	pop	r31
    16d8:	ef 91       	pop	r30
    16da:	bf 91       	pop	r27
    16dc:	af 91       	pop	r26
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	7f 91       	pop	r23
    16e4:	6f 91       	pop	r22
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0b be       	out	0x3b, r0	; 59
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	0b b6       	in	r0, 0x3b	; 59
    1708:	0f 92       	push	r0
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    1722:	e0 91 91 21 	lds	r30, 0x2191	; 0x802191 <tc_tcc0_err_callback>
    1726:	f0 91 92 21 	lds	r31, 0x2192	; 0x802192 <tc_tcc0_err_callback+0x1>
    172a:	30 97       	sbiw	r30, 0x00	; 0
    172c:	09 f0       	breq	.+2      	; 0x1730 <__vector_15+0x34>
		tc_tcc0_err_callback();
    172e:	19 95       	eicall
	}
}
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0b be       	out	0x3b, r0	; 59
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	0b b6       	in	r0, 0x3b	; 59
    1762:	0f 92       	push	r0
    1764:	2f 93       	push	r18
    1766:	3f 93       	push	r19
    1768:	4f 93       	push	r20
    176a:	5f 93       	push	r21
    176c:	6f 93       	push	r22
    176e:	7f 93       	push	r23
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
    1774:	af 93       	push	r26
    1776:	bf 93       	push	r27
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    177c:	e0 91 8f 21 	lds	r30, 0x218F	; 0x80218f <tc_tcc0_cca_callback>
    1780:	f0 91 90 21 	lds	r31, 0x2190	; 0x802190 <tc_tcc0_cca_callback+0x1>
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	09 f0       	breq	.+2      	; 0x178a <__vector_16+0x34>
		tc_tcc0_cca_callback();
    1788:	19 95       	eicall
	}
}
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0b be       	out	0x3b, r0	; 59
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	0b b6       	in	r0, 0x3b	; 59
    17bc:	0f 92       	push	r0
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    17d6:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <tc_tcc0_ccb_callback>
    17da:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <tc_tcc0_ccb_callback+0x1>
    17de:	30 97       	sbiw	r30, 0x00	; 0
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    17e2:	19 95       	eicall
	}
}
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	0b be       	out	0x3b, r0	; 59
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	0b b6       	in	r0, 0x3b	; 59
    1816:	0f 92       	push	r0
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    1830:	e0 91 8b 21 	lds	r30, 0x218B	; 0x80218b <tc_tcc0_ccc_callback>
    1834:	f0 91 8c 21 	lds	r31, 0x218C	; 0x80218c <tc_tcc0_ccc_callback+0x1>
    1838:	30 97       	sbiw	r30, 0x00	; 0
    183a:	09 f0       	breq	.+2      	; 0x183e <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    183c:	19 95       	eicall
	}
}
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0b be       	out	0x3b, r0	; 59
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	0b b6       	in	r0, 0x3b	; 59
    1870:	0f 92       	push	r0
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    188a:	e0 91 89 21 	lds	r30, 0x2189	; 0x802189 <tc_tcc0_ccd_callback>
    188e:	f0 91 8a 21 	lds	r31, 0x218A	; 0x80218a <tc_tcc0_ccd_callback+0x1>
    1892:	30 97       	sbiw	r30, 0x00	; 0
    1894:	09 f0       	breq	.+2      	; 0x1898 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    1896:	19 95       	eicall
	}
}
    1898:	ff 91       	pop	r31
    189a:	ef 91       	pop	r30
    189c:	bf 91       	pop	r27
    189e:	af 91       	pop	r26
    18a0:	9f 91       	pop	r25
    18a2:	8f 91       	pop	r24
    18a4:	7f 91       	pop	r23
    18a6:	6f 91       	pop	r22
    18a8:	5f 91       	pop	r21
    18aa:	4f 91       	pop	r20
    18ac:	3f 91       	pop	r19
    18ae:	2f 91       	pop	r18
    18b0:	0f 90       	pop	r0
    18b2:	0b be       	out	0x3b, r0	; 59
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    18e4:	e0 91 87 21 	lds	r30, 0x2187	; 0x802187 <tc_tcc1_ovf_callback>
    18e8:	f0 91 88 21 	lds	r31, 0x2188	; 0x802188 <tc_tcc1_ovf_callback+0x1>
    18ec:	30 97       	sbiw	r30, 0x00	; 0
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    18f0:	19 95       	eicall
	}
}
    18f2:	ff 91       	pop	r31
    18f4:	ef 91       	pop	r30
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	7f 91       	pop	r23
    1900:	6f 91       	pop	r22
    1902:	5f 91       	pop	r21
    1904:	4f 91       	pop	r20
    1906:	3f 91       	pop	r19
    1908:	2f 91       	pop	r18
    190a:	0f 90       	pop	r0
    190c:	0b be       	out	0x3b, r0	; 59
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	0b b6       	in	r0, 0x3b	; 59
    1924:	0f 92       	push	r0
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    193e:	e0 91 85 21 	lds	r30, 0x2185	; 0x802185 <tc_tcc1_err_callback>
    1942:	f0 91 86 21 	lds	r31, 0x2186	; 0x802186 <tc_tcc1_err_callback+0x1>
    1946:	30 97       	sbiw	r30, 0x00	; 0
    1948:	09 f0       	breq	.+2      	; 0x194c <__vector_21+0x34>
		tc_tcc1_err_callback();
    194a:	19 95       	eicall
	}
}
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	bf 91       	pop	r27
    1952:	af 91       	pop	r26
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	7f 91       	pop	r23
    195a:	6f 91       	pop	r22
    195c:	5f 91       	pop	r21
    195e:	4f 91       	pop	r20
    1960:	3f 91       	pop	r19
    1962:	2f 91       	pop	r18
    1964:	0f 90       	pop	r0
    1966:	0b be       	out	0x3b, r0	; 59
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	0b b6       	in	r0, 0x3b	; 59
    197e:	0f 92       	push	r0
    1980:	2f 93       	push	r18
    1982:	3f 93       	push	r19
    1984:	4f 93       	push	r20
    1986:	5f 93       	push	r21
    1988:	6f 93       	push	r22
    198a:	7f 93       	push	r23
    198c:	8f 93       	push	r24
    198e:	9f 93       	push	r25
    1990:	af 93       	push	r26
    1992:	bf 93       	push	r27
    1994:	ef 93       	push	r30
    1996:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1998:	e0 91 83 21 	lds	r30, 0x2183	; 0x802183 <tc_tcc1_cca_callback>
    199c:	f0 91 84 21 	lds	r31, 0x2184	; 0x802184 <tc_tcc1_cca_callback+0x1>
    19a0:	30 97       	sbiw	r30, 0x00	; 0
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    19a4:	19 95       	eicall
	}
}
    19a6:	ff 91       	pop	r31
    19a8:	ef 91       	pop	r30
    19aa:	bf 91       	pop	r27
    19ac:	af 91       	pop	r26
    19ae:	9f 91       	pop	r25
    19b0:	8f 91       	pop	r24
    19b2:	7f 91       	pop	r23
    19b4:	6f 91       	pop	r22
    19b6:	5f 91       	pop	r21
    19b8:	4f 91       	pop	r20
    19ba:	3f 91       	pop	r19
    19bc:	2f 91       	pop	r18
    19be:	0f 90       	pop	r0
    19c0:	0b be       	out	0x3b, r0	; 59
    19c2:	0f 90       	pop	r0
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	0f 90       	pop	r0
    19c8:	1f 90       	pop	r1
    19ca:	18 95       	reti

000019cc <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    19cc:	1f 92       	push	r1
    19ce:	0f 92       	push	r0
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	0f 92       	push	r0
    19d4:	11 24       	eor	r1, r1
    19d6:	0b b6       	in	r0, 0x3b	; 59
    19d8:	0f 92       	push	r0
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    19f2:	e0 91 81 21 	lds	r30, 0x2181	; 0x802181 <tc_tcc1_ccb_callback>
    19f6:	f0 91 82 21 	lds	r31, 0x2182	; 0x802182 <tc_tcc1_ccb_callback+0x1>
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    19fe:	19 95       	eicall
	}
}
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	0f 90       	pop	r0
    1a1a:	0b be       	out	0x3b, r0	; 59
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	1f 90       	pop	r1
    1a24:	18 95       	reti

00001a26 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	0b b6       	in	r0, 0x3b	; 59
    1a32:	0f 92       	push	r0
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1a4c:	e0 91 7f 21 	lds	r30, 0x217F	; 0x80217f <tc_tcd0_ovf_callback>
    1a50:	f0 91 80 21 	lds	r31, 0x2180	; 0x802180 <tc_tcd0_ovf_callback+0x1>
    1a54:	30 97       	sbiw	r30, 0x00	; 0
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1a58:	19 95       	eicall
	}
}
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	bf 91       	pop	r27
    1a60:	af 91       	pop	r26
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	7f 91       	pop	r23
    1a68:	6f 91       	pop	r22
    1a6a:	5f 91       	pop	r21
    1a6c:	4f 91       	pop	r20
    1a6e:	3f 91       	pop	r19
    1a70:	2f 91       	pop	r18
    1a72:	0f 90       	pop	r0
    1a74:	0b be       	out	0x3b, r0	; 59
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	0f 90       	pop	r0
    1a7c:	1f 90       	pop	r1
    1a7e:	18 95       	reti

00001a80 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	0b b6       	in	r0, 0x3b	; 59
    1a8c:	0f 92       	push	r0
    1a8e:	2f 93       	push	r18
    1a90:	3f 93       	push	r19
    1a92:	4f 93       	push	r20
    1a94:	5f 93       	push	r21
    1a96:	6f 93       	push	r22
    1a98:	7f 93       	push	r23
    1a9a:	8f 93       	push	r24
    1a9c:	9f 93       	push	r25
    1a9e:	af 93       	push	r26
    1aa0:	bf 93       	push	r27
    1aa2:	ef 93       	push	r30
    1aa4:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1aa6:	e0 91 7d 21 	lds	r30, 0x217D	; 0x80217d <tc_tcd0_err_callback>
    1aaa:	f0 91 7e 21 	lds	r31, 0x217E	; 0x80217e <tc_tcd0_err_callback+0x1>
    1aae:	30 97       	sbiw	r30, 0x00	; 0
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1ab2:	19 95       	eicall
	}
}
    1ab4:	ff 91       	pop	r31
    1ab6:	ef 91       	pop	r30
    1ab8:	bf 91       	pop	r27
    1aba:	af 91       	pop	r26
    1abc:	9f 91       	pop	r25
    1abe:	8f 91       	pop	r24
    1ac0:	7f 91       	pop	r23
    1ac2:	6f 91       	pop	r22
    1ac4:	5f 91       	pop	r21
    1ac6:	4f 91       	pop	r20
    1ac8:	3f 91       	pop	r19
    1aca:	2f 91       	pop	r18
    1acc:	0f 90       	pop	r0
    1ace:	0b be       	out	0x3b, r0	; 59
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	0b b6       	in	r0, 0x3b	; 59
    1ae6:	0f 92       	push	r0
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	4f 93       	push	r20
    1aee:	5f 93       	push	r21
    1af0:	6f 93       	push	r22
    1af2:	7f 93       	push	r23
    1af4:	8f 93       	push	r24
    1af6:	9f 93       	push	r25
    1af8:	af 93       	push	r26
    1afa:	bf 93       	push	r27
    1afc:	ef 93       	push	r30
    1afe:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1b00:	e0 91 7b 21 	lds	r30, 0x217B	; 0x80217b <tc_tcd0_cca_callback>
    1b04:	f0 91 7c 21 	lds	r31, 0x217C	; 0x80217c <tc_tcd0_cca_callback+0x1>
    1b08:	30 97       	sbiw	r30, 0x00	; 0
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1b0c:	19 95       	eicall
	}
}
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	bf 91       	pop	r27
    1b14:	af 91       	pop	r26
    1b16:	9f 91       	pop	r25
    1b18:	8f 91       	pop	r24
    1b1a:	7f 91       	pop	r23
    1b1c:	6f 91       	pop	r22
    1b1e:	5f 91       	pop	r21
    1b20:	4f 91       	pop	r20
    1b22:	3f 91       	pop	r19
    1b24:	2f 91       	pop	r18
    1b26:	0f 90       	pop	r0
    1b28:	0b be       	out	0x3b, r0	; 59
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	0f 90       	pop	r0
    1b30:	1f 90       	pop	r1
    1b32:	18 95       	reti

00001b34 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	0b b6       	in	r0, 0x3b	; 59
    1b40:	0f 92       	push	r0
    1b42:	2f 93       	push	r18
    1b44:	3f 93       	push	r19
    1b46:	4f 93       	push	r20
    1b48:	5f 93       	push	r21
    1b4a:	6f 93       	push	r22
    1b4c:	7f 93       	push	r23
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	af 93       	push	r26
    1b54:	bf 93       	push	r27
    1b56:	ef 93       	push	r30
    1b58:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1b5a:	e0 91 79 21 	lds	r30, 0x2179	; 0x802179 <tc_tcd0_ccb_callback>
    1b5e:	f0 91 7a 21 	lds	r31, 0x217A	; 0x80217a <tc_tcd0_ccb_callback+0x1>
    1b62:	30 97       	sbiw	r30, 0x00	; 0
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    1b66:	19 95       	eicall
	}
}
    1b68:	ff 91       	pop	r31
    1b6a:	ef 91       	pop	r30
    1b6c:	bf 91       	pop	r27
    1b6e:	af 91       	pop	r26
    1b70:	9f 91       	pop	r25
    1b72:	8f 91       	pop	r24
    1b74:	7f 91       	pop	r23
    1b76:	6f 91       	pop	r22
    1b78:	5f 91       	pop	r21
    1b7a:	4f 91       	pop	r20
    1b7c:	3f 91       	pop	r19
    1b7e:	2f 91       	pop	r18
    1b80:	0f 90       	pop	r0
    1b82:	0b be       	out	0x3b, r0	; 59
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	0b b6       	in	r0, 0x3b	; 59
    1b9a:	0f 92       	push	r0
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1bb4:	e0 91 77 21 	lds	r30, 0x2177	; 0x802177 <tc_tcd0_ccc_callback>
    1bb8:	f0 91 78 21 	lds	r31, 0x2178	; 0x802178 <tc_tcd0_ccc_callback+0x1>
    1bbc:	30 97       	sbiw	r30, 0x00	; 0
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    1bc0:	19 95       	eicall
	}
}
    1bc2:	ff 91       	pop	r31
    1bc4:	ef 91       	pop	r30
    1bc6:	bf 91       	pop	r27
    1bc8:	af 91       	pop	r26
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	7f 91       	pop	r23
    1bd0:	6f 91       	pop	r22
    1bd2:	5f 91       	pop	r21
    1bd4:	4f 91       	pop	r20
    1bd6:	3f 91       	pop	r19
    1bd8:	2f 91       	pop	r18
    1bda:	0f 90       	pop	r0
    1bdc:	0b be       	out	0x3b, r0	; 59
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	0f 90       	pop	r0
    1be4:	1f 90       	pop	r1
    1be6:	18 95       	reti

00001be8 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1be8:	1f 92       	push	r1
    1bea:	0f 92       	push	r0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	0f 92       	push	r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	0b b6       	in	r0, 0x3b	; 59
    1bf4:	0f 92       	push	r0
    1bf6:	2f 93       	push	r18
    1bf8:	3f 93       	push	r19
    1bfa:	4f 93       	push	r20
    1bfc:	5f 93       	push	r21
    1bfe:	6f 93       	push	r22
    1c00:	7f 93       	push	r23
    1c02:	8f 93       	push	r24
    1c04:	9f 93       	push	r25
    1c06:	af 93       	push	r26
    1c08:	bf 93       	push	r27
    1c0a:	ef 93       	push	r30
    1c0c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1c0e:	e0 91 75 21 	lds	r30, 0x2175	; 0x802175 <tc_tcd0_ccd_callback>
    1c12:	f0 91 76 21 	lds	r31, 0x2176	; 0x802176 <tc_tcd0_ccd_callback+0x1>
    1c16:	30 97       	sbiw	r30, 0x00	; 0
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    1c1a:	19 95       	eicall
	}
}
    1c1c:	ff 91       	pop	r31
    1c1e:	ef 91       	pop	r30
    1c20:	bf 91       	pop	r27
    1c22:	af 91       	pop	r26
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	7f 91       	pop	r23
    1c2a:	6f 91       	pop	r22
    1c2c:	5f 91       	pop	r21
    1c2e:	4f 91       	pop	r20
    1c30:	3f 91       	pop	r19
    1c32:	2f 91       	pop	r18
    1c34:	0f 90       	pop	r0
    1c36:	0b be       	out	0x3b, r0	; 59
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	0b b6       	in	r0, 0x3b	; 59
    1c4e:	0f 92       	push	r0
    1c50:	2f 93       	push	r18
    1c52:	3f 93       	push	r19
    1c54:	4f 93       	push	r20
    1c56:	5f 93       	push	r21
    1c58:	6f 93       	push	r22
    1c5a:	7f 93       	push	r23
    1c5c:	8f 93       	push	r24
    1c5e:	9f 93       	push	r25
    1c60:	af 93       	push	r26
    1c62:	bf 93       	push	r27
    1c64:	ef 93       	push	r30
    1c66:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1c68:	e0 91 73 21 	lds	r30, 0x2173	; 0x802173 <tc_tcd1_ovf_callback>
    1c6c:	f0 91 74 21 	lds	r31, 0x2174	; 0x802174 <tc_tcd1_ovf_callback+0x1>
    1c70:	30 97       	sbiw	r30, 0x00	; 0
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1c74:	19 95       	eicall
	}
}
    1c76:	ff 91       	pop	r31
    1c78:	ef 91       	pop	r30
    1c7a:	bf 91       	pop	r27
    1c7c:	af 91       	pop	r26
    1c7e:	9f 91       	pop	r25
    1c80:	8f 91       	pop	r24
    1c82:	7f 91       	pop	r23
    1c84:	6f 91       	pop	r22
    1c86:	5f 91       	pop	r21
    1c88:	4f 91       	pop	r20
    1c8a:	3f 91       	pop	r19
    1c8c:	2f 91       	pop	r18
    1c8e:	0f 90       	pop	r0
    1c90:	0b be       	out	0x3b, r0	; 59
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	0f 90       	pop	r0
    1c98:	1f 90       	pop	r1
    1c9a:	18 95       	reti

00001c9c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	0b b6       	in	r0, 0x3b	; 59
    1ca8:	0f 92       	push	r0
    1caa:	2f 93       	push	r18
    1cac:	3f 93       	push	r19
    1cae:	4f 93       	push	r20
    1cb0:	5f 93       	push	r21
    1cb2:	6f 93       	push	r22
    1cb4:	7f 93       	push	r23
    1cb6:	8f 93       	push	r24
    1cb8:	9f 93       	push	r25
    1cba:	af 93       	push	r26
    1cbc:	bf 93       	push	r27
    1cbe:	ef 93       	push	r30
    1cc0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1cc2:	e0 91 71 21 	lds	r30, 0x2171	; 0x802171 <tc_tcd1_err_callback>
    1cc6:	f0 91 72 21 	lds	r31, 0x2172	; 0x802172 <tc_tcd1_err_callback+0x1>
    1cca:	30 97       	sbiw	r30, 0x00	; 0
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <__vector_84+0x34>
		tc_tcd1_err_callback();
    1cce:	19 95       	eicall
	}
}
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0b be       	out	0x3b, r0	; 59
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	0f 90       	pop	r0
    1cf2:	1f 90       	pop	r1
    1cf4:	18 95       	reti

00001cf6 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1cf6:	1f 92       	push	r1
    1cf8:	0f 92       	push	r0
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	0f 92       	push	r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	0b b6       	in	r0, 0x3b	; 59
    1d02:	0f 92       	push	r0
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1d1c:	e0 91 6f 21 	lds	r30, 0x216F	; 0x80216f <tc_tcd1_cca_callback>
    1d20:	f0 91 70 21 	lds	r31, 0x2170	; 0x802170 <tc_tcd1_cca_callback+0x1>
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1d28:	19 95       	eicall
	}
}
    1d2a:	ff 91       	pop	r31
    1d2c:	ef 91       	pop	r30
    1d2e:	bf 91       	pop	r27
    1d30:	af 91       	pop	r26
    1d32:	9f 91       	pop	r25
    1d34:	8f 91       	pop	r24
    1d36:	7f 91       	pop	r23
    1d38:	6f 91       	pop	r22
    1d3a:	5f 91       	pop	r21
    1d3c:	4f 91       	pop	r20
    1d3e:	3f 91       	pop	r19
    1d40:	2f 91       	pop	r18
    1d42:	0f 90       	pop	r0
    1d44:	0b be       	out	0x3b, r0	; 59
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	0f 90       	pop	r0
    1d4c:	1f 90       	pop	r1
    1d4e:	18 95       	reti

00001d50 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1d50:	1f 92       	push	r1
    1d52:	0f 92       	push	r0
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	0f 92       	push	r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	0b b6       	in	r0, 0x3b	; 59
    1d5c:	0f 92       	push	r0
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1d76:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <tc_tcd1_ccb_callback>
    1d7a:	f0 91 6e 21 	lds	r31, 0x216E	; 0x80216e <tc_tcd1_ccb_callback+0x1>
    1d7e:	30 97       	sbiw	r30, 0x00	; 0
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1d82:	19 95       	eicall
	}
}
    1d84:	ff 91       	pop	r31
    1d86:	ef 91       	pop	r30
    1d88:	bf 91       	pop	r27
    1d8a:	af 91       	pop	r26
    1d8c:	9f 91       	pop	r25
    1d8e:	8f 91       	pop	r24
    1d90:	7f 91       	pop	r23
    1d92:	6f 91       	pop	r22
    1d94:	5f 91       	pop	r21
    1d96:	4f 91       	pop	r20
    1d98:	3f 91       	pop	r19
    1d9a:	2f 91       	pop	r18
    1d9c:	0f 90       	pop	r0
    1d9e:	0b be       	out	0x3b, r0	; 59
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	0b b6       	in	r0, 0x3b	; 59
    1db6:	0f 92       	push	r0
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1dd0:	e0 91 6b 21 	lds	r30, 0x216B	; 0x80216b <tc_tce0_ovf_callback>
    1dd4:	f0 91 6c 21 	lds	r31, 0x216C	; 0x80216c <tc_tce0_ovf_callback+0x1>
    1dd8:	30 97       	sbiw	r30, 0x00	; 0
    1dda:	09 f0       	breq	.+2      	; 0x1dde <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1ddc:	19 95       	eicall
	}
}
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	bf 91       	pop	r27
    1de4:	af 91       	pop	r26
    1de6:	9f 91       	pop	r25
    1de8:	8f 91       	pop	r24
    1dea:	7f 91       	pop	r23
    1dec:	6f 91       	pop	r22
    1dee:	5f 91       	pop	r21
    1df0:	4f 91       	pop	r20
    1df2:	3f 91       	pop	r19
    1df4:	2f 91       	pop	r18
    1df6:	0f 90       	pop	r0
    1df8:	0b be       	out	0x3b, r0	; 59
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	0b b6       	in	r0, 0x3b	; 59
    1e10:	0f 92       	push	r0
    1e12:	2f 93       	push	r18
    1e14:	3f 93       	push	r19
    1e16:	4f 93       	push	r20
    1e18:	5f 93       	push	r21
    1e1a:	6f 93       	push	r22
    1e1c:	7f 93       	push	r23
    1e1e:	8f 93       	push	r24
    1e20:	9f 93       	push	r25
    1e22:	af 93       	push	r26
    1e24:	bf 93       	push	r27
    1e26:	ef 93       	push	r30
    1e28:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1e2a:	e0 91 69 21 	lds	r30, 0x2169	; 0x802169 <tc_tce0_err_callback>
    1e2e:	f0 91 6a 21 	lds	r31, 0x216A	; 0x80216a <tc_tce0_err_callback+0x1>
    1e32:	30 97       	sbiw	r30, 0x00	; 0
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <__vector_48+0x34>
		tc_tce0_err_callback();
    1e36:	19 95       	eicall
	}
}
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0b be       	out	0x3b, r0	; 59
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	0b b6       	in	r0, 0x3b	; 59
    1e6a:	0f 92       	push	r0
    1e6c:	2f 93       	push	r18
    1e6e:	3f 93       	push	r19
    1e70:	4f 93       	push	r20
    1e72:	5f 93       	push	r21
    1e74:	6f 93       	push	r22
    1e76:	7f 93       	push	r23
    1e78:	8f 93       	push	r24
    1e7a:	9f 93       	push	r25
    1e7c:	af 93       	push	r26
    1e7e:	bf 93       	push	r27
    1e80:	ef 93       	push	r30
    1e82:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1e84:	e0 91 67 21 	lds	r30, 0x2167	; 0x802167 <tc_tce0_cca_callback>
    1e88:	f0 91 68 21 	lds	r31, 0x2168	; 0x802168 <tc_tce0_cca_callback+0x1>
    1e8c:	30 97       	sbiw	r30, 0x00	; 0
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1e90:	19 95       	eicall
	}
}
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	7f 91       	pop	r23
    1ea0:	6f 91       	pop	r22
    1ea2:	5f 91       	pop	r21
    1ea4:	4f 91       	pop	r20
    1ea6:	3f 91       	pop	r19
    1ea8:	2f 91       	pop	r18
    1eaa:	0f 90       	pop	r0
    1eac:	0b be       	out	0x3b, r0	; 59
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	0b b6       	in	r0, 0x3b	; 59
    1ec4:	0f 92       	push	r0
    1ec6:	2f 93       	push	r18
    1ec8:	3f 93       	push	r19
    1eca:	4f 93       	push	r20
    1ecc:	5f 93       	push	r21
    1ece:	6f 93       	push	r22
    1ed0:	7f 93       	push	r23
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    1eda:	ef 93       	push	r30
    1edc:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1ede:	e0 91 65 21 	lds	r30, 0x2165	; 0x802165 <tc_tce0_ccb_callback>
    1ee2:	f0 91 66 21 	lds	r31, 0x2166	; 0x802166 <tc_tce0_ccb_callback+0x1>
    1ee6:	30 97       	sbiw	r30, 0x00	; 0
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <__vector_50+0x34>
		tc_tce0_ccb_callback();
    1eea:	19 95       	eicall
	}
}
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0b be       	out	0x3b, r0	; 59
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	0b b6       	in	r0, 0x3b	; 59
    1f1e:	0f 92       	push	r0
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1f38:	e0 91 63 21 	lds	r30, 0x2163	; 0x802163 <tc_tce0_ccc_callback>
    1f3c:	f0 91 64 21 	lds	r31, 0x2164	; 0x802164 <tc_tce0_ccc_callback+0x1>
    1f40:	30 97       	sbiw	r30, 0x00	; 0
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1f44:	19 95       	eicall
	}
}
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	bf 91       	pop	r27
    1f4c:	af 91       	pop	r26
    1f4e:	9f 91       	pop	r25
    1f50:	8f 91       	pop	r24
    1f52:	7f 91       	pop	r23
    1f54:	6f 91       	pop	r22
    1f56:	5f 91       	pop	r21
    1f58:	4f 91       	pop	r20
    1f5a:	3f 91       	pop	r19
    1f5c:	2f 91       	pop	r18
    1f5e:	0f 90       	pop	r0
    1f60:	0b be       	out	0x3b, r0	; 59
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	0b b6       	in	r0, 0x3b	; 59
    1f78:	0f 92       	push	r0
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	4f 93       	push	r20
    1f80:	5f 93       	push	r21
    1f82:	6f 93       	push	r22
    1f84:	7f 93       	push	r23
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
    1f8e:	ef 93       	push	r30
    1f90:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1f92:	e0 91 61 21 	lds	r30, 0x2161	; 0x802161 <tc_tce0_ccd_callback>
    1f96:	f0 91 62 21 	lds	r31, 0x2162	; 0x802162 <tc_tce0_ccd_callback+0x1>
    1f9a:	30 97       	sbiw	r30, 0x00	; 0
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    1f9e:	19 95       	eicall
	}
}
    1fa0:	ff 91       	pop	r31
    1fa2:	ef 91       	pop	r30
    1fa4:	bf 91       	pop	r27
    1fa6:	af 91       	pop	r26
    1fa8:	9f 91       	pop	r25
    1faa:	8f 91       	pop	r24
    1fac:	7f 91       	pop	r23
    1fae:	6f 91       	pop	r22
    1fb0:	5f 91       	pop	r21
    1fb2:	4f 91       	pop	r20
    1fb4:	3f 91       	pop	r19
    1fb6:	2f 91       	pop	r18
    1fb8:	0f 90       	pop	r0
    1fba:	0b be       	out	0x3b, r0	; 59
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	0b b6       	in	r0, 0x3b	; 59
    1fd2:	0f 92       	push	r0
    1fd4:	2f 93       	push	r18
    1fd6:	3f 93       	push	r19
    1fd8:	4f 93       	push	r20
    1fda:	5f 93       	push	r21
    1fdc:	6f 93       	push	r22
    1fde:	7f 93       	push	r23
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	af 93       	push	r26
    1fe6:	bf 93       	push	r27
    1fe8:	ef 93       	push	r30
    1fea:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1fec:	e0 91 5f 21 	lds	r30, 0x215F	; 0x80215f <tc_tce1_ovf_callback>
    1ff0:	f0 91 60 21 	lds	r31, 0x2160	; 0x802160 <tc_tce1_ovf_callback+0x1>
    1ff4:	30 97       	sbiw	r30, 0x00	; 0
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <__vector_53+0x34>
		tc_tce1_ovf_callback();
    1ff8:	19 95       	eicall
	}
}
    1ffa:	ff 91       	pop	r31
    1ffc:	ef 91       	pop	r30
    1ffe:	bf 91       	pop	r27
    2000:	af 91       	pop	r26
    2002:	9f 91       	pop	r25
    2004:	8f 91       	pop	r24
    2006:	7f 91       	pop	r23
    2008:	6f 91       	pop	r22
    200a:	5f 91       	pop	r21
    200c:	4f 91       	pop	r20
    200e:	3f 91       	pop	r19
    2010:	2f 91       	pop	r18
    2012:	0f 90       	pop	r0
    2014:	0b be       	out	0x3b, r0	; 59
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	0f 90       	pop	r0
    201c:	1f 90       	pop	r1
    201e:	18 95       	reti

00002020 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    2020:	1f 92       	push	r1
    2022:	0f 92       	push	r0
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	0f 92       	push	r0
    2028:	11 24       	eor	r1, r1
    202a:	0b b6       	in	r0, 0x3b	; 59
    202c:	0f 92       	push	r0
    202e:	2f 93       	push	r18
    2030:	3f 93       	push	r19
    2032:	4f 93       	push	r20
    2034:	5f 93       	push	r21
    2036:	6f 93       	push	r22
    2038:	7f 93       	push	r23
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	af 93       	push	r26
    2040:	bf 93       	push	r27
    2042:	ef 93       	push	r30
    2044:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    2046:	e0 91 5d 21 	lds	r30, 0x215D	; 0x80215d <tc_tce1_err_callback>
    204a:	f0 91 5e 21 	lds	r31, 0x215E	; 0x80215e <tc_tce1_err_callback+0x1>
    204e:	30 97       	sbiw	r30, 0x00	; 0
    2050:	09 f0       	breq	.+2      	; 0x2054 <__vector_54+0x34>
		tc_tce1_err_callback();
    2052:	19 95       	eicall
	}
}
    2054:	ff 91       	pop	r31
    2056:	ef 91       	pop	r30
    2058:	bf 91       	pop	r27
    205a:	af 91       	pop	r26
    205c:	9f 91       	pop	r25
    205e:	8f 91       	pop	r24
    2060:	7f 91       	pop	r23
    2062:	6f 91       	pop	r22
    2064:	5f 91       	pop	r21
    2066:	4f 91       	pop	r20
    2068:	3f 91       	pop	r19
    206a:	2f 91       	pop	r18
    206c:	0f 90       	pop	r0
    206e:	0b be       	out	0x3b, r0	; 59
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	0f 90       	pop	r0
    2076:	1f 90       	pop	r1
    2078:	18 95       	reti

0000207a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    207a:	1f 92       	push	r1
    207c:	0f 92       	push	r0
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	0f 92       	push	r0
    2082:	11 24       	eor	r1, r1
    2084:	0b b6       	in	r0, 0x3b	; 59
    2086:	0f 92       	push	r0
    2088:	2f 93       	push	r18
    208a:	3f 93       	push	r19
    208c:	4f 93       	push	r20
    208e:	5f 93       	push	r21
    2090:	6f 93       	push	r22
    2092:	7f 93       	push	r23
    2094:	8f 93       	push	r24
    2096:	9f 93       	push	r25
    2098:	af 93       	push	r26
    209a:	bf 93       	push	r27
    209c:	ef 93       	push	r30
    209e:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    20a0:	e0 91 5b 21 	lds	r30, 0x215B	; 0x80215b <tc_tce1_cca_callback>
    20a4:	f0 91 5c 21 	lds	r31, 0x215C	; 0x80215c <tc_tce1_cca_callback+0x1>
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	09 f0       	breq	.+2      	; 0x20ae <__vector_55+0x34>
		tc_tce1_cca_callback();
    20ac:	19 95       	eicall
	}
}
    20ae:	ff 91       	pop	r31
    20b0:	ef 91       	pop	r30
    20b2:	bf 91       	pop	r27
    20b4:	af 91       	pop	r26
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	7f 91       	pop	r23
    20bc:	6f 91       	pop	r22
    20be:	5f 91       	pop	r21
    20c0:	4f 91       	pop	r20
    20c2:	3f 91       	pop	r19
    20c4:	2f 91       	pop	r18
    20c6:	0f 90       	pop	r0
    20c8:	0b be       	out	0x3b, r0	; 59
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	0b b6       	in	r0, 0x3b	; 59
    20e0:	0f 92       	push	r0
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    20fa:	e0 91 59 21 	lds	r30, 0x2159	; 0x802159 <tc_tce1_ccb_callback>
    20fe:	f0 91 5a 21 	lds	r31, 0x215A	; 0x80215a <tc_tce1_ccb_callback+0x1>
    2102:	30 97       	sbiw	r30, 0x00	; 0
    2104:	09 f0       	breq	.+2      	; 0x2108 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    2106:	19 95       	eicall
	}
}
    2108:	ff 91       	pop	r31
    210a:	ef 91       	pop	r30
    210c:	bf 91       	pop	r27
    210e:	af 91       	pop	r26
    2110:	9f 91       	pop	r25
    2112:	8f 91       	pop	r24
    2114:	7f 91       	pop	r23
    2116:	6f 91       	pop	r22
    2118:	5f 91       	pop	r21
    211a:	4f 91       	pop	r20
    211c:	3f 91       	pop	r19
    211e:	2f 91       	pop	r18
    2120:	0f 90       	pop	r0
    2122:	0b be       	out	0x3b, r0	; 59
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	0f 90       	pop	r0
    212a:	1f 90       	pop	r1
    212c:	18 95       	reti

0000212e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	0b b6       	in	r0, 0x3b	; 59
    213a:	0f 92       	push	r0
    213c:	2f 93       	push	r18
    213e:	3f 93       	push	r19
    2140:	4f 93       	push	r20
    2142:	5f 93       	push	r21
    2144:	6f 93       	push	r22
    2146:	7f 93       	push	r23
    2148:	8f 93       	push	r24
    214a:	9f 93       	push	r25
    214c:	af 93       	push	r26
    214e:	bf 93       	push	r27
    2150:	ef 93       	push	r30
    2152:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    2154:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <tc_tcf0_ovf_callback>
    2158:	f0 91 58 21 	lds	r31, 0x2158	; 0x802158 <tc_tcf0_ovf_callback+0x1>
    215c:	30 97       	sbiw	r30, 0x00	; 0
    215e:	09 f0       	breq	.+2      	; 0x2162 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    2160:	19 95       	eicall
	}
}
    2162:	ff 91       	pop	r31
    2164:	ef 91       	pop	r30
    2166:	bf 91       	pop	r27
    2168:	af 91       	pop	r26
    216a:	9f 91       	pop	r25
    216c:	8f 91       	pop	r24
    216e:	7f 91       	pop	r23
    2170:	6f 91       	pop	r22
    2172:	5f 91       	pop	r21
    2174:	4f 91       	pop	r20
    2176:	3f 91       	pop	r19
    2178:	2f 91       	pop	r18
    217a:	0f 90       	pop	r0
    217c:	0b be       	out	0x3b, r0	; 59
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    2188:	1f 92       	push	r1
    218a:	0f 92       	push	r0
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	0f 92       	push	r0
    2190:	11 24       	eor	r1, r1
    2192:	0b b6       	in	r0, 0x3b	; 59
    2194:	0f 92       	push	r0
    2196:	2f 93       	push	r18
    2198:	3f 93       	push	r19
    219a:	4f 93       	push	r20
    219c:	5f 93       	push	r21
    219e:	6f 93       	push	r22
    21a0:	7f 93       	push	r23
    21a2:	8f 93       	push	r24
    21a4:	9f 93       	push	r25
    21a6:	af 93       	push	r26
    21a8:	bf 93       	push	r27
    21aa:	ef 93       	push	r30
    21ac:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    21ae:	e0 91 55 21 	lds	r30, 0x2155	; 0x802155 <tc_tcf0_err_callback>
    21b2:	f0 91 56 21 	lds	r31, 0x2156	; 0x802156 <tc_tcf0_err_callback+0x1>
    21b6:	30 97       	sbiw	r30, 0x00	; 0
    21b8:	09 f0       	breq	.+2      	; 0x21bc <__vector_109+0x34>
		tc_tcf0_err_callback();
    21ba:	19 95       	eicall
	}
}
    21bc:	ff 91       	pop	r31
    21be:	ef 91       	pop	r30
    21c0:	bf 91       	pop	r27
    21c2:	af 91       	pop	r26
    21c4:	9f 91       	pop	r25
    21c6:	8f 91       	pop	r24
    21c8:	7f 91       	pop	r23
    21ca:	6f 91       	pop	r22
    21cc:	5f 91       	pop	r21
    21ce:	4f 91       	pop	r20
    21d0:	3f 91       	pop	r19
    21d2:	2f 91       	pop	r18
    21d4:	0f 90       	pop	r0
    21d6:	0b be       	out	0x3b, r0	; 59
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	0f 90       	pop	r0
    21de:	1f 90       	pop	r1
    21e0:	18 95       	reti

000021e2 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    21e2:	1f 92       	push	r1
    21e4:	0f 92       	push	r0
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	0f 92       	push	r0
    21ea:	11 24       	eor	r1, r1
    21ec:	0b b6       	in	r0, 0x3b	; 59
    21ee:	0f 92       	push	r0
    21f0:	2f 93       	push	r18
    21f2:	3f 93       	push	r19
    21f4:	4f 93       	push	r20
    21f6:	5f 93       	push	r21
    21f8:	6f 93       	push	r22
    21fa:	7f 93       	push	r23
    21fc:	8f 93       	push	r24
    21fe:	9f 93       	push	r25
    2200:	af 93       	push	r26
    2202:	bf 93       	push	r27
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    2208:	e0 91 53 21 	lds	r30, 0x2153	; 0x802153 <tc_tcf0_cca_callback>
    220c:	f0 91 54 21 	lds	r31, 0x2154	; 0x802154 <tc_tcf0_cca_callback+0x1>
    2210:	30 97       	sbiw	r30, 0x00	; 0
    2212:	09 f0       	breq	.+2      	; 0x2216 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    2214:	19 95       	eicall
	}
}
    2216:	ff 91       	pop	r31
    2218:	ef 91       	pop	r30
    221a:	bf 91       	pop	r27
    221c:	af 91       	pop	r26
    221e:	9f 91       	pop	r25
    2220:	8f 91       	pop	r24
    2222:	7f 91       	pop	r23
    2224:	6f 91       	pop	r22
    2226:	5f 91       	pop	r21
    2228:	4f 91       	pop	r20
    222a:	3f 91       	pop	r19
    222c:	2f 91       	pop	r18
    222e:	0f 90       	pop	r0
    2230:	0b be       	out	0x3b, r0	; 59
    2232:	0f 90       	pop	r0
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	0f 90       	pop	r0
    2238:	1f 90       	pop	r1
    223a:	18 95       	reti

0000223c <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	0b b6       	in	r0, 0x3b	; 59
    2248:	0f 92       	push	r0
    224a:	2f 93       	push	r18
    224c:	3f 93       	push	r19
    224e:	4f 93       	push	r20
    2250:	5f 93       	push	r21
    2252:	6f 93       	push	r22
    2254:	7f 93       	push	r23
    2256:	8f 93       	push	r24
    2258:	9f 93       	push	r25
    225a:	af 93       	push	r26
    225c:	bf 93       	push	r27
    225e:	ef 93       	push	r30
    2260:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    2262:	e0 91 51 21 	lds	r30, 0x2151	; 0x802151 <tc_tcf0_ccb_callback>
    2266:	f0 91 52 21 	lds	r31, 0x2152	; 0x802152 <tc_tcf0_ccb_callback+0x1>
    226a:	30 97       	sbiw	r30, 0x00	; 0
    226c:	09 f0       	breq	.+2      	; 0x2270 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    226e:	19 95       	eicall
	}
}
    2270:	ff 91       	pop	r31
    2272:	ef 91       	pop	r30
    2274:	bf 91       	pop	r27
    2276:	af 91       	pop	r26
    2278:	9f 91       	pop	r25
    227a:	8f 91       	pop	r24
    227c:	7f 91       	pop	r23
    227e:	6f 91       	pop	r22
    2280:	5f 91       	pop	r21
    2282:	4f 91       	pop	r20
    2284:	3f 91       	pop	r19
    2286:	2f 91       	pop	r18
    2288:	0f 90       	pop	r0
    228a:	0b be       	out	0x3b, r0	; 59
    228c:	0f 90       	pop	r0
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	0f 90       	pop	r0
    2292:	1f 90       	pop	r1
    2294:	18 95       	reti

00002296 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    2296:	1f 92       	push	r1
    2298:	0f 92       	push	r0
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	0f 92       	push	r0
    229e:	11 24       	eor	r1, r1
    22a0:	0b b6       	in	r0, 0x3b	; 59
    22a2:	0f 92       	push	r0
    22a4:	2f 93       	push	r18
    22a6:	3f 93       	push	r19
    22a8:	4f 93       	push	r20
    22aa:	5f 93       	push	r21
    22ac:	6f 93       	push	r22
    22ae:	7f 93       	push	r23
    22b0:	8f 93       	push	r24
    22b2:	9f 93       	push	r25
    22b4:	af 93       	push	r26
    22b6:	bf 93       	push	r27
    22b8:	ef 93       	push	r30
    22ba:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    22bc:	e0 91 4f 21 	lds	r30, 0x214F	; 0x80214f <tc_tcf0_ccc_callback>
    22c0:	f0 91 50 21 	lds	r31, 0x2150	; 0x802150 <tc_tcf0_ccc_callback+0x1>
    22c4:	30 97       	sbiw	r30, 0x00	; 0
    22c6:	09 f0       	breq	.+2      	; 0x22ca <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    22c8:	19 95       	eicall
	}
}
    22ca:	ff 91       	pop	r31
    22cc:	ef 91       	pop	r30
    22ce:	bf 91       	pop	r27
    22d0:	af 91       	pop	r26
    22d2:	9f 91       	pop	r25
    22d4:	8f 91       	pop	r24
    22d6:	7f 91       	pop	r23
    22d8:	6f 91       	pop	r22
    22da:	5f 91       	pop	r21
    22dc:	4f 91       	pop	r20
    22de:	3f 91       	pop	r19
    22e0:	2f 91       	pop	r18
    22e2:	0f 90       	pop	r0
    22e4:	0b be       	out	0x3b, r0	; 59
    22e6:	0f 90       	pop	r0
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	0f 90       	pop	r0
    22ec:	1f 90       	pop	r1
    22ee:	18 95       	reti

000022f0 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	0b b6       	in	r0, 0x3b	; 59
    22fc:	0f 92       	push	r0
    22fe:	2f 93       	push	r18
    2300:	3f 93       	push	r19
    2302:	4f 93       	push	r20
    2304:	5f 93       	push	r21
    2306:	6f 93       	push	r22
    2308:	7f 93       	push	r23
    230a:	8f 93       	push	r24
    230c:	9f 93       	push	r25
    230e:	af 93       	push	r26
    2310:	bf 93       	push	r27
    2312:	ef 93       	push	r30
    2314:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    2316:	e0 91 4d 21 	lds	r30, 0x214D	; 0x80214d <tc_tcf0_ccd_callback>
    231a:	f0 91 4e 21 	lds	r31, 0x214E	; 0x80214e <tc_tcf0_ccd_callback+0x1>
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	09 f0       	breq	.+2      	; 0x2324 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    2322:	19 95       	eicall
	}
}
    2324:	ff 91       	pop	r31
    2326:	ef 91       	pop	r30
    2328:	bf 91       	pop	r27
    232a:	af 91       	pop	r26
    232c:	9f 91       	pop	r25
    232e:	8f 91       	pop	r24
    2330:	7f 91       	pop	r23
    2332:	6f 91       	pop	r22
    2334:	5f 91       	pop	r21
    2336:	4f 91       	pop	r20
    2338:	3f 91       	pop	r19
    233a:	2f 91       	pop	r18
    233c:	0f 90       	pop	r0
    233e:	0b be       	out	0x3b, r0	; 59
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	0f 90       	pop	r0
    2346:	1f 90       	pop	r1
    2348:	18 95       	reti

0000234a <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    234a:	1f 93       	push	r17
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	ec 01       	movw	r28, r24
	irqflags_t iflags = cpu_irq_save();
    2352:	0e 94 44 0b 	call	0x1688	; 0x1688 <cpu_irq_save>
    2356:	18 2f       	mov	r17, r24

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2358:	c1 15       	cp	r28, r1
    235a:	88 e0       	ldi	r24, 0x08	; 8
    235c:	d8 07       	cpc	r29, r24
    235e:	11 f4       	brne	.+4      	; 0x2364 <tc_enable+0x1a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	05 c0       	rjmp	.+10     	; 0x236e <tc_enable+0x24>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    2364:	c0 34       	cpi	r28, 0x40	; 64
    2366:	88 e0       	ldi	r24, 0x08	; 8
    2368:	d8 07       	cpc	r29, r24
    236a:	39 f4       	brne	.+14     	; 0x237a <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    236c:	62 e0       	ldi	r22, 0x02	; 2
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2374:	64 e0       	ldi	r22, 0x04	; 4
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	2b c0       	rjmp	.+86     	; 0x23d0 <tc_enable+0x86>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    237a:	c1 15       	cp	r28, r1
    237c:	89 e0       	ldi	r24, 0x09	; 9
    237e:	d8 07       	cpc	r29, r24
    2380:	11 f4       	brne	.+4      	; 0x2386 <tc_enable+0x3c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <tc_enable+0x46>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2386:	c0 34       	cpi	r28, 0x40	; 64
    2388:	89 e0       	ldi	r24, 0x09	; 9
    238a:	d8 07       	cpc	r29, r24
    238c:	39 f4       	brne	.+14     	; 0x239c <tc_enable+0x52>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    238e:	62 e0       	ldi	r22, 0x02	; 2
    2390:	84 e0       	ldi	r24, 0x04	; 4
    2392:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	84 e0       	ldi	r24, 0x04	; 4
    239a:	1a c0       	rjmp	.+52     	; 0x23d0 <tc_enable+0x86>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    239c:	c1 15       	cp	r28, r1
    239e:	8a e0       	ldi	r24, 0x0A	; 10
    23a0:	d8 07       	cpc	r29, r24
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <tc_enable+0x5e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    23a4:	61 e0       	ldi	r22, 0x01	; 1
    23a6:	05 c0       	rjmp	.+10     	; 0x23b2 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    23a8:	c0 34       	cpi	r28, 0x40	; 64
    23aa:	8a e0       	ldi	r24, 0x0A	; 10
    23ac:	d8 07       	cpc	r29, r24
    23ae:	39 f4       	brne	.+14     	; 0x23be <tc_enable+0x74>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	85 e0       	ldi	r24, 0x05	; 5
    23b4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	85 e0       	ldi	r24, 0x05	; 5
    23bc:	09 c0       	rjmp	.+18     	; 0x23d0 <tc_enable+0x86>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    23be:	c1 15       	cp	r28, r1
    23c0:	db 40       	sbci	r29, 0x0B	; 11
    23c2:	a9 f4       	brne	.+42     	; 0x23ee <tc_enable+0xa4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    23c4:	61 e0       	ldi	r22, 0x01	; 1
    23c6:	86 e0       	ldi	r24, 0x06	; 6
    23c8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    23cc:	64 e0       	ldi	r22, 0x04	; 4
    23ce:	86 e0       	ldi	r24, 0x06	; 6
    23d0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    23d4:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
    23d8:	8f 3f       	cpi	r24, 0xFF	; 255
    23da:	09 f4       	brne	.+2      	; 0x23de <tc_enable+0x94>
    23dc:	ff cf       	rjmp	.-2      	; 0x23dc <tc_enable+0x92>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    23de:	0e 94 44 0b 	call	0x1688	; 0x1688 <cpu_irq_save>

	++sleepmgr_locks[mode];
    23e2:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
    23e6:	9f 5f       	subi	r25, 0xFF	; 255
    23e8:	90 93 73 24 	sts	0x2473, r25	; 0x802473 <sleepmgr_locks+0x1>

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23ec:	8f bf       	out	0x3f, r24	; 63
    23ee:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	08 95       	ret

000023f8 <tc_disable>:
 *
 * \note
 * mask TC clock (sysclk).
 */
void tc_disable(volatile void *tc)
{
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	ec 01       	movw	r28, r24
	irqflags_t iflags = cpu_irq_save();
    2400:	0e 94 44 0b 	call	0x1688	; 0x1688 <cpu_irq_save>
    2404:	18 2f       	mov	r17, r24
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2406:	80 91 73 24 	lds	r24, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
    240a:	81 11       	cpse	r24, r1
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <tc_disable+0x18>
    240e:	ff cf       	rjmp	.-2      	; 0x240e <tc_disable+0x16>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    2410:	0e 94 44 0b 	call	0x1688	; 0x1688 <cpu_irq_save>

	--sleepmgr_locks[mode];
    2414:	90 91 73 24 	lds	r25, 0x2473	; 0x802473 <sleepmgr_locks+0x1>
    2418:	91 50       	subi	r25, 0x01	; 1
    241a:	90 93 73 24 	sts	0x2473, r25	; 0x802473 <sleepmgr_locks+0x1>
    241e:	8f bf       	out	0x3f, r24	; 63

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2420:	c1 15       	cp	r28, r1
    2422:	88 e0       	ldi	r24, 0x08	; 8
    2424:	d8 07       	cpc	r29, r24
    2426:	11 f4       	brne	.+4      	; 0x242c <tc_disable+0x34>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <tc_disable+0x3e>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    242c:	c0 34       	cpi	r28, 0x40	; 64
    242e:	88 e0       	ldi	r24, 0x08	; 8
    2430:	d8 07       	cpc	r29, r24
    2432:	39 f4       	brne	.+14     	; 0x2442 <tc_disable+0x4a>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2434:	62 e0       	ldi	r22, 0x02	; 2
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	0e 94 07 0b 	call	0x160e	; 0x160e <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    243c:	64 e0       	ldi	r22, 0x04	; 4
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	2b c0       	rjmp	.+86     	; 0x2498 <tc_disable+0xa0>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2442:	c1 15       	cp	r28, r1
    2444:	89 e0       	ldi	r24, 0x09	; 9
    2446:	d8 07       	cpc	r29, r24
    2448:	11 f4       	brne	.+4      	; 0x244e <tc_disable+0x56>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	05 c0       	rjmp	.+10     	; 0x2458 <tc_disable+0x60>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    244e:	c0 34       	cpi	r28, 0x40	; 64
    2450:	89 e0       	ldi	r24, 0x09	; 9
    2452:	d8 07       	cpc	r29, r24
    2454:	39 f4       	brne	.+14     	; 0x2464 <tc_disable+0x6c>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	84 e0       	ldi	r24, 0x04	; 4
    245a:	0e 94 07 0b 	call	0x160e	; 0x160e <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    245e:	64 e0       	ldi	r22, 0x04	; 4
    2460:	84 e0       	ldi	r24, 0x04	; 4
    2462:	1a c0       	rjmp	.+52     	; 0x2498 <tc_disable+0xa0>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2464:	c1 15       	cp	r28, r1
    2466:	8a e0       	ldi	r24, 0x0A	; 10
    2468:	d8 07       	cpc	r29, r24
    246a:	11 f4       	brne	.+4      	; 0x2470 <tc_disable+0x78>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	05 c0       	rjmp	.+10     	; 0x247a <tc_disable+0x82>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2470:	c0 34       	cpi	r28, 0x40	; 64
    2472:	8a e0       	ldi	r24, 0x0A	; 10
    2474:	d8 07       	cpc	r29, r24
    2476:	39 f4       	brne	.+14     	; 0x2486 <tc_disable+0x8e>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2478:	62 e0       	ldi	r22, 0x02	; 2
    247a:	85 e0       	ldi	r24, 0x05	; 5
    247c:	0e 94 07 0b 	call	0x160e	; 0x160e <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2480:	64 e0       	ldi	r22, 0x04	; 4
    2482:	85 e0       	ldi	r24, 0x05	; 5
    2484:	09 c0       	rjmp	.+18     	; 0x2498 <tc_disable+0xa0>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2486:	c1 15       	cp	r28, r1
    2488:	db 40       	sbci	r29, 0x0B	; 11
    248a:	41 f4       	brne	.+16     	; 0x249c <tc_disable+0xa4>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	86 e0       	ldi	r24, 0x06	; 6
    2490:	0e 94 07 0b 	call	0x160e	; 0x160e <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2494:	64 e0       	ldi	r22, 0x04	; 4
    2496:	86 e0       	ldi	r24, 0x06	; 6
    2498:	0e 94 07 0b 	call	0x160e	; 0x160e <sysclk_disable_module>
    249c:	1f bf       	out	0x3f, r17	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	08 95       	ret

000024a6 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    24a6:	81 15       	cp	r24, r1
    24a8:	28 e0       	ldi	r18, 0x08	; 8
    24aa:	92 07       	cpc	r25, r18
    24ac:	29 f4       	brne	.+10     	; 0x24b8 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    24ae:	60 93 93 21 	sts	0x2193, r22	; 0x802193 <tc_tcc0_ovf_callback>
    24b2:	70 93 94 21 	sts	0x2194, r23	; 0x802194 <tc_tcc0_ovf_callback+0x1>
    24b6:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    24b8:	80 34       	cpi	r24, 0x40	; 64
    24ba:	28 e0       	ldi	r18, 0x08	; 8
    24bc:	92 07       	cpc	r25, r18
    24be:	29 f4       	brne	.+10     	; 0x24ca <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    24c0:	60 93 87 21 	sts	0x2187, r22	; 0x802187 <tc_tcc1_ovf_callback>
    24c4:	70 93 88 21 	sts	0x2188, r23	; 0x802188 <tc_tcc1_ovf_callback+0x1>
    24c8:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    24ca:	81 15       	cp	r24, r1
    24cc:	29 e0       	ldi	r18, 0x09	; 9
    24ce:	92 07       	cpc	r25, r18
    24d0:	29 f4       	brne	.+10     	; 0x24dc <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    24d2:	60 93 7f 21 	sts	0x217F, r22	; 0x80217f <tc_tcd0_ovf_callback>
    24d6:	70 93 80 21 	sts	0x2180, r23	; 0x802180 <tc_tcd0_ovf_callback+0x1>
    24da:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    24dc:	80 34       	cpi	r24, 0x40	; 64
    24de:	29 e0       	ldi	r18, 0x09	; 9
    24e0:	92 07       	cpc	r25, r18
    24e2:	29 f4       	brne	.+10     	; 0x24ee <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    24e4:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <tc_tcd1_ovf_callback>
    24e8:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <tc_tcd1_ovf_callback+0x1>
    24ec:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    24ee:	81 15       	cp	r24, r1
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	92 07       	cpc	r25, r18
    24f4:	29 f4       	brne	.+10     	; 0x2500 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    24f6:	60 93 6b 21 	sts	0x216B, r22	; 0x80216b <tc_tce0_ovf_callback>
    24fa:	70 93 6c 21 	sts	0x216C, r23	; 0x80216c <tc_tce0_ovf_callback+0x1>
    24fe:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2500:	80 34       	cpi	r24, 0x40	; 64
    2502:	2a e0       	ldi	r18, 0x0A	; 10
    2504:	92 07       	cpc	r25, r18
    2506:	29 f4       	brne	.+10     	; 0x2512 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    2508:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <tc_tce1_ovf_callback>
    250c:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <tc_tce1_ovf_callback+0x1>
    2510:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2512:	81 15       	cp	r24, r1
    2514:	9b 40       	sbci	r25, 0x0B	; 11
    2516:	21 f4       	brne	.+8      	; 0x2520 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    2518:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <tc_tcf0_ovf_callback>
    251c:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <tc_tcf0_ovf_callback+0x1>
    2520:	08 95       	ret

00002522 <tc_set_error_interrupt_callback>:
}

void tc_set_error_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2522:	81 15       	cp	r24, r1
    2524:	28 e0       	ldi	r18, 0x08	; 8
    2526:	92 07       	cpc	r25, r18
    2528:	29 f4       	brne	.+10     	; 0x2534 <tc_set_error_interrupt_callback+0x12>
		tc_tcc0_err_callback = callback;
    252a:	60 93 91 21 	sts	0x2191, r22	; 0x802191 <tc_tcc0_err_callback>
    252e:	70 93 92 21 	sts	0x2192, r23	; 0x802192 <tc_tcc0_err_callback+0x1>
    2532:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    2534:	80 34       	cpi	r24, 0x40	; 64
    2536:	28 e0       	ldi	r18, 0x08	; 8
    2538:	92 07       	cpc	r25, r18
    253a:	29 f4       	brne	.+10     	; 0x2546 <tc_set_error_interrupt_callback+0x24>
		tc_tcc1_err_callback = callback;
    253c:	60 93 85 21 	sts	0x2185, r22	; 0x802185 <tc_tcc1_err_callback>
    2540:	70 93 86 21 	sts	0x2186, r23	; 0x802186 <tc_tcc1_err_callback+0x1>
    2544:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2546:	81 15       	cp	r24, r1
    2548:	29 e0       	ldi	r18, 0x09	; 9
    254a:	92 07       	cpc	r25, r18
    254c:	29 f4       	brne	.+10     	; 0x2558 <tc_set_error_interrupt_callback+0x36>
		tc_tcd0_err_callback = callback;
    254e:	60 93 7d 21 	sts	0x217D, r22	; 0x80217d <tc_tcd0_err_callback>
    2552:	70 93 7e 21 	sts	0x217E, r23	; 0x80217e <tc_tcd0_err_callback+0x1>
    2556:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2558:	80 34       	cpi	r24, 0x40	; 64
    255a:	29 e0       	ldi	r18, 0x09	; 9
    255c:	92 07       	cpc	r25, r18
    255e:	29 f4       	brne	.+10     	; 0x256a <tc_set_error_interrupt_callback+0x48>
		tc_tcd1_err_callback = callback;
    2560:	60 93 71 21 	sts	0x2171, r22	; 0x802171 <tc_tcd1_err_callback>
    2564:	70 93 72 21 	sts	0x2172, r23	; 0x802172 <tc_tcd1_err_callback+0x1>
    2568:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    256a:	81 15       	cp	r24, r1
    256c:	2a e0       	ldi	r18, 0x0A	; 10
    256e:	92 07       	cpc	r25, r18
    2570:	29 f4       	brne	.+10     	; 0x257c <tc_set_error_interrupt_callback+0x5a>
		tc_tce0_err_callback = callback;
    2572:	60 93 69 21 	sts	0x2169, r22	; 0x802169 <tc_tce0_err_callback>
    2576:	70 93 6a 21 	sts	0x216A, r23	; 0x80216a <tc_tce0_err_callback+0x1>
    257a:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    257c:	80 34       	cpi	r24, 0x40	; 64
    257e:	2a e0       	ldi	r18, 0x0A	; 10
    2580:	92 07       	cpc	r25, r18
    2582:	29 f4       	brne	.+10     	; 0x258e <tc_set_error_interrupt_callback+0x6c>
		tc_tce1_err_callback = callback;
    2584:	60 93 5d 21 	sts	0x215D, r22	; 0x80215d <tc_tce1_err_callback>
    2588:	70 93 5e 21 	sts	0x215E, r23	; 0x80215e <tc_tce1_err_callback+0x1>
    258c:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    258e:	81 15       	cp	r24, r1
    2590:	9b 40       	sbci	r25, 0x0B	; 11
    2592:	21 f4       	brne	.+8      	; 0x259c <tc_set_error_interrupt_callback+0x7a>
		tc_tcf0_err_callback = callback;
    2594:	60 93 55 21 	sts	0x2155, r22	; 0x802155 <tc_tcf0_err_callback>
    2598:	70 93 56 21 	sts	0x2156, r23	; 0x802156 <tc_tcf0_err_callback+0x1>
    259c:	08 95       	ret

0000259e <tc_set_cca_interrupt_callback>:
}

void tc_set_cca_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    259e:	81 15       	cp	r24, r1
    25a0:	28 e0       	ldi	r18, 0x08	; 8
    25a2:	92 07       	cpc	r25, r18
    25a4:	29 f4       	brne	.+10     	; 0x25b0 <tc_set_cca_interrupt_callback+0x12>
		tc_tcc0_cca_callback = callback;
    25a6:	60 93 8f 21 	sts	0x218F, r22	; 0x80218f <tc_tcc0_cca_callback>
    25aa:	70 93 90 21 	sts	0x2190, r23	; 0x802190 <tc_tcc0_cca_callback+0x1>
    25ae:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    25b0:	80 34       	cpi	r24, 0x40	; 64
    25b2:	28 e0       	ldi	r18, 0x08	; 8
    25b4:	92 07       	cpc	r25, r18
    25b6:	29 f4       	brne	.+10     	; 0x25c2 <tc_set_cca_interrupt_callback+0x24>
		tc_tcc1_cca_callback = callback;
    25b8:	60 93 83 21 	sts	0x2183, r22	; 0x802183 <tc_tcc1_cca_callback>
    25bc:	70 93 84 21 	sts	0x2184, r23	; 0x802184 <tc_tcc1_cca_callback+0x1>
    25c0:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    25c2:	81 15       	cp	r24, r1
    25c4:	29 e0       	ldi	r18, 0x09	; 9
    25c6:	92 07       	cpc	r25, r18
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <tc_set_cca_interrupt_callback+0x36>
		tc_tcd0_cca_callback = callback;
    25ca:	60 93 7b 21 	sts	0x217B, r22	; 0x80217b <tc_tcd0_cca_callback>
    25ce:	70 93 7c 21 	sts	0x217C, r23	; 0x80217c <tc_tcd0_cca_callback+0x1>
    25d2:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    25d4:	80 34       	cpi	r24, 0x40	; 64
    25d6:	29 e0       	ldi	r18, 0x09	; 9
    25d8:	92 07       	cpc	r25, r18
    25da:	29 f4       	brne	.+10     	; 0x25e6 <tc_set_cca_interrupt_callback+0x48>
		tc_tcd1_cca_callback = callback;
    25dc:	60 93 6f 21 	sts	0x216F, r22	; 0x80216f <tc_tcd1_cca_callback>
    25e0:	70 93 70 21 	sts	0x2170, r23	; 0x802170 <tc_tcd1_cca_callback+0x1>
    25e4:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    25e6:	81 15       	cp	r24, r1
    25e8:	2a e0       	ldi	r18, 0x0A	; 10
    25ea:	92 07       	cpc	r25, r18
    25ec:	29 f4       	brne	.+10     	; 0x25f8 <tc_set_cca_interrupt_callback+0x5a>
		tc_tce0_cca_callback = callback;
    25ee:	60 93 67 21 	sts	0x2167, r22	; 0x802167 <tc_tce0_cca_callback>
    25f2:	70 93 68 21 	sts	0x2168, r23	; 0x802168 <tc_tce0_cca_callback+0x1>
    25f6:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    25f8:	80 34       	cpi	r24, 0x40	; 64
    25fa:	2a e0       	ldi	r18, 0x0A	; 10
    25fc:	92 07       	cpc	r25, r18
    25fe:	29 f4       	brne	.+10     	; 0x260a <tc_set_cca_interrupt_callback+0x6c>
		tc_tce1_cca_callback = callback;
    2600:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <tc_tce1_cca_callback>
    2604:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <tc_tce1_cca_callback+0x1>
    2608:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    260a:	81 15       	cp	r24, r1
    260c:	9b 40       	sbci	r25, 0x0B	; 11
    260e:	21 f4       	brne	.+8      	; 0x2618 <tc_set_cca_interrupt_callback+0x7a>
		tc_tcf0_cca_callback = callback;
    2610:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <tc_tcf0_cca_callback>
    2614:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <tc_tcf0_cca_callback+0x1>
    2618:	08 95       	ret

0000261a <tc_set_ccb_interrupt_callback>:
}

void tc_set_ccb_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    261a:	81 15       	cp	r24, r1
    261c:	28 e0       	ldi	r18, 0x08	; 8
    261e:	92 07       	cpc	r25, r18
    2620:	29 f4       	brne	.+10     	; 0x262c <tc_set_ccb_interrupt_callback+0x12>
		tc_tcc0_ccb_callback = callback;
    2622:	60 93 8d 21 	sts	0x218D, r22	; 0x80218d <tc_tcc0_ccb_callback>
    2626:	70 93 8e 21 	sts	0x218E, r23	; 0x80218e <tc_tcc0_ccb_callback+0x1>
    262a:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    262c:	80 34       	cpi	r24, 0x40	; 64
    262e:	28 e0       	ldi	r18, 0x08	; 8
    2630:	92 07       	cpc	r25, r18
    2632:	29 f4       	brne	.+10     	; 0x263e <tc_set_ccb_interrupt_callback+0x24>
		tc_tcc1_ccb_callback = callback;
    2634:	60 93 81 21 	sts	0x2181, r22	; 0x802181 <tc_tcc1_ccb_callback>
    2638:	70 93 82 21 	sts	0x2182, r23	; 0x802182 <tc_tcc1_ccb_callback+0x1>
    263c:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    263e:	81 15       	cp	r24, r1
    2640:	29 e0       	ldi	r18, 0x09	; 9
    2642:	92 07       	cpc	r25, r18
    2644:	29 f4       	brne	.+10     	; 0x2650 <tc_set_ccb_interrupt_callback+0x36>
		tc_tcd0_ccb_callback = callback;
    2646:	60 93 79 21 	sts	0x2179, r22	; 0x802179 <tc_tcd0_ccb_callback>
    264a:	70 93 7a 21 	sts	0x217A, r23	; 0x80217a <tc_tcd0_ccb_callback+0x1>
    264e:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2650:	80 34       	cpi	r24, 0x40	; 64
    2652:	29 e0       	ldi	r18, 0x09	; 9
    2654:	92 07       	cpc	r25, r18
    2656:	29 f4       	brne	.+10     	; 0x2662 <tc_set_ccb_interrupt_callback+0x48>
		tc_tcd1_ccb_callback = callback;
    2658:	60 93 6d 21 	sts	0x216D, r22	; 0x80216d <tc_tcd1_ccb_callback>
    265c:	70 93 6e 21 	sts	0x216E, r23	; 0x80216e <tc_tcd1_ccb_callback+0x1>
    2660:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2662:	81 15       	cp	r24, r1
    2664:	2a e0       	ldi	r18, 0x0A	; 10
    2666:	92 07       	cpc	r25, r18
    2668:	29 f4       	brne	.+10     	; 0x2674 <tc_set_ccb_interrupt_callback+0x5a>
		tc_tce0_ccb_callback = callback;
    266a:	60 93 65 21 	sts	0x2165, r22	; 0x802165 <tc_tce0_ccb_callback>
    266e:	70 93 66 21 	sts	0x2166, r23	; 0x802166 <tc_tce0_ccb_callback+0x1>
    2672:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2674:	80 34       	cpi	r24, 0x40	; 64
    2676:	2a e0       	ldi	r18, 0x0A	; 10
    2678:	92 07       	cpc	r25, r18
    267a:	29 f4       	brne	.+10     	; 0x2686 <tc_set_ccb_interrupt_callback+0x6c>
		tc_tce1_ccb_callback = callback;
    267c:	60 93 59 21 	sts	0x2159, r22	; 0x802159 <tc_tce1_ccb_callback>
    2680:	70 93 5a 21 	sts	0x215A, r23	; 0x80215a <tc_tce1_ccb_callback+0x1>
    2684:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2686:	81 15       	cp	r24, r1
    2688:	9b 40       	sbci	r25, 0x0B	; 11
    268a:	21 f4       	brne	.+8      	; 0x2694 <tc_set_ccb_interrupt_callback+0x7a>
		tc_tcf0_ccb_callback = callback;
    268c:	60 93 51 21 	sts	0x2151, r22	; 0x802151 <tc_tcf0_ccb_callback>
    2690:	70 93 52 21 	sts	0x2152, r23	; 0x802152 <tc_tcf0_ccb_callback+0x1>
    2694:	08 95       	ret

00002696 <tc_set_ccc_interrupt_callback>:
}

void tc_set_ccc_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2696:	81 15       	cp	r24, r1
    2698:	28 e0       	ldi	r18, 0x08	; 8
    269a:	92 07       	cpc	r25, r18
    269c:	29 f4       	brne	.+10     	; 0x26a8 <tc_set_ccc_interrupt_callback+0x12>
		tc_tcc0_ccc_callback = callback;
    269e:	60 93 8b 21 	sts	0x218B, r22	; 0x80218b <tc_tcc0_ccc_callback>
    26a2:	70 93 8c 21 	sts	0x218C, r23	; 0x80218c <tc_tcc0_ccc_callback+0x1>
    26a6:	08 95       	ret
	} else
#endif

#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    26a8:	81 15       	cp	r24, r1
    26aa:	29 e0       	ldi	r18, 0x09	; 9
    26ac:	92 07       	cpc	r25, r18
    26ae:	29 f4       	brne	.+10     	; 0x26ba <tc_set_ccc_interrupt_callback+0x24>
		tc_tcd0_ccc_callback = callback;
    26b0:	60 93 77 21 	sts	0x2177, r22	; 0x802177 <tc_tcd0_ccc_callback>
    26b4:	70 93 78 21 	sts	0x2178, r23	; 0x802178 <tc_tcd0_ccc_callback+0x1>
    26b8:	08 95       	ret
	} else
#endif

#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    26ba:	81 15       	cp	r24, r1
    26bc:	2a e0       	ldi	r18, 0x0A	; 10
    26be:	92 07       	cpc	r25, r18
    26c0:	29 f4       	brne	.+10     	; 0x26cc <tc_set_ccc_interrupt_callback+0x36>
		tc_tce0_ccc_callback = callback;
    26c2:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <tc_tce0_ccc_callback>
    26c6:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <tc_tce0_ccc_callback+0x1>
    26ca:	08 95       	ret
	} else
#endif

#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    26cc:	81 15       	cp	r24, r1
    26ce:	9b 40       	sbci	r25, 0x0B	; 11
    26d0:	21 f4       	brne	.+8      	; 0x26da <tc_set_ccc_interrupt_callback+0x44>
		tc_tcf0_ccc_callback = callback;
    26d2:	60 93 4f 21 	sts	0x214F, r22	; 0x80214f <tc_tcf0_ccc_callback>
    26d6:	70 93 50 21 	sts	0x2150, r23	; 0x802150 <tc_tcf0_ccc_callback+0x1>
    26da:	08 95       	ret

000026dc <tc_set_ccd_interrupt_callback>:


void tc_set_ccd_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    26dc:	81 15       	cp	r24, r1
    26de:	28 e0       	ldi	r18, 0x08	; 8
    26e0:	92 07       	cpc	r25, r18
    26e2:	29 f4       	brne	.+10     	; 0x26ee <tc_set_ccd_interrupt_callback+0x12>
		tc_tcc0_ccd_callback = callback;
    26e4:	60 93 89 21 	sts	0x2189, r22	; 0x802189 <tc_tcc0_ccd_callback>
    26e8:	70 93 8a 21 	sts	0x218A, r23	; 0x80218a <tc_tcc0_ccd_callback+0x1>
    26ec:	08 95       	ret
	} else
#endif

#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    26ee:	81 15       	cp	r24, r1
    26f0:	29 e0       	ldi	r18, 0x09	; 9
    26f2:	92 07       	cpc	r25, r18
    26f4:	29 f4       	brne	.+10     	; 0x2700 <tc_set_ccd_interrupt_callback+0x24>
		tc_tcd0_ccd_callback = callback;
    26f6:	60 93 75 21 	sts	0x2175, r22	; 0x802175 <tc_tcd0_ccd_callback>
    26fa:	70 93 76 21 	sts	0x2176, r23	; 0x802176 <tc_tcd0_ccd_callback+0x1>
    26fe:	08 95       	ret
	} else
#endif

#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2700:	81 15       	cp	r24, r1
    2702:	2a e0       	ldi	r18, 0x0A	; 10
    2704:	92 07       	cpc	r25, r18
    2706:	29 f4       	brne	.+10     	; 0x2712 <tc_set_ccd_interrupt_callback+0x36>
		tc_tce0_ccd_callback = callback;
    2708:	60 93 61 21 	sts	0x2161, r22	; 0x802161 <tc_tce0_ccd_callback>
    270c:	70 93 62 21 	sts	0x2162, r23	; 0x802162 <tc_tce0_ccd_callback+0x1>
    2710:	08 95       	ret
	} else
#endif

#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2712:	81 15       	cp	r24, r1
    2714:	9b 40       	sbci	r25, 0x0B	; 11
    2716:	21 f4       	brne	.+8      	; 0x2720 <tc_set_ccd_interrupt_callback+0x44>
		tc_tcf0_ccd_callback = callback;
    2718:	60 93 4d 21 	sts	0x214D, r22	; 0x80214d <tc_tcf0_ccd_callback>
    271c:	70 93 4e 21 	sts	0x214E, r23	; 0x80214e <tc_tcf0_ccd_callback+0x1>
    2720:	08 95       	ret

00002722 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	ec 01       	movw	r28, r24
    2734:	6a 01       	movw	r12, r20
    2736:	7b 01       	movw	r14, r22
    2738:	db 01       	movw	r26, r22
    273a:	ca 01       	movw	r24, r20
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	a1 09       	sbc	r26, r1
    2740:	b1 09       	sbc	r27, r1

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	60 0f       	add	r22, r16
    2748:	71 1f       	adc	r23, r17
    274a:	82 1f       	adc	r24, r18
    274c:	93 1f       	adc	r25, r19
    274e:	a7 01       	movw	r20, r14
    2750:	96 01       	movw	r18, r12
    2752:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <__udivmodsi4>

	if (divisor > 128) {
    2756:	21 38       	cpi	r18, 0x81	; 129
    2758:	31 05       	cpc	r19, r1
    275a:	41 05       	cpc	r20, r1
    275c:	51 05       	cpc	r21, r1
    275e:	28 f5       	brcc	.+74     	; 0x27aa <spi_xmega_set_baud_div+0x88>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    2760:	21 34       	cpi	r18, 0x41	; 65
    2762:	31 05       	cpc	r19, r1
    2764:	41 05       	cpc	r20, r1
    2766:	51 05       	cpc	r21, r1
    2768:	78 f4       	brcc	.+30     	; 0x2788 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    276a:	21 32       	cpi	r18, 0x21	; 33
    276c:	31 05       	cpc	r19, r1
    276e:	41 05       	cpc	r20, r1
    2770:	51 05       	cpc	r21, r1
    2772:	60 f4       	brcc	.+24     	; 0x278c <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    2774:	21 31       	cpi	r18, 0x11	; 17
    2776:	60 f4       	brcc	.+24     	; 0x2790 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    2778:	29 30       	cpi	r18, 0x09	; 9
    277a:	60 f4       	brcc	.+24     	; 0x2794 <spi_xmega_set_baud_div+0x72>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    277c:	25 30       	cpi	r18, 0x05	; 5
    277e:	60 f4       	brcc	.+24     	; 0x2798 <spi_xmega_set_baud_div+0x76>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    2780:	23 30       	cpi	r18, 0x03	; 3
    2782:	60 f4       	brcc	.+24     	; 0x279c <spi_xmega_set_baud_div+0x7a>
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    2784:	90 e8       	ldi	r25, 0x80	; 128
    2786:	0b c0       	rjmp	.+22     	; 0x279e <spi_xmega_set_baud_div+0x7c>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    2788:	93 e0       	ldi	r25, 0x03	; 3
    278a:	09 c0       	rjmp	.+18     	; 0x279e <spi_xmega_set_baud_div+0x7c>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    278c:	92 e0       	ldi	r25, 0x02	; 2
    278e:	07 c0       	rjmp	.+14     	; 0x279e <spi_xmega_set_baud_div+0x7c>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    2790:	92 e8       	ldi	r25, 0x82	; 130
    2792:	05 c0       	rjmp	.+10     	; 0x279e <spi_xmega_set_baud_div+0x7c>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	03 c0       	rjmp	.+6      	; 0x279e <spi_xmega_set_baud_div+0x7c>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    2798:	91 e8       	ldi	r25, 0x81	; 129
    279a:	01 c0       	rjmp	.+2      	; 0x279e <spi_xmega_set_baud_div+0x7c>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
    279c:	90 e0       	ldi	r25, 0x00	; 0
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    279e:	28 81       	ld	r18, Y
    27a0:	2c 77       	andi	r18, 0x7C	; 124
    27a2:	92 2b       	or	r25, r18
    27a4:	98 83       	st	Y, r25

	return 1;
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <spi_xmega_set_baud_div+0x8a>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    27aa:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	08 95       	ret

000027be <nvm_wait_until_ready>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    27be:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    27c2:	87 fd       	sbrc	r24, 7
    27c4:	fc cf       	rjmp	.-8      	; 0x27be <nvm_wait_until_ready>
}
    27c6:	08 95       	ret

000027c8 <nvm_read_production_signature_row>:
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    27c8:	68 2f       	mov	r22, r24
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	0c 94 c6 23 	jmp	0x478c	; 0x478c <nvm_read_byte>

000027d2 <nvm_issue_command>:
 *       before this function is called.
 *
 * \param nvm_command NVM Command to execute.
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    27d8:	c0 ec       	ldi	r28, 0xC0	; 192
    27da:	d1 e0       	ldi	r29, 0x01	; 1
    27dc:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    27de:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	8b ec       	ldi	r24, 0xCB	; 203
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <ccp_write_io>
	NVM.CMD = old_cmd;
    27ea:	1a 87       	std	Y+10, r17	; 0x0a
}
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	08 95       	ret

000027f4 <nvm_read_device_serial>:
 *       the program space reads will be corrupted.
 *
 * \retval storage Pointer to the structure where to store the device serial
 */
void nvm_read_device_serial(struct nvm_device_serial *storage)
{
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	ec 01       	movw	r28, r24
	storage->lotnum0 = nvm_read_production_signature_row(
    27fa:	88 e0       	ldi	r24, 0x08	; 8
    27fc:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2800:	88 83       	st	Y, r24
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    2802:	89 e0       	ldi	r24, 0x09	; 9
    2804:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2808:	89 83       	std	Y+1, r24	; 0x01
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    280a:	8a e0       	ldi	r24, 0x0A	; 10
    280c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2810:	8a 83       	std	Y+2, r24	; 0x02
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    2812:	8b e0       	ldi	r24, 0x0B	; 11
    2814:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2818:	8b 83       	std	Y+3, r24	; 0x03
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    281a:	8c e0       	ldi	r24, 0x0C	; 12
    281c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2820:	8c 83       	std	Y+4, r24	; 0x04
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    2822:	8d e0       	ldi	r24, 0x0D	; 13
    2824:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2828:	8d 83       	std	Y+5, r24	; 0x05
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    282a:	80 e1       	ldi	r24, 0x10	; 16
    282c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2830:	8e 83       	std	Y+6, r24	; 0x06
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    2832:	82 e1       	ldi	r24, 0x12	; 18
    2834:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2838:	8f 83       	std	Y+7, r24	; 0x07
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    283a:	83 e1       	ldi	r24, 0x13	; 19
    283c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2840:	88 87       	std	Y+8, r24	; 0x08
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    2842:	84 e1       	ldi	r24, 0x14	; 20
    2844:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2848:	89 87       	std	Y+9, r24	; 0x09
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    284a:	85 e1       	ldi	r24, 0x15	; 21
    284c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <nvm_read_production_signature_row>
    2850:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	ec 01       	movw	r28, r24
	uint8_t data;
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
    285e:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2862:	ec ec       	ldi	r30, 0xCC	; 204
    2864:	f1 e0       	ldi	r31, 0x01	; 1
    2866:	80 81       	ld	r24, Z
    2868:	88 60       	ori	r24, 0x08	; 8
    286a:	80 83       	st	Z, r24
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
    286c:	d0 5f       	subi	r29, 0xF0	; 240
    286e:	88 81       	ld	r24, Y
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2870:	90 81       	ld	r25, Z
    2872:	97 7f       	andi	r25, 0xF7	; 247
    2874:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	08 95       	ret

0000287c <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	1f 92       	push	r1
    288e:	1f 92       	push	r1
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	8c 01       	movw	r16, r24
    2896:	7b 01       	movw	r14, r22
	nvm_wait_until_ready();
    2898:	49 83       	std	Y+1, r20	; 0x01
    289a:	5a 83       	std	Y+2, r21	; 0x02
    289c:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    28a0:	8c ec       	ldi	r24, 0xCC	; 204
    28a2:	c8 2e       	mov	r12, r24
    28a4:	dd 24       	eor	r13, r13
    28a6:	d3 94       	inc	r13
    28a8:	f6 01       	movw	r30, r12
    28aa:	90 81       	ld	r25, Z
    28ac:	98 60       	ori	r25, 0x08	; 8
    28ae:	90 83       	st	Z, r25
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    28b0:	b8 01       	movw	r22, r16
    28b2:	70 5f       	subi	r23, 0xF0	; 240
    28b4:	49 81       	ldd	r20, Y+1	; 0x01
    28b6:	5a 81       	ldd	r21, Y+2	; 0x02
    28b8:	c7 01       	movw	r24, r14
    28ba:	0e 94 0c 24 	call	0x4818	; 0x4818 <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    28be:	f6 01       	movw	r30, r12
    28c0:	80 81       	ld	r24, Z
    28c2:	87 7f       	andi	r24, 0xF7	; 247
    28c4:	80 83       	st	Z, r24
	eeprom_disable_mapping();
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	ff 90       	pop	r15
    28d4:	ef 90       	pop	r14
    28d6:	df 90       	pop	r13
    28d8:	cf 90       	pop	r12
    28da:	08 95       	ret

000028dc <nvm_eeprom_flush_buffer>:
 * \note The function does not preserve the value of the NVM.CMD register
 */
void nvm_eeprom_flush_buffer(void)
{
	// Wait until NVM is ready
	nvm_wait_until_ready();
    28dc:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    28e0:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    28e4:	81 ff       	sbrs	r24, 1
    28e6:	08 c0       	rjmp	.+16     	; 0x28f8 <nvm_eeprom_flush_buffer+0x1c>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    28e8:	86 e3       	ldi	r24, 0x36	; 54
    28ea:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	8b ec       	ldi	r24, 0xCB	; 203
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <ccp_write_io>
    28f8:	08 95       	ret

000028fa <nvm_eeprom_load_byte_to_buffer>:
 *
 * \param  byte_addr EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 * \param  value     Byte value to write to buffer.
 */
void nvm_eeprom_load_byte_to_buffer(uint8_t byte_addr, uint8_t value)
{
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	1f 92       	push	r1
    2900:	1f 92       	push	r1
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2906:	6a 83       	std	Y+2, r22	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    290e:	ac ec       	ldi	r26, 0xCC	; 204
    2910:	b1 e0       	ldi	r27, 0x01	; 1
    2912:	9c 91       	ld	r25, X
    2914:	98 60       	ori	r25, 0x08	; 8
    2916:	9c 93       	st	X, r25

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	e8 2f       	mov	r30, r24
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	f0 5f       	subi	r31, 0xF0	; 240
    2920:	6a 81       	ldd	r22, Y+2	; 0x02
    2922:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    2924:	8c 91       	ld	r24, X
    2926:	87 7f       	andi	r24, 0xF7	; 247
    2928:	8c 93       	st	X, r24
	eeprom_disable_mapping();
}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	08 95       	ret

00002934 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    2934:	ef 92       	push	r14
    2936:	ff 92       	push	r15
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	1f 92       	push	r1
    2942:	1f 92       	push	r1
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	18 2f       	mov	r17, r24

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    294a:	80 ec       	ldi	r24, 0xC0	; 192
    294c:	e8 2e       	mov	r14, r24
    294e:	ff 24       	eor	r15, r15
    2950:	f3 94       	inc	r15
    2952:	f7 01       	movw	r30, r14
    2954:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    2956:	69 83       	std	Y+1, r22	; 0x01
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <nvm_eeprom_flush_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();
    295e:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
	nvm_eeprom_load_byte_to_buffer(address, value);
    2962:	69 81       	ldd	r22, Y+1	; 0x01
    2964:	81 2f       	mov	r24, r17
    2966:	0e 94 7d 14 	call	0x28fa	; 0x28fa <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    296a:	f7 01       	movw	r30, r14
    296c:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2972:	10 83       	st	Z, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2974:	85 e3       	ldi	r24, 0x35	; 53
    2976:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	8b ec       	ldi	r24, 0xCB	; 203
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    2982:	f7 01       	movw	r30, r14
    2984:	02 87       	std	Z+10, r16	; 0x0a
}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	08 95       	ret

00002998 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	8c 01       	movw	r16, r24
	// Wait until NVM is ready
	nvm_wait_until_ready();
    29a0:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    29a4:	c0 e0       	ldi	r28, 0x00	; 0
		nvm_eeprom_load_byte_to_buffer(i, *values);
    29a6:	f8 01       	movw	r30, r16
    29a8:	61 91       	ld	r22, Z+
    29aa:	8f 01       	movw	r16, r30
    29ac:	8c 2f       	mov	r24, r28
    29ae:	0e 94 7d 14 	call	0x28fa	; 0x28fa <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    29b2:	cf 5f       	subi	r28, 0xFF	; 255
    29b4:	c0 32       	cpi	r28, 0x20	; 32
    29b6:	b9 f7       	brne	.-18     	; 0x29a6 <nvm_eeprom_load_page_to_buffer+0xe>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	08 95       	ret

000029c0 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	1f 92       	push	r1
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	20 e2       	ldi	r18, 0x20	; 32
    29d4:	82 9f       	mul	r24, r18
    29d6:	c0 01       	movw	r24, r0
    29d8:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    29da:	e0 ec       	ldi	r30, 0xC0	; 192
    29dc:	f1 e0       	ldi	r31, 0x01	; 1
    29de:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    29e0:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    29e2:	80 83       	st	Z, r24

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
    29e4:	85 e3       	ldi	r24, 0x35	; 53
}
    29e6:	0f 90       	pop	r0
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
	NVM.ADDR2 = 0x00;
	NVM.ADDR1 = (address >> 8) & 0xFF;
	NVM.ADDR0 = address & 0xFF;

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
    29ec:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <nvm_issue_command>

000029f0 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	ec 01       	movw	r28, r24
    2a02:	7b 01       	movw	r14, r22
    2a04:	8a 01       	movw	r16, r20
	while (len) {
    2a06:	01 15       	cp	r16, r1
    2a08:	11 05       	cpc	r17, r1
    2a0a:	41 f1       	breq	.+80     	; 0x2a5c <nvm_eeprom_erase_and_write_buffer+0x6c>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	8f 71       	andi	r24, 0x1F	; 31
    2a10:	99 27       	eor	r25, r25
    2a12:	89 2b       	or	r24, r25
    2a14:	a9 f4       	brne	.+42     	; 0x2a40 <nvm_eeprom_erase_and_write_buffer+0x50>
    2a16:	00 32       	cpi	r16, 0x20	; 32
    2a18:	11 05       	cpc	r17, r1
    2a1a:	90 f0       	brcs	.+36     	; 0x2a40 <nvm_eeprom_erase_and_write_buffer+0x50>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	0e 94 cc 14 	call	0x2998	; 0x2998 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    2a22:	ce 01       	movw	r24, r28
    2a24:	25 e0       	ldi	r18, 0x05	; 5
    2a26:	96 95       	lsr	r25
    2a28:	87 95       	ror	r24
    2a2a:	2a 95       	dec	r18
    2a2c:	e1 f7       	brne	.-8      	; 0x2a26 <nvm_eeprom_erase_and_write_buffer+0x36>
    2a2e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    2a32:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    2a34:	80 e2       	ldi	r24, 0x20	; 32
    2a36:	e8 0e       	add	r14, r24
    2a38:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    2a3a:	00 52       	subi	r16, 0x20	; 32
    2a3c:	11 09       	sbc	r17, r1
    2a3e:	e3 cf       	rjmp	.-58     	; 0x2a06 <nvm_eeprom_erase_and_write_buffer+0x16>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2a40:	6e 01       	movw	r12, r28
    2a42:	ef ef       	ldi	r30, 0xFF	; 255
    2a44:	ce 1a       	sub	r12, r30
    2a46:	de 0a       	sbc	r13, r30
    2a48:	f7 01       	movw	r30, r14
    2a4a:	61 91       	ld	r22, Z+
    2a4c:	7f 01       	movw	r14, r30
    2a4e:	ce 01       	movw	r24, r28
    2a50:	0e 94 9a 14 	call	0x2934	; 0x2934 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    2a54:	01 50       	subi	r16, 0x01	; 1
    2a56:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    2a58:	e6 01       	movw	r28, r12
    2a5a:	d5 cf       	rjmp	.-86     	; 0x2a06 <nvm_eeprom_erase_and_write_buffer+0x16>
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	df 90       	pop	r13
    2a6a:	cf 90       	pop	r12
    2a6c:	08 95       	ret

00002a6e <nvm_eeprom_split_write_page>:
 * before writing.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_split_write_page(uint8_t page_addr)
{
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	1f 92       	push	r1
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	20 e2       	ldi	r18, 0x20	; 32
    2a82:	82 9f       	mul	r24, r18
    2a84:	c0 01       	movw	r24, r0
    2a86:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    2a88:	e0 ec       	ldi	r30, 0xC0	; 192
    2a8a:	f1 e0       	ldi	r31, 0x01	; 1
    2a8c:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2a8e:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2a90:	80 83       	st	Z, r24

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
    2a92:	84 e3       	ldi	r24, 0x34	; 52
}
    2a94:	0f 90       	pop	r0
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
	NVM.ADDR2 = 0x00;
	NVM.ADDR1 = (address >> 8) & 0xFF;
	NVM.ADDR0 = address & 0xFF;

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
    2a9a:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <nvm_issue_command>

00002a9e <nvm_eeprom_fill_buffer_with_value>:
 *       EEPROM write page operation.
 *
 * \param  value Value to copy to the page buffer.
 */
void nvm_eeprom_fill_buffer_with_value(uint8_t value)
{
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    2aa4:	0e 94 6e 14 	call	0x28dc	; 0x28dc <nvm_eeprom_flush_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2aa8:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2aac:	c0 e0       	ldi	r28, 0x00	; 0
		nvm_eeprom_load_byte_to_buffer(i, value);
    2aae:	6d 2f       	mov	r22, r29
    2ab0:	8c 2f       	mov	r24, r28
    2ab2:	0e 94 7d 14 	call	0x28fa	; 0x28fa <nvm_eeprom_load_byte_to_buffer>
	nvm_eeprom_flush_buffer();
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    2ab6:	cf 5f       	subi	r28, 0xFF	; 255
    2ab8:	c0 32       	cpi	r28, 0x20	; 32
    2aba:	c9 f7       	brne	.-14     	; 0x2aae <nvm_eeprom_fill_buffer_with_value+0x10>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	08 95       	ret

00002ac2 <nvm_eeprom_erase_bytes_in_page>:
 * written to in the page buffer reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_bytes_in_page(uint8_t page_addr)
{
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	1f 92       	push	r1
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	20 e2       	ldi	r18, 0x20	; 32
    2ad6:	82 9f       	mul	r24, r18
    2ad8:	c0 01       	movw	r24, r0
    2ada:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    2adc:	e0 ec       	ldi	r30, 0xC0	; 192
    2ade:	f1 e0       	ldi	r31, 0x01	; 1
    2ae0:	12 82       	std	Z+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2ae2:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2ae4:	80 83       	st	Z, r24

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
    2ae6:	82 e3       	ldi	r24, 0x32	; 50
}
    2ae8:	0f 90       	pop	r0
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
	NVM.ADDR2 = 0x00;
	NVM.ADDR1 = (address >> 8) & 0xFF;
	NVM.ADDR0 = address & 0xFF;

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
    2aee:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <nvm_issue_command>

00002af2 <nvm_eeprom_erase_page>:
 * This function erases one EEPROM page, so that every location reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_page(uint8_t page_addr)
{
    2af2:	cf 93       	push	r28
    2af4:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    2af6:	8f ef       	ldi	r24, 0xFF	; 255
    2af8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    2afc:	8c 2f       	mov	r24, r28
}
    2afe:	cf 91       	pop	r28
void nvm_eeprom_erase_page(uint8_t page_addr)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    2b00:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <nvm_eeprom_erase_bytes_in_page>

00002b04 <nvm_eeprom_erase_bytes_in_all_pages>:
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2b04:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
    2b08:	80 e3       	ldi	r24, 0x30	; 48
    2b0a:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <nvm_issue_command>

00002b0e <nvm_eeprom_erase_all>:
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    2b0e:	8f ef       	ldi	r24, 0xFF	; 255
    2b10:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    2b14:	0c 94 82 15 	jmp	0x2b04	; 0x2b04 <nvm_eeprom_erase_bytes_in_all_pages>

00002b18 <nvm_issue_flash_range_crc>:
 *
 * \param start_addr  end byte address
 * \param end_addr    start byte address
 */
void nvm_issue_flash_range_crc(flash_addr_t start_addr, flash_addr_t end_addr)
{
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    2b26:	c0 ec       	ldi	r28, 0xC0	; 192
    2b28:	d1 e0       	ldi	r29, 0x01	; 1
    2b2a:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    2b2c:	ea e3       	ldi	r30, 0x3A	; 58
    2b2e:	ea 87       	std	Y+10, r30	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    2b30:	68 83       	st	Y, r22
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    2b32:	c7 2e       	mov	r12, r23
    2b34:	d8 2e       	mov	r13, r24
    2b36:	e9 2e       	mov	r14, r25
    2b38:	ff 24       	eor	r15, r15
    2b3a:	c9 82       	std	Y+1, r12	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    2b3c:	aa 27       	eor	r26, r26
    2b3e:	bb 27       	eor	r27, r27
    2b40:	8a 83       	std	Y+2, r24	; 0x02
#endif

	// Load the end byte address in NVM Data Register
	NVM.DATA0 = end_addr & 0xFF;
    2b42:	2c 83       	std	Y+4, r18	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    2b44:	bb 27       	eor	r27, r27
    2b46:	a5 2f       	mov	r26, r21
    2b48:	94 2f       	mov	r25, r20
    2b4a:	83 2f       	mov	r24, r19
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    2b4e:	ca 01       	movw	r24, r20
    2b50:	aa 27       	eor	r26, r26
    2b52:	bb 27       	eor	r27, r27
    2b54:	8e 83       	std	Y+6, r24	; 0x06
#endif

	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	8b ec       	ldi	r24, 0xCB	; 203
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    2b60:	1a 87       	std	Y+10, r17	; 0x0a
}
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	ff 90       	pop	r15
    2b6a:	ef 90       	pop	r14
    2b6c:	df 90       	pop	r13
    2b6e:	cf 90       	pop	r12
    2b70:	08 95       	ret

00002b72 <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <nvm_flash_read_buffer+0xe>
    2b80:	1f 92       	push	r1
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	7a 01       	movw	r14, r20
    2b88:	89 01       	movw	r16, r18
#if (FLASH_SIZE>0x10000)
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
    2b8a:	69 83       	std	Y+1, r22	; 0x01
    2b8c:	7a 83       	std	Y+2, r23	; 0x02
    2b8e:	8b 83       	std	Y+3, r24	; 0x03
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
    2b96:	0e 0d       	add	r16, r14
    2b98:	1f 1d       	adc	r17, r15
	while ( len ) {
    2b9a:	69 81       	ldd	r22, Y+1	; 0x01
    2b9c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	e0 16       	cp	r14, r16
    2ba4:	f1 06       	cpc	r15, r17
    2ba6:	59 f0       	breq	.+22     	; 0x2bbe <nvm_flash_read_buffer+0x4c>
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    2ba8:	8b bf       	out	0x3b, r24	; 59
    2baa:	fb 01       	movw	r30, r22
    2bac:	27 91       	elpm	r18, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    2bae:	f7 01       	movw	r30, r14
    2bb0:	21 93       	st	Z+, r18
    2bb2:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    2bb4:	6f 5f       	subi	r22, 0xFF	; 255
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	f2 cf       	rjmp	.-28     	; 0x2ba2 <nvm_flash_read_buffer+0x30>
		len--;
	}
}
    2bbe:	24 96       	adiw	r28, 0x04	; 4
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	08 95       	ret

00002bd2 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    2bde:	71 70       	andi	r23, 0x01	; 1
    2be0:	7a 01       	movw	r14, r20
    2be2:	e2 0e       	add	r14, r18
    2be4:	f3 1e       	adc	r15, r19
	while ( len ) {
    2be6:	ea 01       	movw	r28, r20
    2be8:	8b 01       	movw	r16, r22
    2bea:	04 1b       	sub	r16, r20
    2bec:	15 0b       	sbc	r17, r21
    2bee:	be 01       	movw	r22, r28
    2bf0:	60 0f       	add	r22, r16
    2bf2:	71 1f       	adc	r23, r17
    2bf4:	ce 15       	cp	r28, r14
    2bf6:	df 05       	cpc	r29, r15
    2bf8:	29 f0       	breq	.+10     	; 0x2c04 <nvm_user_sig_read_buffer+0x32>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    2c00:	89 93       	st	Y+, r24
    2c02:	f5 cf       	rjmp	.-22     	; 0x2bee <nvm_user_sig_read_buffer+0x1c>
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	08 95       	ret

00002c12 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    2c12:	2f 92       	push	r2
    2c14:	3f 92       	push	r3
    2c16:	4f 92       	push	r4
    2c18:	5f 92       	push	r5
    2c1a:	6f 92       	push	r6
    2c1c:	7f 92       	push	r7
    2c1e:	8f 92       	push	r8
    2c20:	9f 92       	push	r9
    2c22:	af 92       	push	r10
    2c24:	bf 92       	push	r11
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	1f 92       	push	r1
    2c38:	1f 92       	push	r1
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	5a 01       	movw	r10, r20
    2c40:	69 01       	movw	r12, r18
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    2c42:	7b 01       	movw	r14, r22
	bool b_flag_erase = false;
    2c44:	10 e0       	ldi	r17, 0x00	; 0
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    2c46:	22 24       	eor	r2, r2
    2c48:	2a 94       	dec	r2
    2c4a:	32 2c       	mov	r3, r2
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    2c4c:	c1 14       	cp	r12, r1
    2c4e:	d1 04       	cpc	r13, r1
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <nvm_user_sig_write_buffer+0x42>
    2c52:	50 c0       	rjmp	.+160    	; 0x2cf4 <nvm_user_sig_write_buffer+0xe2>
    2c54:	41 2c       	mov	r4, r1
    2c56:	51 2c       	mov	r5, r1
    2c58:	32 01       	movw	r6, r4
    2c5a:	42 01       	movw	r8, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    2c5c:	00 23       	and	r16, r16
    2c5e:	91 f0       	breq	.+36     	; 0x2c84 <nvm_user_sig_write_buffer+0x72>
    2c60:	b2 01       	movw	r22, r4
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	b2 01       	movw	r22, r4
    2c6c:	6f 5f       	subi	r22, 0xFF	; 255
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    2c76:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	21 f0       	breq	.+8      	; 0x2c88 <nvm_user_sig_write_buffer+0x76>
					b_flag_erase = true; // The page is not empty
    2c80:	11 e0       	ldi	r17, 0x01	; 1
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <nvm_user_sig_write_buffer+0x76>
				}
			}else{
				w_value = 0xFFFF;
    2c84:	29 82       	std	Y+1, r2	; 0x01
    2c86:	3a 82       	std	Y+2, r3	; 0x02
			}
			// Update flash buffer
			if (len) {
    2c88:	c1 14       	cp	r12, r1
    2c8a:	d1 04       	cpc	r13, r1
    2c8c:	01 f1       	breq	.+64     	; 0x2cce <nvm_user_sig_write_buffer+0xbc>
				if (opt_address == page_pos) {
    2c8e:	e8 14       	cp	r14, r8
    2c90:	f9 04       	cpc	r15, r9
    2c92:	69 f4       	brne	.+26     	; 0x2cae <nvm_user_sig_write_buffer+0x9c>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	c8 1a       	sub	r12, r24
    2c98:	d1 08       	sbc	r13, r1
					opt_address++;
    2c9a:	ef ef       	ldi	r30, 0xFF	; 255
    2c9c:	ee 1a       	sub	r14, r30
    2c9e:	fe 0a       	sbc	r15, r30
					LSB(w_value)=*(uint8_t*)buf;
    2ca0:	f5 01       	movw	r30, r10
    2ca2:	81 91       	ld	r24, Z+
    2ca4:	5f 01       	movw	r10, r30
    2ca6:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    2ca8:	c1 14       	cp	r12, r1
    2caa:	d1 04       	cpc	r13, r1
    2cac:	81 f0       	breq	.+32     	; 0x2cce <nvm_user_sig_write_buffer+0xbc>
    2cae:	ff ef       	ldi	r31, 0xFF	; 255
    2cb0:	8f 1a       	sub	r8, r31
    2cb2:	9f 0a       	sbc	r9, r31
				if (opt_address == (page_pos+1)) {
    2cb4:	e8 14       	cp	r14, r8
    2cb6:	f9 04       	cpc	r15, r9
    2cb8:	51 f4       	brne	.+20     	; 0x2cce <nvm_user_sig_write_buffer+0xbc>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    2cba:	21 e0       	ldi	r18, 0x01	; 1
    2cbc:	c2 1a       	sub	r12, r18
    2cbe:	d1 08       	sbc	r13, r1
					opt_address++;
    2cc0:	8f ef       	ldi	r24, 0xFF	; 255
    2cc2:	e8 1a       	sub	r14, r24
    2cc4:	f8 0a       	sbc	r15, r24
					MSB(w_value)=*(uint8_t*)buf;
    2cc6:	f5 01       	movw	r30, r10
    2cc8:	81 91       	ld	r24, Z+
    2cca:	5f 01       	movw	r10, r30
    2ccc:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    2cce:	49 81       	ldd	r20, Y+1	; 0x01
    2cd0:	5a 81       	ldd	r21, Y+2	; 0x02
    2cd2:	c3 01       	movw	r24, r6
    2cd4:	b2 01       	movw	r22, r4
    2cd6:	1e 94 0f 00 	call	0x4001e	; 0x4001e <nvm_flash_load_word_to_buffer>
    2cda:	f2 e0       	ldi	r31, 0x02	; 2
    2cdc:	4f 0e       	add	r4, r31
    2cde:	51 1c       	adc	r5, r1
    2ce0:	61 1c       	adc	r6, r1
    2ce2:	71 1c       	adc	r7, r1
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    2ce4:	41 14       	cp	r4, r1
    2ce6:	22 e0       	ldi	r18, 0x02	; 2
    2ce8:	52 06       	cpc	r5, r18
    2cea:	61 04       	cpc	r6, r1
    2cec:	71 04       	cpc	r7, r1
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <nvm_user_sig_write_buffer+0xe0>
    2cf0:	b4 cf       	rjmp	.-152    	; 0x2c5a <nvm_user_sig_write_buffer+0x48>
    2cf2:	ac cf       	rjmp	.-168    	; 0x2c4c <nvm_user_sig_write_buffer+0x3a>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    2cf4:	11 23       	and	r17, r17
    2cf6:	41 f0       	breq	.+16     	; 0x2d08 <nvm_user_sig_write_buffer+0xf6>
 * Erase the user calibration section page. There is only one page, so no
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
    2cf8:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    2cfc:	48 e1       	ldi	r20, 0x18	; 24
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	cb 01       	movw	r24, r22
    2d04:	1e 94 00 00 	call	0x40000	; 0x40000 <nvm_common_spm>
 * corruption of the data written. There is only one page, so no
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
    2d08:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    2d0c:	4a e1       	ldi	r20, 0x1A	; 26
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	cb 01       	movw	r24, r22
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	df 90       	pop	r13
    2d26:	cf 90       	pop	r12
    2d28:	bf 90       	pop	r11
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	7f 90       	pop	r7
    2d32:	6f 90       	pop	r6
    2d34:	5f 90       	pop	r5
    2d36:	4f 90       	pop	r4
    2d38:	3f 90       	pop	r3
    2d3a:	2f 90       	pop	r2
    2d3c:	1c 94 00 00 	jmp	0x40000	; 0x40000 <nvm_common_spm>

00002d40 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    2d40:	2f 92       	push	r2
    2d42:	3f 92       	push	r3
    2d44:	4f 92       	push	r4
    2d46:	5f 92       	push	r5
    2d48:	6f 92       	push	r6
    2d4a:	7f 92       	push	r7
    2d4c:	8f 92       	push	r8
    2d4e:	9f 92       	push	r9
    2d50:	af 92       	push	r10
    2d52:	bf 92       	push	r11
    2d54:	cf 92       	push	r12
    2d56:	df 92       	push	r13
    2d58:	ef 92       	push	r14
    2d5a:	ff 92       	push	r15
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <nvm_flash_erase_and_write_buffer+0x26>
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <nvm_flash_erase_and_write_buffer+0x28>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	4b 01       	movw	r8, r22
    2d6e:	5c 01       	movw	r10, r24
    2d70:	1a 01       	movw	r2, r20
    2d72:	2b 83       	std	Y+3, r18	; 0x03
    2d74:	3c 83       	std	Y+4, r19	; 0x04
    2d76:	0d 83       	std	Y+5, r16	; 0x05
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    2d78:	6b 01       	movw	r12, r22
    2d7a:	7c 01       	movw	r14, r24
    2d7c:	cc 24       	eor	r12, r12
    2d7e:	e8 94       	clt
    2d80:	d0 f8       	bld	r13, 0

	// For each page
	while ( len ) {
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	9c 81       	ldd	r25, Y+4	; 0x04
    2d86:	89 2b       	or	r24, r25
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <nvm_flash_erase_and_write_buffer+0x4c>
    2d8a:	6e c0       	rjmp	.+220    	; 0x2e68 <nvm_flash_erase_and_write_buffer+0x128>
		b_flag_erase = false;

		nvm_wait_until_ready();
    2d8c:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
    2d90:	26 01       	movw	r4, r12
    2d92:	37 01       	movw	r6, r14
    2d94:	00 e0       	ldi	r16, 0x00	; 0
    2d96:	11 e0       	ldi	r17, 0x01	; 1
	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
		b_flag_erase = false;
    2d98:	20 e0       	ldi	r18, 0x00	; 0

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    2d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9c:	33 23       	and	r19, r19
    2d9e:	51 f0       	breq	.+20     	; 0x2db4 <nvm_flash_erase_and_write_buffer+0x74>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    2da0:	6b be       	out	0x3b, r6	; 59
    2da2:	f2 01       	movw	r30, r4
    2da4:	87 91       	elpm	r24, Z+
    2da6:	96 91       	elpm	r25, Z
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	31 f0       	breq	.+12     	; 0x2dbc <nvm_flash_erase_and_write_buffer+0x7c>
					b_flag_erase = true; // The page is not empty
    2db0:	21 e0       	ldi	r18, 0x01	; 1
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <nvm_flash_erase_and_write_buffer+0x7c>
				}
			}else{
				w_value = 0xFFFF;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	9f ef       	ldi	r25, 0xFF	; 255
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	9a 83       	std	Y+2, r25	; 0x02
			}

			// Update flash buffer
			if (len) {
    2dbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc0:	30 97       	sbiw	r30, 0x00	; 0
    2dc2:	69 f1       	breq	.+90     	; 0x2e1e <nvm_flash_erase_and_write_buffer+0xde>
				if (opt_address == page_address) {
    2dc4:	84 14       	cp	r8, r4
    2dc6:	95 04       	cpc	r9, r5
    2dc8:	a6 04       	cpc	r10, r6
    2dca:	b7 04       	cpc	r11, r7
    2dcc:	81 f4       	brne	.+32     	; 0x2dee <nvm_flash_erase_and_write_buffer+0xae>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    2dce:	31 97       	sbiw	r30, 0x01	; 1
    2dd0:	eb 83       	std	Y+3, r30	; 0x03
    2dd2:	fc 83       	std	Y+4, r31	; 0x04
					opt_address++;
    2dd4:	ff ef       	ldi	r31, 0xFF	; 255
    2dd6:	8f 1a       	sub	r8, r31
    2dd8:	9f 0a       	sbc	r9, r31
    2dda:	af 0a       	sbc	r10, r31
    2ddc:	bf 0a       	sbc	r11, r31
					LSB(w_value)=*(uint8_t*)buf;
    2dde:	f1 01       	movw	r30, r2
    2de0:	81 91       	ld	r24, Z+
    2de2:	1f 01       	movw	r2, r30
    2de4:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	89 2b       	or	r24, r25
    2dec:	c1 f0       	breq	.+48     	; 0x2e1e <nvm_flash_erase_and_write_buffer+0xde>
    2dee:	d3 01       	movw	r26, r6
    2df0:	c2 01       	movw	r24, r4
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	a1 1d       	adc	r26, r1
    2df6:	b1 1d       	adc	r27, r1
				if (opt_address == (page_address+1)) {
    2df8:	88 16       	cp	r8, r24
    2dfa:	99 06       	cpc	r9, r25
    2dfc:	aa 06       	cpc	r10, r26
    2dfe:	bb 06       	cpc	r11, r27
    2e00:	71 f4       	brne	.+28     	; 0x2e1e <nvm_flash_erase_and_write_buffer+0xde>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    2e02:	eb 81       	ldd	r30, Y+3	; 0x03
    2e04:	fc 81       	ldd	r31, Y+4	; 0x04
    2e06:	31 97       	sbiw	r30, 0x01	; 1
    2e08:	eb 83       	std	Y+3, r30	; 0x03
    2e0a:	fc 83       	std	Y+4, r31	; 0x04
					opt_address++;
    2e0c:	ff ef       	ldi	r31, 0xFF	; 255
    2e0e:	8f 1a       	sub	r8, r31
    2e10:	9f 0a       	sbc	r9, r31
    2e12:	af 0a       	sbc	r10, r31
    2e14:	bf 0a       	sbc	r11, r31
					MSB(w_value)=*(uint8_t*)buf;
    2e16:	f1 01       	movw	r30, r2
    2e18:	81 91       	ld	r24, Z+
    2e1a:	1f 01       	movw	r2, r30
    2e1c:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    2e1e:	49 81       	ldd	r20, Y+1	; 0x01
    2e20:	5a 81       	ldd	r21, Y+2	; 0x02
    2e22:	c3 01       	movw	r24, r6
    2e24:	b2 01       	movw	r22, r4
    2e26:	2e 83       	std	Y+6, r18	; 0x06
    2e28:	1e 94 0f 00 	call	0x4001e	; 0x4001e <nvm_flash_load_word_to_buffer>
			page_address+=2;
    2e2c:	f2 e0       	ldi	r31, 0x02	; 2
    2e2e:	4f 0e       	add	r4, r31
    2e30:	51 1c       	adc	r5, r1
    2e32:	61 1c       	adc	r6, r1
    2e34:	71 1c       	adc	r7, r1
    2e36:	01 50       	subi	r16, 0x01	; 1
    2e38:	11 09       	sbc	r17, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    2e3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e3c:	01 15       	cp	r16, r1
    2e3e:	11 05       	cpc	r17, r1
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <nvm_flash_erase_and_write_buffer+0x104>
    2e42:	ab cf       	rjmp	.-170    	; 0x2d9a <nvm_flash_erase_and_write_buffer+0x5a>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    2e44:	22 23       	and	r18, r18
    2e46:	21 f0       	breq	.+8      	; 0x2e50 <nvm_flash_erase_and_write_buffer+0x110>
 *
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
    2e48:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    2e4c:	45 e2       	ldi	r20, 0x25	; 37
    2e4e:	03 c0       	rjmp	.+6      	; 0x2e56 <nvm_flash_erase_and_write_buffer+0x116>
 *
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
    2e50:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    2e54:	44 e2       	ldi	r20, 0x24	; 36
    2e56:	c7 01       	movw	r24, r14
    2e58:	b6 01       	movw	r22, r12
    2e5a:	1e 94 00 00 	call	0x40000	; 0x40000 <nvm_common_spm>
    2e5e:	32 e0       	ldi	r19, 0x02	; 2
    2e60:	d3 0e       	add	r13, r19
    2e62:	e1 1c       	adc	r14, r1
    2e64:	f1 1c       	adc	r15, r1
    2e66:	8d cf       	rjmp	.-230    	; 0x2d82 <nvm_flash_erase_and_write_buffer+0x42>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    2e68:	26 96       	adiw	r28, 0x06	; 6
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	bf 90       	pop	r11
    2e80:	af 90       	pop	r10
    2e82:	9f 90       	pop	r9
    2e84:	8f 90       	pop	r8
    2e86:	7f 90       	pop	r7
    2e88:	6f 90       	pop	r6
    2e8a:	5f 90       	pop	r5
    2e8c:	4f 90       	pop	r4
    2e8e:	3f 90       	pop	r3
    2e90:	2f 90       	pop	r2
    2e92:	08 95       	ret

00002e94 <nvm_fuses_read>:
 * \param fuse Fuse byte to read.
 *
 * \return  Byte value of fuse.
 */
uint8_t nvm_fuses_read(enum fuse_byte_t fuse)
{
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	1f 92       	push	r1
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
	// Wait until NVM is ready
	nvm_wait_until_ready();
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	0e 94 df 13 	call	0x27be	; 0x27be <nvm_wait_until_ready>

	// Set address
	NVM.ADDR0 = fuse;
    2ea8:	00 ec       	ldi	r16, 0xC0	; 192
    2eaa:	11 e0       	ldi	r17, 0x01	; 1
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	f8 01       	movw	r30, r16
    2eb0:	80 83       	st	Z, r24

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);
    2eb2:	87 e0       	ldi	r24, 0x07	; 7
    2eb4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <nvm_issue_command>

	return NVM.DATA0;
    2eb8:	f8 01       	movw	r30, r16
    2eba:	84 81       	ldd	r24, Z+4	; 0x04
}
    2ebc:	0f 90       	pop	r0
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret

00002ec8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2ec8:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2ece:	26 2f       	mov	r18, r22
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	d9 01       	movw	r26, r18
    2ed4:	08 2e       	mov	r0, r24
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <ioport_configure_port_pin+0x14>
    2ed8:	b5 95       	asr	r27
    2eda:	a7 95       	ror	r26
    2edc:	0a 94       	dec	r0
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <ioport_configure_port_pin+0x10>
    2ee0:	a0 ff       	sbrs	r26, 0
    2ee2:	05 c0       	rjmp	.+10     	; 0x2eee <ioport_configure_port_pin+0x26>
    2ee4:	df 01       	movw	r26, r30
    2ee6:	a8 0f       	add	r26, r24
    2ee8:	b9 1f       	adc	r27, r25
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2eea:	50 96       	adiw	r26, 0x10	; 16
    2eec:	5c 93       	st	X, r21
    2eee:	01 96       	adiw	r24, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2ef0:	88 30       	cpi	r24, 0x08	; 8
    2ef2:	91 05       	cpc	r25, r1
    2ef4:	71 f7       	brne	.-36     	; 0x2ed2 <ioport_configure_port_pin+0xa>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2ef6:	40 ff       	sbrs	r20, 0
    2ef8:	07 c0       	rjmp	.+14     	; 0x2f08 <ioport_configure_port_pin+0x40>
		if (flags & IOPORT_INIT_HIGH) {
    2efa:	41 ff       	sbrs	r20, 1
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2efe:	65 83       	std	Z+5, r22	; 0x05
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <ioport_configure_port_pin+0x3c>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2f02:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2f04:	61 83       	std	Z+1, r22	; 0x01
    2f06:	08 95       	ret
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2f08:	62 83       	std	Z+2, r22	; 0x02
    2f0a:	08 95       	ret

00002f0c <ioport_configure_pin>:
 * \param pin The pin to configure
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
    2f0c:	ab 01       	movw	r20, r22
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2f0e:	98 2f       	mov	r25, r24
    2f10:	96 95       	lsr	r25
    2f12:	96 95       	lsr	r25
    2f14:	96 95       	lsr	r25
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2f16:	87 70       	andi	r24, 0x07	; 7
    2f18:	21 e0       	ldi	r18, 0x01	; 1
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	b9 01       	movw	r22, r18
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <ioport_configure_pin+0x16>
    2f20:	66 0f       	add	r22, r22
    2f22:	8a 95       	dec	r24
    2f24:	ea f7       	brpl	.-6      	; 0x2f20 <ioport_configure_pin+0x14>
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2f26:	20 e2       	ldi	r18, 0x20	; 32
    2f28:	92 9f       	mul	r25, r18
    2f2a:	c0 01       	movw	r24, r0
    2f2c:	11 24       	eor	r1, r1
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2f2e:	9a 5f       	subi	r25, 0xFA	; 250
    2f30:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <ioport_configure_port_pin>

00002f34 <board_init>:
 * @{
 */

void board_init(void)
{
	ioport_configure_pin(LED0_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2f34:	63 e0       	ldi	r22, 0x03	; 3
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	88 e7       	ldi	r24, 0x78	; 120
    2f3a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(LED1_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2f3e:	63 e0       	ldi	r22, 0x03	; 3
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	89 e7       	ldi	r24, 0x79	; 121
    2f44:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(LED2_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2f48:	63 e0       	ldi	r22, 0x03	; 3
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	8c e1       	ldi	r24, 0x1C	; 28
    2f4e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(LED3_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	70 e4       	ldi	r23, 0x40	; 64
    2f56:	8d e1       	ldi	r24, 0x1D	; 29
    2f58:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INV_ENABLED);

	ioport_configure_pin(GPIO_PUSH_BUTTON_0, IOPORT_DIR_INPUT
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	7b e1       	ldi	r23, 0x1B	; 27
    2f60:	85 e2       	ldi	r24, 0x25	; 37
    2f62:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);
	ioport_configure_pin(GPIO_PUSH_BUTTON_1, IOPORT_DIR_INPUT
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	7b e1       	ldi	r23, 0x1B	; 27
    2f6a:	89 e2       	ldi	r24, 0x29	; 41
    2f6c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);
	ioport_configure_pin(GPIO_PUSH_BUTTON_2, IOPORT_DIR_INPUT
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	7b e1       	ldi	r23, 0x1B	; 27
    2f74:	8a e2       	ldi	r24, 0x2A	; 42
    2f76:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_LEVEL | IOPORT_PULL_UP);

#ifdef CONF_BOARD_C12832A1Z
	ioport_configure_pin(NHD_C12832A1Z_SPI_SCK, IOPORT_DIR_OUTPUT
    2f7a:	63 e0       	ldi	r22, 0x03	; 3
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	89 e1       	ldi	r24, 0x19	; 25
    2f80:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_SPI_MOSI, IOPORT_DIR_OUTPUT
    2f84:	63 e0       	ldi	r22, 0x03	; 3
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	8b e1       	ldi	r24, 0x1B	; 27
    2f8a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_CSN, IOPORT_DIR_OUTPUT
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	8b e2       	ldi	r24, 0x2B	; 43
    2f94:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_REGISTER_SELECT, IOPORT_DIR_OUTPUT
    2f98:	63 e0       	ldi	r22, 0x03	; 3
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	88 e1       	ldi	r24, 0x18	; 24
    2f9e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_RESETN, IOPORT_DIR_OUTPUT
    2fa2:	63 e0       	ldi	r22, 0x03	; 3
    2fa4:	70 e0       	ldi	r23, 0x00	; 0
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(NHD_C12832A1Z_BACKLIGHT, IOPORT_DIR_OUTPUT
    2fac:	61 e0       	ldi	r22, 0x01	; 1
    2fae:	70 e0       	ldi	r23, 0x00	; 0
    2fb0:	84 e2       	ldi	r24, 0x24	; 36
    2fb2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_LOW);
#endif

#ifdef CONF_BOARD_AT45DBX
	ioport_configure_pin(AT45DBX_MASTER_SCK, IOPORT_DIR_OUTPUT
    2fb6:	63 e0       	ldi	r22, 0x03	; 3
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	89 e1       	ldi	r24, 0x19	; 25
    2fbc:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(AT45DBX_MASTER_MOSI, IOPORT_DIR_OUTPUT
    2fc0:	63 e0       	ldi	r22, 0x03	; 3
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	8b e1       	ldi	r24, 0x1B	; 27
    2fc6:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(AT45DBX_MASTER_MISO, IOPORT_DIR_INPUT);
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	8a e1       	ldi	r24, 0x1A	; 26
    2fd0:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(AT45DBX_CS, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
    2fd4:	63 e0       	ldi	r22, 0x03	; 3
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	8c e2       	ldi	r24, 0x2C	; 44
    2fda:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(MXT143E_XPLAINED_LCD_RESET, IOPORT_DIR_OUTPUT
			| IOPORT_INIT_LOW);
#endif

#ifdef CONF_BOARD_ENABLE_AC_PINS
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 0), IOPORT_DIR_INPUT);
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 2), IOPORT_DIR_INPUT);
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	82 e0       	ldi	r24, 0x02	; 2
    2fee:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTB, 1), IOPORT_DIR_INPUT);
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	89 e0       	ldi	r24, 0x09	; 9
    2ff8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
#endif

#ifdef CONF_BOARD_ENABLE_USARTC0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT
    2ffc:	63 e0       	ldi	r22, 0x03	; 3
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	83 e1       	ldi	r24, 0x13	; 19
    3002:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 2), IOPORT_DIR_INPUT);
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	82 e1       	ldi	r24, 0x12	; 18
    300c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
#endif

#ifdef CONF_BOARD_ENABLE_USARTD0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 3), IOPORT_DIR_OUTPUT
    3010:	63 e0       	ldi	r22, 0x03	; 3
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	8b e1       	ldi	r24, 0x1B	; 27
    3016:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 2), IOPORT_DIR_INPUT);
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	8a e1       	ldi	r24, 0x1A	; 26
    3020:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
#endif

#ifdef CONF_BOARD_ENABLE_USARTE0
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 3), IOPORT_DIR_OUTPUT
    3024:	63 e0       	ldi	r22, 0x03	; 3
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	83 e2       	ldi	r24, 0x23	; 35
    302a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ioport_configure_pin>
			| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTE, 2), IOPORT_DIR_INPUT);
    302e:	60 e0       	ldi	r22, 0x00	; 0
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	82 e2       	ldi	r24, 0x22	; 34
    3034:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <ioport_configure_pin>

00003038 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
    3038:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <udi_vendor_alternate_setting>
    303c:	08 95       	ret

0000303e <udi_vendor_disable>:
}


void udi_vendor_disable(void)
{
	if (1 == udi_vendor_alternate_setting) {
    303e:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <udi_vendor_alternate_setting>
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	11 f4       	brne	.+4      	; 0x304a <udi_vendor_disable+0xc>
		UDI_VENDOR_DISABLE_EXT();
    3046:	0c 94 81 01 	jmp	0x302	; 0x302 <main_vendor_disable>
    304a:	08 95       	ret

0000304c <udi_vendor_enable>:
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
    304c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <udc_get_interface_desc>
    3050:	fc 01       	movw	r30, r24
    3052:	83 81       	ldd	r24, Z+3	; 0x03
    3054:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <udi_vendor_alternate_setting>
	if (1 == udi_vendor_alternate_setting) {
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	11 f4       	brne	.+4      	; 0x3060 <udi_vendor_enable+0x14>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
    305c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <main_vendor_enable>
			return false;
		}
	}
	return true;
}
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	08 95       	ret

00003064 <udi_vendor_setup>:
}


bool udi_vendor_setup(void)
{
	if (Udd_setup_is_in()) {
    3064:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <udd_g_ctrlreq>
    3068:	89 2f       	mov	r24, r25
    306a:	80 76       	andi	r24, 0x60	; 96
    306c:	97 ff       	sbrs	r25, 7
    306e:	08 c0       	rjmp	.+16     	; 0x3080 <udi_vendor_setup+0x1c>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    3070:	80 34       	cpi	r24, 0x40	; 64
    3072:	a1 f4       	brne	.+40     	; 0x309c <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
    3074:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    3078:	81 11       	cpse	r24, r1
    307a:	10 c0       	rjmp	.+32     	; 0x309c <udi_vendor_setup+0x38>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
    307c:	0c 94 99 01 	jmp	0x332	; 0x332 <main_setup_in_received>
		}
	}
	if (Udd_setup_is_out()) {
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
    3080:	80 34       	cpi	r24, 0x40	; 64
    3082:	61 f4       	brne	.+24     	; 0x309c <udi_vendor_setup+0x38>
				&& (udd_g_ctrlreq.req.bRequest == 0)
    3084:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    3088:	81 11       	cpse	r24, r1
    308a:	08 c0       	rjmp	.+16     	; 0x309c <udi_vendor_setup+0x38>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
    308c:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3090:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3094:	89 2b       	or	r24, r25
    3096:	11 f0       	breq	.+4      	; 0x309c <udi_vendor_setup+0x38>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
    3098:	0c 94 84 01 	jmp	0x308	; 0x308 <main_setup_out_received>
		}
	}
	return false; // Not supported request
}
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	08 95       	ret

000030a0 <udi_vendor_interrupt_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_IN,
    30a6:	8a 01       	movw	r16, r20
    30a8:	ac 01       	movw	r20, r24
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	81 e8       	ldi	r24, 0x81	; 129
    30ae:	0e 94 45 20 	call	0x408a	; 0x408a <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	08 95       	ret

000030b8 <udi_vendor_interrupt_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_interrupt_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_INTERRUPT_OUT,
    30be:	8a 01       	movw	r16, r20
    30c0:	ac 01       	movw	r20, r24
    30c2:	60 e0       	ldi	r22, 0x00	; 0
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	0e 94 45 20 	call	0x408a	; 0x408a <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    30d0:	0f 93       	push	r16
    30d2:	1f 93       	push	r17
    30d4:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
    30d6:	8a 01       	movw	r16, r20
    30d8:	ac 01       	movw	r20, r24
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	83 e8       	ldi	r24, 0x83	; 131
    30de:	0e 94 45 20 	call	0x408a	; 0x408a <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	08 95       	ret

000030e8 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
    30ee:	8a 01       	movw	r16, r20
    30f0:	ac 01       	movw	r20, r24
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	0e 94 45 20 	call	0x408a	; 0x408a <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	08 95       	ret

00003100 <udi_vendor_iso_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    3104:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_IN,
    3106:	8a 01       	movw	r16, r20
    3108:	ac 01       	movw	r20, r24
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	85 e8       	ldi	r24, 0x85	; 133
    310e:	0e 94 45 20 	call	0x408a	; 0x408a <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <udi_vendor_iso_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_iso_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	9b 01       	movw	r18, r22
	return udd_ep_run(UDI_VENDOR_EP_ISO_OUT,
    311e:	8a 01       	movw	r16, r20
    3120:	ac 01       	movw	r20, r24
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	86 e0       	ldi	r24, 0x06	; 6
    3126:	0e 94 45 20 	call	0x408a	; 0x408a <udd_ep_run>
			false,
			buf,
			buf_size,
			callback);
}
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3130:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    3134:	8f 77       	andi	r24, 0x7F	; 127
    3136:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <udd_set_address>

0000313a <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    313a:	90 91 9c 21 	lds	r25, 0x219C	; 0x80219c <udc_num_configuration>
    313e:	91 11       	cpse	r25, r1
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <udc_update_iface_desc+0xc>
		return false;
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3146:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    314a:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    314e:	01 90       	ld	r0, Z+
    3150:	f0 81       	ld	r31, Z
    3152:	e0 2d       	mov	r30, r0
    3154:	94 81       	ldd	r25, Z+4	; 0x04
    3156:	89 17       	cp	r24, r25
    3158:	a0 f7       	brcc	.-24     	; 0x3142 <udc_update_iface_desc+0x8>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    315a:	e0 93 98 21 	sts	0x2198, r30	; 0x802198 <udc_ptr_iface>
    315e:	f0 93 99 21 	sts	0x2199, r31	; 0x802199 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3162:	22 81       	ldd	r18, Z+2	; 0x02
    3164:	33 81       	ldd	r19, Z+3	; 0x03
    3166:	2e 0f       	add	r18, r30
    3168:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    316a:	e2 17       	cp	r30, r18
    316c:	f3 07       	cpc	r31, r19
    316e:	98 f4       	brcc	.+38     	; 0x3196 <udc_update_iface_desc+0x5c>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	94 30       	cpi	r25, 0x04	; 4
    3174:	61 f4       	brne	.+24     	; 0x318e <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3176:	92 81       	ldd	r25, Z+2	; 0x02
    3178:	89 13       	cpse	r24, r25
    317a:	09 c0       	rjmp	.+18     	; 0x318e <udc_update_iface_desc+0x54>
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	69 13       	cpse	r22, r25
    3180:	06 c0       	rjmp	.+12     	; 0x318e <udc_update_iface_desc+0x54>
    3182:	e0 93 98 21 	sts	0x2198, r30	; 0x802198 <udc_ptr_iface>
    3186:	f0 93 99 21 	sts	0x2199, r31	; 0x802199 <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    318e:	90 81       	ld	r25, Z
    3190:	e9 0f       	add	r30, r25
    3192:	f1 1d       	adc	r31, r1
    3194:	ea cf       	rjmp	.-44     	; 0x316a <udc_update_iface_desc+0x30>
    3196:	e0 93 98 21 	sts	0x2198, r30	; 0x802198 <udc_ptr_iface>
    319a:	f0 93 99 21 	sts	0x2199, r31	; 0x802199 <udc_ptr_iface+0x1>
    319e:	d1 cf       	rjmp	.-94     	; 0x3142 <udc_update_iface_desc+0x8>

000031a0 <udc_next_desc_in_iface.constprop.3>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    31a0:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    31a4:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    31a8:	01 90       	ld	r0, Z+
    31aa:	f0 81       	ld	r31, Z
    31ac:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    31ae:	22 81       	ldd	r18, Z+2	; 0x02
    31b0:	33 81       	ldd	r19, Z+3	; 0x03
    31b2:	2e 0f       	add	r18, r30
    31b4:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    31b6:	fc 01       	movw	r30, r24
    31b8:	40 81       	ld	r20, Z
    31ba:	e4 0f       	add	r30, r20
    31bc:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    31be:	e2 17       	cp	r30, r18
    31c0:	f3 07       	cpc	r31, r19
    31c2:	48 f4       	brcc	.+18     	; 0x31d6 <udc_next_desc_in_iface.constprop.3+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    31c4:	81 81       	ldd	r24, Z+1	; 0x01
    31c6:	84 30       	cpi	r24, 0x04	; 4
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <udc_next_desc_in_iface.constprop.3+0x36>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    31ca:	85 30       	cpi	r24, 0x05	; 5
    31cc:	39 f0       	breq	.+14     	; 0x31dc <udc_next_desc_in_iface.constprop.3+0x3c>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    31ce:	80 81       	ld	r24, Z
    31d0:	e8 0f       	add	r30, r24
    31d2:	f1 1d       	adc	r31, r1
    31d4:	f4 cf       	rjmp	.-24     	; 0x31be <udc_next_desc_in_iface.constprop.3+0x1e>
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	08 95       	ret
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    31dc:	cf 01       	movw	r24, r30
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
    31de:	08 95       	ret

000031e0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    31e0:	1f 93       	push	r17
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    31e8:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    31ec:	88 23       	and	r24, r24
    31ee:	49 f1       	breq	.+82     	; 0x3242 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    31f0:	c0 91 98 21 	lds	r28, 0x2198	; 0x802198 <udc_ptr_iface>
    31f4:	d0 91 99 21 	lds	r29, 0x2199	; 0x802199 <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    31f8:	ce 01       	movw	r24, r28
    31fa:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <udc_next_desc_in_iface.constprop.3>
    31fe:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3200:	89 2b       	or	r24, r25
    3202:	49 f0       	breq	.+18     	; 0x3216 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3204:	4c 81       	ldd	r20, Y+4	; 0x04
    3206:	5d 81       	ldd	r21, Y+5	; 0x05
    3208:	6b 81       	ldd	r22, Y+3	; 0x03
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <udd_ep_alloc>
    3210:	81 11       	cpse	r24, r1
    3212:	f2 cf       	rjmp	.-28     	; 0x31f8 <udc_iface_enable+0x18>
    3214:	16 c0       	rjmp	.+44     	; 0x3242 <udc_iface_enable+0x62>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3216:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    321a:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    321e:	92 81       	ldd	r25, Z+2	; 0x02
    3220:	83 81       	ldd	r24, Z+3	; 0x03
    3222:	e9 2f       	mov	r30, r25
    3224:	f8 2f       	mov	r31, r24
    3226:	e1 0f       	add	r30, r17
    3228:	f1 1d       	adc	r31, r1
    322a:	e1 0f       	add	r30, r17
    322c:	f1 1d       	adc	r31, r1
    322e:	01 90       	ld	r0, Z+
    3230:	f0 81       	ld	r31, Z
    3232:	e0 2d       	mov	r30, r0
    3234:	01 90       	ld	r0, Z+
    3236:	f0 81       	ld	r31, Z
    3238:	e0 2d       	mov	r30, r0
}
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3240:	19 94       	eijmp
}
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	08 95       	ret

0000324c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    325e:	81 11       	cpse	r24, r1
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <udc_iface_disable+0x1a>
		return false;
    3262:	10 e0       	ldi	r17, 0x00	; 0
    3264:	2f c0       	rjmp	.+94     	; 0x32c4 <udc_iface_disable+0x78>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3266:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    326a:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    326e:	92 81       	ldd	r25, Z+2	; 0x02
    3270:	83 81       	ldd	r24, Z+3	; 0x03
    3272:	e9 2f       	mov	r30, r25
    3274:	f8 2f       	mov	r31, r24
    3276:	ec 0f       	add	r30, r28
    3278:	f1 1d       	adc	r31, r1
    327a:	ec 0f       	add	r30, r28
    327c:	f1 1d       	adc	r31, r1
    327e:	e0 80       	ld	r14, Z
    3280:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3282:	d7 01       	movw	r26, r14
    3284:	16 96       	adiw	r26, 0x06	; 6
    3286:	ed 91       	ld	r30, X+
    3288:	fc 91       	ld	r31, X
    328a:	17 97       	sbiw	r26, 0x07	; 7
    328c:	19 95       	eicall
    328e:	68 2f       	mov	r22, r24
    3290:	8c 2f       	mov	r24, r28
    3292:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    3296:	18 2f       	mov	r17, r24
    3298:	88 23       	and	r24, r24
    329a:	19 f3       	breq	.-58     	; 0x3262 <udc_iface_disable+0x16>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    329c:	c0 91 98 21 	lds	r28, 0x2198	; 0x802198 <udc_ptr_iface>
    32a0:	d0 91 99 21 	lds	r29, 0x2199	; 0x802199 <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    32a4:	ce 01       	movw	r24, r28
    32a6:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <udc_next_desc_in_iface.constprop.3>
    32aa:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    32ac:	89 2b       	or	r24, r25
    32ae:	21 f0       	breq	.+8      	; 0x32b8 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <udd_ep_free>
    32b6:	f6 cf       	rjmp	.-20     	; 0x32a4 <udc_iface_disable+0x58>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    32b8:	d7 01       	movw	r26, r14
    32ba:	12 96       	adiw	r26, 0x02	; 2
    32bc:	ed 91       	ld	r30, X+
    32be:	fc 91       	ld	r31, X
    32c0:	13 97       	sbiw	r26, 0x03	; 3
    32c2:	19 95       	eicall
	return true;
}
    32c4:	81 2f       	mov	r24, r17
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	08 95       	ret

000032d2 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    32d2:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <udc_ptr_iface>
    32d6:	90 91 99 21 	lds	r25, 0x2199	; 0x802199 <udc_ptr_iface+0x1>
    32da:	08 95       	ret

000032dc <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    32dc:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <udd_enable>

000032e0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    32e0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    32e2:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_num_configuration>
    32e6:	81 11       	cpse	r24, r1
    32e8:	0a c0       	rjmp	.+20     	; 0x32fe <udc_reset+0x1e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    32ea:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <udc_device_status>
    32f6:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret
    32fe:	c0 e0       	ldi	r28, 0x00	; 0
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3300:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    3304:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    3308:	01 90       	ld	r0, Z+
    330a:	f0 81       	ld	r31, Z
    330c:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    330e:	84 81       	ldd	r24, Z+4	; 0x04
    3310:	c8 17       	cp	r28, r24
    3312:	58 f7       	brcc	.-42     	; 0x32ea <udc_reset+0xa>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3314:	8c 2f       	mov	r24, r28
    3316:	0e 94 26 19 	call	0x324c	; 0x324c <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    331a:	cf 5f       	subi	r28, 0xFF	; 255
    331c:	f1 cf       	rjmp	.-30     	; 0x3300 <udc_reset+0x20>

0000331e <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    331e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <udd_disable>
	udc_reset();
    3322:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <udc_reset>

00003326 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3326:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3328:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_num_configuration>
    332c:	88 23       	and	r24, r24
    332e:	f1 f0       	breq	.+60     	; 0x336c <udc_sof_notify+0x46>
    3330:	c0 e0       	ldi	r28, 0x00	; 0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3332:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    3336:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    333a:	a0 81       	ld	r26, Z
    333c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    333e:	14 96       	adiw	r26, 0x04	; 4
    3340:	8c 91       	ld	r24, X
    3342:	c8 17       	cp	r28, r24
    3344:	98 f4       	brcc	.+38     	; 0x336c <udc_sof_notify+0x46>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3346:	92 81       	ldd	r25, Z+2	; 0x02
    3348:	83 81       	ldd	r24, Z+3	; 0x03
    334a:	e9 2f       	mov	r30, r25
    334c:	f8 2f       	mov	r31, r24
    334e:	ec 0f       	add	r30, r28
    3350:	f1 1d       	adc	r31, r1
    3352:	ec 0f       	add	r30, r28
    3354:	f1 1d       	adc	r31, r1
    3356:	01 90       	ld	r0, Z+
    3358:	f0 81       	ld	r31, Z
    335a:	e0 2d       	mov	r30, r0
    335c:	00 84       	ldd	r0, Z+8	; 0x08
    335e:	f1 85       	ldd	r31, Z+9	; 0x09
    3360:	e0 2d       	mov	r30, r0
    3362:	30 97       	sbiw	r30, 0x00	; 0
    3364:	09 f0       	breq	.+2      	; 0x3368 <udc_sof_notify+0x42>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3366:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3368:	cf 5f       	subi	r28, 0xFF	; 255
    336a:	e3 cf       	rjmp	.-58     	; 0x3332 <udc_sof_notify+0xc>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    336c:	cf 91       	pop	r28
    336e:	08 95       	ret

00003370 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3370:	ef 92       	push	r14
    3372:	ff 92       	push	r15
    3374:	0f 93       	push	r16
    3376:	1f 93       	push	r17
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	1f 92       	push	r1
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3382:	10 92 82 24 	sts	0x2482, r1	; 0x802482 <udd_g_ctrlreq+0xa>
    3386:	10 92 83 24 	sts	0x2483, r1	; 0x802483 <udd_g_ctrlreq+0xb>
	udd_g_ctrlreq.callback = NULL;
    338a:	10 92 84 24 	sts	0x2484, r1	; 0x802484 <udd_g_ctrlreq+0xc>
    338e:	10 92 85 24 	sts	0x2485, r1	; 0x802485 <udd_g_ctrlreq+0xd>
	udd_g_ctrlreq.over_under_run = NULL;
    3392:	10 92 86 24 	sts	0x2486, r1	; 0x802486 <udd_g_ctrlreq+0xe>
    3396:	10 92 87 24 	sts	0x2487, r1	; 0x802487 <udd_g_ctrlreq+0xf>

	if (Udd_setup_is_in()) {
    339a:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq>
    339e:	87 ff       	sbrs	r24, 7
    33a0:	07 c0       	rjmp	.+14     	; 0x33b0 <udc_process_setup+0x40>
		if (udd_g_ctrlreq.req.wLength == 0) {
    33a2:	20 91 7e 24 	lds	r18, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    33a6:	30 91 7f 24 	lds	r19, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    33aa:	23 2b       	or	r18, r19
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <udc_process_setup+0x40>
    33ae:	51 c2       	rjmp	.+1186   	; 0x3852 <udc_process_setup+0x4e2>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    33b0:	98 2f       	mov	r25, r24
    33b2:	90 76       	andi	r25, 0x60	; 96
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <udc_process_setup+0x48>
    33b6:	d9 c1       	rjmp	.+946    	; 0x376a <udc_process_setup+0x3fa>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    33b8:	87 ff       	sbrs	r24, 7
    33ba:	02 c1       	rjmp	.+516    	; 0x35c0 <udc_process_setup+0x250>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    33bc:	20 91 7e 24 	lds	r18, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    33c0:	30 91 7f 24 	lds	r19, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    33c4:	21 15       	cp	r18, r1
    33c6:	31 05       	cpc	r19, r1
    33c8:	09 f4       	brne	.+2      	; 0x33cc <udc_process_setup+0x5c>
    33ca:	cf c1       	rjmp	.+926    	; 0x376a <udc_process_setup+0x3fa>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    33cc:	8f 71       	andi	r24, 0x1F	; 31
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <udc_process_setup+0x62>
    33d0:	a2 c0       	rjmp	.+324    	; 0x3516 <udc_process_setup+0x1a6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    33d2:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    33d6:	86 30       	cpi	r24, 0x06	; 6
    33d8:	71 f0       	breq	.+28     	; 0x33f6 <udc_process_setup+0x86>
    33da:	88 30       	cpi	r24, 0x08	; 8
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <udc_process_setup+0x70>
    33de:	90 c0       	rjmp	.+288    	; 0x3500 <udc_process_setup+0x190>
    33e0:	81 11       	cpse	r24, r1
    33e2:	c3 c1       	rjmp	.+902    	; 0x376a <udc_process_setup+0x3fa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    33e4:	22 30       	cpi	r18, 0x02	; 2
    33e6:	31 05       	cpc	r19, r1
    33e8:	09 f0       	breq	.+2      	; 0x33ec <udc_process_setup+0x7c>
    33ea:	bf c1       	rjmp	.+894    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    33ec:	62 e0       	ldi	r22, 0x02	; 2
    33ee:	70 e0       	ldi	r23, 0x00	; 0
    33f0:	8f e9       	ldi	r24, 0x9F	; 159
    33f2:	91 e2       	ldi	r25, 0x21	; 33
    33f4:	8d c0       	rjmp	.+282    	; 0x3510 <udc_process_setup+0x1a0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    33f6:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    33fa:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    33fe:	29 2f       	mov	r18, r25
    3400:	33 27       	eor	r19, r19
    3402:	22 30       	cpi	r18, 0x02	; 2
    3404:	31 05       	cpc	r19, r1
    3406:	a1 f0       	breq	.+40     	; 0x3430 <udc_process_setup+0xc0>
    3408:	64 f4       	brge	.+24     	; 0x3422 <udc_process_setup+0xb2>
    340a:	21 30       	cpi	r18, 0x01	; 1
    340c:	31 05       	cpc	r19, r1
    340e:	09 f0       	breq	.+2      	; 0x3412 <udc_process_setup+0xa2>
    3410:	ac c1       	rjmp	.+856    	; 0x376a <udc_process_setup+0x3fa>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3412:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <udc_config>
    3416:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    341a:	dc 01       	movw	r26, r24
    341c:	6c 91       	ld	r22, X
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	5c c0       	rjmp	.+184    	; 0x34da <udc_process_setup+0x16a>
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3422:	23 30       	cpi	r18, 0x03	; 3
    3424:	31 05       	cpc	r19, r1
    3426:	91 f1       	breq	.+100    	; 0x348c <udc_process_setup+0x11c>
    3428:	2f 30       	cpi	r18, 0x0F	; 15
    342a:	31 05       	cpc	r19, r1
    342c:	11 f1       	breq	.+68     	; 0x3472 <udc_process_setup+0x102>
    342e:	9d c1       	rjmp	.+826    	; 0x376a <udc_process_setup+0x3fa>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3430:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config>
    3434:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x1>
    3438:	21 89       	ldd	r18, Z+17	; 0x11
    343a:	82 17       	cp	r24, r18
    343c:	08 f0       	brcs	.+2      	; 0x3440 <udc_process_setup+0xd0>
    343e:	95 c1       	rjmp	.+810    	; 0x376a <udc_process_setup+0x3fa>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3440:	99 27       	eor	r25, r25
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <udc_config+0x2>
    344e:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <udc_config+0x3>
    3452:	e8 0f       	add	r30, r24
    3454:	f9 1f       	adc	r31, r25
    3456:	80 81       	ld	r24, Z
    3458:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    345a:	fc 01       	movw	r30, r24
    345c:	62 81       	ldd	r22, Z+2	; 0x02
    345e:	73 81       	ldd	r23, Z+3	; 0x03
    3460:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3464:	e0 91 80 24 	lds	r30, 0x2480	; 0x802480 <udd_g_ctrlreq+0x8>
    3468:	f0 91 81 24 	lds	r31, 0x2481	; 0x802481 <udd_g_ctrlreq+0x9>
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	81 83       	std	Z+1, r24	; 0x01
    3470:	36 c0       	rjmp	.+108    	; 0x34de <udc_process_setup+0x16e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3472:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <udc_config+0x4>
    3476:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <udc_config+0x5>
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	09 f4       	brne	.+2      	; 0x3480 <udc_process_setup+0x110>
    347e:	75 c1       	rjmp	.+746    	; 0x376a <udc_process_setup+0x3fa>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3480:	dc 01       	movw	r26, r24
    3482:	12 96       	adiw	r26, 0x02	; 2
    3484:	6d 91       	ld	r22, X+
    3486:	7c 91       	ld	r23, X
    3488:	13 97       	sbiw	r26, 0x03	; 3
    348a:	27 c0       	rjmp	.+78     	; 0x34da <udc_process_setup+0x16a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    348c:	99 27       	eor	r25, r25
    348e:	81 30       	cpi	r24, 0x01	; 1
    3490:	91 05       	cpc	r25, r1
    3492:	69 f0       	breq	.+26     	; 0x34ae <udc_process_setup+0x13e>
    3494:	38 f0       	brcs	.+14     	; 0x34a4 <udc_process_setup+0x134>
    3496:	02 97       	sbiw	r24, 0x02	; 2
    3498:	09 f0       	breq	.+2      	; 0x349c <udc_process_setup+0x12c>
    349a:	67 c1       	rjmp	.+718    	; 0x376a <udc_process_setup+0x3fa>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    349c:	64 e1       	ldi	r22, 0x14	; 20
		str = udc_string_product_name;
    349e:	8e ea       	ldi	r24, 0xAE	; 174
    34a0:	90 e2       	ldi	r25, 0x20	; 32
    34a2:	08 c0       	rjmp	.+16     	; 0x34b4 <udc_process_setup+0x144>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    34a4:	64 e0       	ldi	r22, 0x04	; 4
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	8e ec       	ldi	r24, 0xCE	; 206
    34aa:	90 e2       	ldi	r25, 0x20	; 32
    34ac:	16 c0       	rjmp	.+44     	; 0x34da <udc_process_setup+0x16a>
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    34ae:	69 e0       	ldi	r22, 0x09	; 9
		str = udc_string_manufacturer_name;
    34b0:	83 ec       	ldi	r24, 0xC3	; 195
    34b2:	90 e2       	ldi	r25, 0x20	; 32
    34b4:	28 2f       	mov	r18, r24
    34b6:	a6 e8       	ldi	r26, 0x86	; 134
    34b8:	b0 e2       	ldi	r27, 0x20	; 32
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    34ba:	fc 01       	movw	r30, r24
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    34bc:	81 91       	ld	r24, Z+
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	8d 93       	st	X+, r24
    34c2:	9d 93       	st	X+, r25
    34c4:	8e 2f       	mov	r24, r30
    34c6:	82 1b       	sub	r24, r18
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    34c8:	86 17       	cp	r24, r22
    34ca:	c0 f3       	brcs	.-16     	; 0x34bc <udc_process_setup+0x14c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    34cc:	66 0f       	add	r22, r22
    34ce:	6e 5f       	subi	r22, 0xFE	; 254
    34d0:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <udc_string_desc>
		udd_set_setup_payload(
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	84 e8       	ldi	r24, 0x84	; 132
    34d8:	90 e2       	ldi	r25, 0x20	; 32
    34da:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    34de:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    34e2:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    34e6:	20 91 82 24 	lds	r18, 0x2482	; 0x802482 <udd_g_ctrlreq+0xa>
    34ea:	30 91 83 24 	lds	r19, 0x2483	; 0x802483 <udd_g_ctrlreq+0xb>
    34ee:	82 17       	cp	r24, r18
    34f0:	93 07       	cpc	r25, r19
    34f2:	08 f0       	brcs	.+2      	; 0x34f6 <udc_process_setup+0x186>
    34f4:	ac c1       	rjmp	.+856    	; 0x384e <udc_process_setup+0x4de>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    34f6:	80 93 82 24 	sts	0x2482, r24	; 0x802482 <udd_g_ctrlreq+0xa>
    34fa:	90 93 83 24 	sts	0x2483, r25	; 0x802483 <udd_g_ctrlreq+0xb>
    34fe:	a7 c1       	rjmp	.+846    	; 0x384e <udc_process_setup+0x4de>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    3500:	21 30       	cpi	r18, 0x01	; 1
    3502:	31 05       	cpc	r19, r1
    3504:	09 f0       	breq	.+2      	; 0x3508 <udc_process_setup+0x198>
    3506:	31 c1       	rjmp	.+610    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	8c e9       	ldi	r24, 0x9C	; 156
    350e:	91 e2       	ldi	r25, 0x21	; 33
    3510:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <udd_set_setup_payload>
    3514:	9c c1       	rjmp	.+824    	; 0x384e <udc_process_setup+0x4de>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3516:	81 30       	cpi	r24, 0x01	; 1
    3518:	d1 f5       	brne	.+116    	; 0x358e <udc_process_setup+0x21e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    351a:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    351e:	8a 30       	cpi	r24, 0x0A	; 10
    3520:	09 f0       	breq	.+2      	; 0x3524 <udc_process_setup+0x1b4>
    3522:	23 c1       	rjmp	.+582    	; 0x376a <udc_process_setup+0x3fa>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3524:	21 30       	cpi	r18, 0x01	; 1
    3526:	31 05       	cpc	r19, r1
    3528:	09 f0       	breq	.+2      	; 0x352c <udc_process_setup+0x1bc>
    352a:	1f c1       	rjmp	.+574    	; 0x376a <udc_process_setup+0x3fa>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    352c:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_num_configuration>
    3530:	88 23       	and	r24, r24
    3532:	09 f4       	brne	.+2      	; 0x3536 <udc_process_setup+0x1c6>
    3534:	1a c1       	rjmp	.+564    	; 0x376a <udc_process_setup+0x3fa>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3536:	e0 90 7c 24 	lds	r14, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
    353a:	f0 90 7d 24 	lds	r15, 0x247D	; 0x80247d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    353e:	00 91 9a 21 	lds	r16, 0x219A	; 0x80219a <udc_ptr_conf>
    3542:	10 91 9b 21 	lds	r17, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    3546:	d8 01       	movw	r26, r16
    3548:	ed 91       	ld	r30, X+
    354a:	fc 91       	ld	r31, X
    354c:	84 81       	ldd	r24, Z+4	; 0x04
    354e:	e8 16       	cp	r14, r24
    3550:	08 f0       	brcs	.+2      	; 0x3554 <udc_process_setup+0x1e4>
    3552:	0b c1       	rjmp	.+534    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	8e 2d       	mov	r24, r14
    3558:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    355c:	88 23       	and	r24, r24
    355e:	09 f4       	brne	.+2      	; 0x3562 <udc_process_setup+0x1f2>
    3560:	04 c1       	rjmp	.+520    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3562:	ff 24       	eor	r15, r15
    3564:	ee 0c       	add	r14, r14
    3566:	ff 1c       	adc	r15, r15
    3568:	f8 01       	movw	r30, r16
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	8e 0d       	add	r24, r14
    3570:	9f 1d       	adc	r25, r15
	udc_iface_setting = udi_api->getsetting();
    3572:	dc 01       	movw	r26, r24
    3574:	ed 91       	ld	r30, X+
    3576:	fc 91       	ld	r31, X
    3578:	06 80       	ldd	r0, Z+6	; 0x06
    357a:	f7 81       	ldd	r31, Z+7	; 0x07
    357c:	e0 2d       	mov	r30, r0
    357e:	19 95       	eicall
    3580:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3584:	61 e0       	ldi	r22, 0x01	; 1
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	8e e9       	ldi	r24, 0x9E	; 158
    358a:	91 e2       	ldi	r25, 0x21	; 33
    358c:	c1 cf       	rjmp	.-126    	; 0x3510 <udc_process_setup+0x1a0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    358e:	82 30       	cpi	r24, 0x02	; 2
    3590:	09 f0       	breq	.+2      	; 0x3594 <udc_process_setup+0x224>
    3592:	eb c0       	rjmp	.+470    	; 0x376a <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3594:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    3598:	81 11       	cpse	r24, r1
    359a:	e7 c0       	rjmp	.+462    	; 0x376a <udc_process_setup+0x3fa>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    359c:	22 30       	cpi	r18, 0x02	; 2
    359e:	31 05       	cpc	r19, r1
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <udc_process_setup+0x234>
    35a2:	e3 c0       	rjmp	.+454    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    35a4:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
    35a8:	0e 94 1e 20 	call	0x403c	; 0x403c <udd_ep_is_halted>
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <udc_ep_status.4544>
    35b2:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <udc_ep_status.4544+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    35b6:	62 e0       	ldi	r22, 0x02	; 2
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	86 e9       	ldi	r24, 0x96	; 150
    35bc:	91 e2       	ldi	r25, 0x21	; 33
    35be:	a8 cf       	rjmp	.-176    	; 0x3510 <udc_process_setup+0x1a0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    35c0:	8f 71       	andi	r24, 0x1F	; 31
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <udc_process_setup+0x256>
    35c4:	80 c0       	rjmp	.+256    	; 0x36c6 <udc_process_setup+0x356>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    35c6:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    35ca:	83 30       	cpi	r24, 0x03	; 3
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <udc_process_setup+0x260>
    35ce:	cd c0       	rjmp	.+410    	; 0x376a <udc_process_setup+0x3fa>
    35d0:	18 f4       	brcc	.+6      	; 0x35d8 <udc_process_setup+0x268>
    35d2:	81 30       	cpi	r24, 0x01	; 1
    35d4:	a1 f0       	breq	.+40     	; 0x35fe <udc_process_setup+0x28e>
    35d6:	c9 c0       	rjmp	.+402    	; 0x376a <udc_process_setup+0x3fa>
    35d8:	85 30       	cpi	r24, 0x05	; 5
    35da:	19 f0       	breq	.+6      	; 0x35e2 <udc_process_setup+0x272>
    35dc:	89 30       	cpi	r24, 0x09	; 9
    35de:	39 f1       	breq	.+78     	; 0x362e <udc_process_setup+0x2be>
    35e0:	c4 c0       	rjmp	.+392    	; 0x376a <udc_process_setup+0x3fa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    35e2:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    35e6:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    35ea:	89 2b       	or	r24, r25
    35ec:	09 f0       	breq	.+2      	; 0x35f0 <udc_process_setup+0x280>
    35ee:	bd c0       	rjmp	.+378    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    35f0:	88 e9       	ldi	r24, 0x98	; 152
    35f2:	98 e1       	ldi	r25, 0x18	; 24
    35f4:	80 93 84 24 	sts	0x2484, r24	; 0x802484 <udd_g_ctrlreq+0xc>
    35f8:	90 93 85 24 	sts	0x2485, r25	; 0x802485 <udd_g_ctrlreq+0xd>
    35fc:	28 c1       	rjmp	.+592    	; 0x384e <udc_process_setup+0x4de>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    35fe:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3602:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3606:	89 2b       	or	r24, r25
    3608:	09 f0       	breq	.+2      	; 0x360c <udc_process_setup+0x29c>
    360a:	af c0       	rjmp	.+350    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    360c:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    3610:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x3>
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	09 f0       	breq	.+2      	; 0x361a <udc_process_setup+0x2aa>
    3618:	a8 c0       	rjmp	.+336    	; 0x376a <udc_process_setup+0x3fa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    361a:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <udc_device_status>
    361e:	90 91 a0 21 	lds	r25, 0x21A0	; 0x8021a0 <udc_device_status+0x1>
    3622:	8d 7f       	andi	r24, 0xFD	; 253
    3624:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <udc_device_status>
    3628:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <udc_device_status+0x1>
    362c:	10 c1       	rjmp	.+544    	; 0x384e <udc_process_setup+0x4de>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    362e:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3632:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3636:	89 2b       	or	r24, r25
    3638:	09 f0       	breq	.+2      	; 0x363c <udc_process_setup+0x2cc>
    363a:	97 c0       	rjmp	.+302    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    363c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <udd_getaddress>
    3640:	88 23       	and	r24, r24
    3642:	09 f4       	brne	.+2      	; 0x3646 <udc_process_setup+0x2d6>
    3644:	92 c0       	rjmp	.+292    	; 0x376a <udc_process_setup+0x3fa>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3646:	20 91 7a 24 	lds	r18, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    364a:	30 91 7b 24 	lds	r19, 0x247B	; 0x80247b <udd_g_ctrlreq+0x3>
    364e:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    3650:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config>
    3654:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3658:	81 89       	ldd	r24, Z+17	; 0x11
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	82 17       	cp	r24, r18
    365e:	93 07       	cpc	r25, r19
    3660:	08 f4       	brcc	.+2      	; 0x3664 <udc_process_setup+0x2f4>
    3662:	83 c0       	rjmp	.+262    	; 0x376a <udc_process_setup+0x3fa>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    3664:	0e 94 70 19 	call	0x32e0	; 0x32e0 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3668:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    366c:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x3>
    3670:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <udc_num_configuration>
	if (udc_num_configuration == 0) {
    3674:	88 23       	and	r24, r24
    3676:	09 f4       	brne	.+2      	; 0x367a <udc_process_setup+0x30a>
    3678:	ea c0       	rjmp	.+468    	; 0x384e <udc_process_setup+0x4de>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    367a:	99 27       	eor	r25, r25
    367c:	81 50       	subi	r24, 0x01	; 1
    367e:	90 4c       	sbci	r25, 0xC0	; 192
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <udc_config+0x2>
    368c:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <udc_config+0x3>
    3690:	82 0f       	add	r24, r18
    3692:	93 1f       	adc	r25, r19
    3694:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udc_ptr_conf>
    3698:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    369c:	10 e0       	ldi	r17, 0x00	; 0
    369e:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    36a2:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    36a6:	01 90       	ld	r0, Z+
    36a8:	f0 81       	ld	r31, Z
    36aa:	e0 2d       	mov	r30, r0
    36ac:	84 81       	ldd	r24, Z+4	; 0x04
    36ae:	18 17       	cp	r17, r24
    36b0:	08 f0       	brcs	.+2      	; 0x36b4 <udc_process_setup+0x344>
    36b2:	cd c0       	rjmp	.+410    	; 0x384e <udc_process_setup+0x4de>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	81 2f       	mov	r24, r17
    36b8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <udc_iface_enable>
    36bc:	88 23       	and	r24, r24
    36be:	09 f4       	brne	.+2      	; 0x36c2 <udc_process_setup+0x352>
    36c0:	54 c0       	rjmp	.+168    	; 0x376a <udc_process_setup+0x3fa>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    36c2:	1f 5f       	subi	r17, 0xFF	; 255
    36c4:	ec cf       	rjmp	.-40     	; 0x369e <udc_process_setup+0x32e>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    36c6:	81 30       	cpi	r24, 0x01	; 1
    36c8:	01 f5       	brne	.+64     	; 0x370a <udc_process_setup+0x39a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    36ca:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    36ce:	8b 30       	cpi	r24, 0x0B	; 11
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <udc_process_setup+0x364>
    36d2:	4b c0       	rjmp	.+150    	; 0x376a <udc_process_setup+0x3fa>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    36d4:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    36d8:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    36dc:	89 2b       	or	r24, r25
    36de:	09 f0       	breq	.+2      	; 0x36e2 <udc_process_setup+0x372>
    36e0:	44 c0       	rjmp	.+136    	; 0x376a <udc_process_setup+0x3fa>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    36e2:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_num_configuration>
    36e6:	88 23       	and	r24, r24
    36e8:	09 f4       	brne	.+2      	; 0x36ec <udc_process_setup+0x37c>
    36ea:	3f c0       	rjmp	.+126    	; 0x376a <udc_process_setup+0x3fa>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    36ec:	10 91 7c 24 	lds	r17, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    36f0:	60 91 7a 24 	lds	r22, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    36f4:	81 2f       	mov	r24, r17
    36f6:	69 83       	std	Y+1, r22	; 0x01
    36f8:	0e 94 26 19 	call	0x324c	; 0x324c <udc_iface_disable>
    36fc:	69 81       	ldd	r22, Y+1	; 0x01
    36fe:	88 23       	and	r24, r24
    3700:	a1 f1       	breq	.+104    	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3702:	81 2f       	mov	r24, r17
    3704:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <udc_iface_enable>
    3708:	2e c0       	rjmp	.+92     	; 0x3766 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    370a:	82 30       	cpi	r24, 0x02	; 2
    370c:	71 f5       	brne	.+92     	; 0x376a <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    370e:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <udd_g_ctrlreq+0x1>
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	19 f0       	breq	.+6      	; 0x371c <udc_process_setup+0x3ac>
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	91 f0       	breq	.+36     	; 0x373e <udc_process_setup+0x3ce>
    371a:	27 c0       	rjmp	.+78     	; 0x376a <udc_process_setup+0x3fa>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    371c:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3720:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3724:	89 2b       	or	r24, r25
    3726:	09 f5       	brne	.+66     	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3728:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    372c:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x3>
    3730:	89 2b       	or	r24, r25
    3732:	d9 f4       	brne	.+54     	; 0x376a <udc_process_setup+0x3fa>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3734:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
    3738:	0e 94 26 20 	call	0x404c	; 0x404c <udd_ep_clear_halt>
    373c:	14 c0       	rjmp	.+40     	; 0x3766 <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    373e:	80 91 7e 24 	lds	r24, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3742:	90 91 7f 24 	lds	r25, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3746:	89 2b       	or	r24, r25
    3748:	81 f4       	brne	.+32     	; 0x376a <udc_process_setup+0x3fa>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    374a:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udd_g_ctrlreq+0x2>
    374e:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <udd_g_ctrlreq+0x3>
    3752:	89 2b       	or	r24, r25
    3754:	51 f4       	brne	.+20     	; 0x376a <udc_process_setup+0x3fa>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3756:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
    375a:	0e 94 c7 20 	call	0x418e	; 0x418e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    375e:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
    3762:	0e 94 04 21 	call	0x4208	; 0x4208 <udd_ep_set_halt>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    3766:	81 11       	cpse	r24, r1
    3768:	72 c0       	rjmp	.+228    	; 0x384e <udc_process_setup+0x4de>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    376a:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq>
    376e:	8f 71       	andi	r24, 0x1F	; 31
    3770:	81 30       	cpi	r24, 0x01	; 1
    3772:	c9 f5       	brne	.+114    	; 0x37e6 <udc_process_setup+0x476>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3774:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_num_configuration>
    3778:	88 23       	and	r24, r24
    377a:	a9 f1       	breq	.+106    	; 0x37e6 <udc_process_setup+0x476>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    377c:	e0 90 7c 24 	lds	r14, 0x247C	; 0x80247c <udd_g_ctrlreq+0x4>
    3780:	f0 90 7d 24 	lds	r15, 0x247D	; 0x80247d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3784:	00 91 9a 21 	lds	r16, 0x219A	; 0x80219a <udc_ptr_conf>
    3788:	10 91 9b 21 	lds	r17, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    378c:	d8 01       	movw	r26, r16
    378e:	ed 91       	ld	r30, X+
    3790:	fc 91       	ld	r31, X
    3792:	84 81       	ldd	r24, Z+4	; 0x04
    3794:	e8 16       	cp	r14, r24
    3796:	38 f5       	brcc	.+78     	; 0x37e6 <udc_process_setup+0x476>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	8e 2d       	mov	r24, r14
    379c:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    37a0:	88 23       	and	r24, r24
    37a2:	09 f1       	breq	.+66     	; 0x37e6 <udc_process_setup+0x476>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    37a4:	f7 01       	movw	r30, r14
    37a6:	ff 27       	eor	r31, r31
    37a8:	ee 0f       	add	r30, r30
    37aa:	ff 1f       	adc	r31, r31
    37ac:	d8 01       	movw	r26, r16
    37ae:	12 96       	adiw	r26, 0x02	; 2
    37b0:	8d 91       	ld	r24, X+
    37b2:	9c 91       	ld	r25, X
    37b4:	13 97       	sbiw	r26, 0x03	; 3
    37b6:	e8 0f       	add	r30, r24
    37b8:	f9 1f       	adc	r31, r25
    37ba:	00 81       	ld	r16, Z
    37bc:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    37be:	d8 01       	movw	r26, r16
    37c0:	16 96       	adiw	r26, 0x06	; 6
    37c2:	ed 91       	ld	r30, X+
    37c4:	fc 91       	ld	r31, X
    37c6:	17 97       	sbiw	r26, 0x07	; 7
    37c8:	19 95       	eicall
    37ca:	68 2f       	mov	r22, r24
    37cc:	8e 2d       	mov	r24, r14
    37ce:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    37d2:	88 23       	and	r24, r24
    37d4:	41 f0       	breq	.+16     	; 0x37e6 <udc_process_setup+0x476>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    37d6:	d8 01       	movw	r26, r16
    37d8:	14 96       	adiw	r26, 0x04	; 4
    37da:	ed 91       	ld	r30, X+
    37dc:	fc 91       	ld	r31, X
    37de:	15 97       	sbiw	r26, 0x05	; 5
    37e0:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    37e2:	81 11       	cpse	r24, r1
    37e4:	34 c0       	rjmp	.+104    	; 0x384e <udc_process_setup+0x4de>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    37e6:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udd_g_ctrlreq>
    37ea:	8f 71       	andi	r24, 0x1F	; 31
    37ec:	82 30       	cpi	r24, 0x02	; 2
    37ee:	89 f5       	brne	.+98     	; 0x3852 <udc_process_setup+0x4e2>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    37f0:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_num_configuration>
    37f4:	88 23       	and	r24, r24
    37f6:	69 f1       	breq	.+90     	; 0x3852 <udc_process_setup+0x4e2>
    37f8:	f1 2c       	mov	r15, r1
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    37fa:	e0 91 9a 21 	lds	r30, 0x219A	; 0x80219a <udc_ptr_conf>
    37fe:	f0 91 9b 21 	lds	r31, 0x219B	; 0x80219b <udc_ptr_conf+0x1>
    3802:	a0 81       	ld	r26, Z
    3804:	b1 81       	ldd	r27, Z+1	; 0x01
    3806:	14 96       	adiw	r26, 0x04	; 4
    3808:	8c 91       	ld	r24, X
    380a:	f8 16       	cp	r15, r24
    380c:	10 f5       	brcc	.+68     	; 0x3852 <udc_process_setup+0x4e2>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    380e:	92 81       	ldd	r25, Z+2	; 0x02
    3810:	83 81       	ldd	r24, Z+3	; 0x03
    3812:	e9 2f       	mov	r30, r25
    3814:	f8 2f       	mov	r31, r24
    3816:	ef 0d       	add	r30, r15
    3818:	f1 1d       	adc	r31, r1
    381a:	ef 0d       	add	r30, r15
    381c:	f1 1d       	adc	r31, r1
    381e:	00 81       	ld	r16, Z
    3820:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3822:	d8 01       	movw	r26, r16
    3824:	16 96       	adiw	r26, 0x06	; 6
    3826:	ed 91       	ld	r30, X+
    3828:	fc 91       	ld	r31, X
    382a:	17 97       	sbiw	r26, 0x07	; 7
    382c:	19 95       	eicall
    382e:	68 2f       	mov	r22, r24
    3830:	8f 2d       	mov	r24, r15
    3832:	0e 94 9d 18 	call	0x313a	; 0x313a <udc_update_iface_desc>
    3836:	88 23       	and	r24, r24
    3838:	61 f0       	breq	.+24     	; 0x3852 <udc_process_setup+0x4e2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    383a:	d8 01       	movw	r26, r16
    383c:	14 96       	adiw	r26, 0x04	; 4
    383e:	ed 91       	ld	r30, X+
    3840:	fc 91       	ld	r31, X
    3842:	15 97       	sbiw	r26, 0x05	; 5
    3844:	19 95       	eicall
    3846:	81 11       	cpse	r24, r1
    3848:	02 c0       	rjmp	.+4      	; 0x384e <udc_process_setup+0x4de>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    384a:	f3 94       	inc	r15
    384c:	d6 cf       	rjmp	.-84     	; 0x37fa <udc_process_setup+0x48a>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	01 c0       	rjmp	.+2      	; 0x3854 <udc_process_setup+0x4e4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3852:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    3854:	0f 90       	pop	r0
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	08 95       	ret

00003864 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3864:	cf 93       	push	r28
    3866:	df 93       	push	r29
    3868:	1f 92       	push	r1
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
	volatile irqflags_t flags = SREG;
    386e:	8f b7       	in	r24, 0x3f	; 63
    3870:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3872:	f8 94       	cli
	return flags;
    3874:	89 81       	ldd	r24, Y+1	; 0x01
}
    3876:	0f 90       	pop	r0
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	08 95       	ret

0000387e <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3882:	c8 2f       	mov	r28, r24
    3884:	d0 e0       	ldi	r29, 0x00	; 0
    3886:	ce 58       	subi	r28, 0x8E	; 142
    3888:	db 4d       	sbci	r29, 0xDB	; 219
    388a:	88 81       	ld	r24, Y
    388c:	8f 3f       	cpi	r24, 0xFF	; 255
    388e:	09 f4       	brne	.+2      	; 0x3892 <sleepmgr_lock_mode+0x14>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    3890:	ff cf       	rjmp	.-2      	; 0x3890 <sleepmgr_lock_mode+0x12>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    3892:	0e 94 32 1c 	call	0x3864	; 0x3864 <cpu_irq_save>

	++sleepmgr_locks[mode];
    3896:	98 81       	ld	r25, Y
    3898:	9f 5f       	subi	r25, 0xFF	; 255
    389a:	98 83       	st	Y, r25

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    389c:	8f bf       	out	0x3f, r24	; 63
	// Leave the critical section
	cpu_irq_restore(flags);
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	08 95       	ret

000038a4 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    38a8:	c8 2f       	mov	r28, r24
    38aa:	d0 e0       	ldi	r29, 0x00	; 0
    38ac:	ce 58       	subi	r28, 0x8E	; 142
    38ae:	db 4d       	sbci	r29, 0xDB	; 219
    38b0:	88 81       	ld	r24, Y
    38b2:	81 11       	cpse	r24, r1
    38b4:	01 c0       	rjmp	.+2      	; 0x38b8 <sleepmgr_unlock_mode+0x14>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    38b6:	ff cf       	rjmp	.-2      	; 0x38b6 <sleepmgr_unlock_mode+0x12>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    38b8:	0e 94 32 1c 	call	0x3864	; 0x3864 <cpu_irq_save>

	--sleepmgr_locks[mode];
    38bc:	98 81       	ld	r25, Y
    38be:	91 50       	subi	r25, 0x01	; 1
    38c0:	98 83       	st	Y, r25
    38c2:	8f bf       	out	0x3f, r24	; 63
	// Leave the critical section
	cpu_irq_restore(flags);
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	08 95       	ret

000038ca <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
    38ca:	cf 93       	push	r28
    38cc:	c8 2f       	mov	r28, r24
    38ce:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_b_idle>
	if (!b_idle && udd_b_idle) {
    38d2:	c1 11       	cpse	r28, r1
    38d4:	06 c0       	rjmp	.+12     	; 0x38e2 <udd_sleep_mode+0x18>
    38d6:	88 23       	and	r24, r24
    38d8:	49 f0       	breq	.+18     	; 0x38ec <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <sleepmgr_unlock_mode>
    38e0:	05 c0       	rjmp	.+10     	; 0x38ec <udd_sleep_mode+0x22>
	}
	if (b_idle && !udd_b_idle) {
    38e2:	81 11       	cpse	r24, r1
    38e4:	03 c0       	rjmp	.+6      	; 0x38ec <udd_sleep_mode+0x22>
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	0e 94 3f 1c 	call	0x387e	; 0x387e <sleepmgr_lock_mode>
	}
	udd_b_idle = b_idle;
    38ec:	c0 93 66 24 	sts	0x2466, r28	; 0x802466 <udd_b_idle>
}
    38f0:	cf 91       	pop	r28
    38f2:	08 95       	ret

000038f4 <udd_ep_get_ctrl>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    38f4:	28 2f       	mov	r18, r24
    38f6:	2f 70       	andi	r18, 0x0F	; 15
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    38f8:	08 2e       	mov	r0, r24
    38fa:	00 0c       	add	r0, r0
    38fc:	99 0b       	sbc	r25, r25
    38fe:	39 2f       	mov	r19, r25
    3900:	33 1f       	adc	r19, r19
    3902:	33 27       	eor	r19, r19
    3904:	33 1f       	adc	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    3906:	83 2f       	mov	r24, r19
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	82 0f       	add	r24, r18
    390c:	91 1d       	adc	r25, r1
    390e:	82 0f       	add	r24, r18
    3910:	91 1d       	adc	r25, r1
    3912:	23 e0       	ldi	r18, 0x03	; 3
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	2a 95       	dec	r18
    391a:	e1 f7       	brne	.-8      	; 0x3914 <udd_ep_get_ctrl+0x20>
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
}
    391c:	8c 50       	subi	r24, 0x0C	; 12
    391e:	9c 4d       	sbci	r25, 0xDC	; 220
    3920:	08 95       	ret

00003922 <udd_ctrl_init>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
    3922:	0f 93       	push	r16
	udd_disable_overflow_interrupt();
    3924:	e8 ec       	ldi	r30, 0xC8	; 200
    3926:	f4 e0       	ldi	r31, 0x04	; 4
    3928:	80 81       	ld	r24, Z
    392a:	8f 7d       	andi	r24, 0xDF	; 223
    392c:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    392e:	80 81       	ld	r24, Z
    3930:	8f 7d       	andi	r24, 0xDF	; 223
    3932:	80 83       	st	Z, r24

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    3934:	ec ef       	ldi	r30, 0xFC	; 252
    3936:	f3 e2       	ldi	r31, 0x23	; 35
    3938:	02 e0       	ldi	r16, 0x02	; 2
    393a:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    393c:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <udd_sram+0x26>
    3940:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udd_sram+0x27>
	udd_control_in_ack_tc();
    3944:	00 e2       	ldi	r16, 0x20	; 32
    3946:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    3948:	00 e4       	ldi	r16, 0x40	; 64
    394a:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    394c:	e4 ef       	ldi	r30, 0xF4	; 244
    394e:	f3 e2       	ldi	r31, 0x23	; 35
    3950:	00 e4       	ldi	r16, 0x40	; 64
    3952:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    3954:	e8 e7       	ldi	r30, 0x78	; 120
    3956:	f4 e2       	ldi	r31, 0x24	; 36
    3958:	14 86       	std	Z+12, r1	; 0x0c
    395a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    395c:	16 86       	std	Z+14, r1	; 0x0e
    395e:	17 86       	std	Z+15, r1	; 0x0f
	udd_g_ctrlreq.payload_size = 0;
    3960:	12 86       	std	Z+10, r1	; 0x0a
    3962:	13 86       	std	Z+11, r1	; 0x0b
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    3964:	10 92 d5 23 	sts	0x23D5, r1	; 0x8023d5 <udd_ep_control_state>
}
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <udd_ctrl_stall_data>:
		udd_control_out_enable_stall();
	}
}

static void udd_ctrl_stall_data(void)
{
    396c:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    396e:	85 e0       	ldi	r24, 0x05	; 5
    3970:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <udd_ep_control_state>
	udd_control_in_enable_stall();
    3974:	ed ef       	ldi	r30, 0xFD	; 253
    3976:	f3 e2       	ldi	r31, 0x23	; 35
    3978:	04 e0       	ldi	r16, 0x04	; 4
    397a:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    397c:	e5 ef       	ldi	r30, 0xF5	; 245
    397e:	f3 e2       	ldi	r31, 0x23	; 35
    3980:	04 e0       	ldi	r16, 0x04	; 4
    3982:	05 93       	las	Z, r16
}
    3984:	0f 91       	pop	r16
    3986:	08 95       	ret

00003988 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    3988:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    398a:	83 e0       	ldi	r24, 0x03	; 3
    398c:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    3990:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <udd_sram+0x26>
    3994:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udd_sram+0x27>
	udd_control_in_clear_NACK0();
    3998:	ec ef       	ldi	r30, 0xFC	; 252
    399a:	f3 e2       	ldi	r31, 0x23	; 35
    399c:	02 e0       	ldi	r16, 0x02	; 2
    399e:	06 93       	lac	Z, r16
}
    39a0:	0f 91       	pop	r16
    39a2:	08 95       	ret

000039a4 <udd_ctrl_endofrequest>:
}

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    39a4:	e0 91 84 24 	lds	r30, 0x2484	; 0x802484 <udd_g_ctrlreq+0xc>
    39a8:	f0 91 85 24 	lds	r31, 0x2485	; 0x802485 <udd_g_ctrlreq+0xd>
    39ac:	30 97       	sbiw	r30, 0x00	; 0
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    39b0:	19 94       	eijmp
    39b2:	08 95       	ret

000039b4 <udd_ep_get_job>:
	}
}

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    39b4:	28 2f       	mov	r18, r24
    39b6:	2f 70       	andi	r18, 0x0F	; 15
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    39b8:	08 2e       	mov	r0, r24
    39ba:	00 0c       	add	r0, r0
    39bc:	99 0b       	sbc	r25, r25
    39be:	39 2f       	mov	r19, r25
    39c0:	33 1f       	adc	r19, r19
    39c2:	33 27       	eor	r19, r19
    39c4:	33 1f       	adc	r19, r19
	}
}

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    39c6:	83 2f       	mov	r24, r19
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	82 0f       	add	r24, r18
    39cc:	91 1d       	adc	r25, r1
    39ce:	82 0f       	add	r24, r18
    39d0:	91 1d       	adc	r25, r1
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    39d2:	02 97       	sbiw	r24, 0x02	; 2
	}
}

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    39d4:	49 e0       	ldi	r20, 0x09	; 9
    39d6:	48 9f       	mul	r20, r24
    39d8:	90 01       	movw	r18, r0
    39da:	49 9f       	mul	r20, r25
    39dc:	30 0d       	add	r19, r0
    39de:	11 24       	eor	r1, r1
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    39e0:	c9 01       	movw	r24, r18
    39e2:	8b 5d       	subi	r24, 0xDB	; 219
    39e4:	9c 4d       	sbci	r25, 0xDC	; 220
    39e6:	08 95       	ret

000039e8 <udd_ep_trans_complet>:
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
    39e8:	8f 92       	push	r8
    39ea:	9f 92       	push	r9
    39ec:	af 92       	push	r10
    39ee:	bf 92       	push	r11
    39f0:	df 92       	push	r13
    39f2:	ef 92       	push	r14
    39f4:	ff 92       	push	r15
    39f6:	0f 93       	push	r16
    39f8:	1f 93       	push	r17
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
    39fe:	d8 2e       	mov	r13, r24
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
    3a00:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <udd_ep_get_job>
    3a04:	ec 01       	movw	r28, r24
	ep_ctrl = udd_ep_get_ctrl(ep);
    3a06:	8d 2d       	mov	r24, r13
    3a08:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    3a0c:	7c 01       	movw	r14, r24
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
    3a0e:	dc 01       	movw	r26, r24
    3a10:	11 96       	adiw	r26, 0x01	; 1
    3a12:	ec 91       	ld	r30, X
    3a14:	e7 70       	andi	r30, 0x07	; 7
    3a16:	e1 50       	subi	r30, 0x01	; 1
    3a18:	e7 30       	cpi	r30, 0x07	; 7
    3a1a:	40 f4       	brcc	.+16     	; 0x3a2c <udd_ep_trans_complet+0x44>
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	ee 0f       	add	r30, r30
    3a20:	ff 1f       	adc	r31, r31
    3a22:	ec 51       	subi	r30, 0x1C	; 28
    3a24:	ff 4d       	sbci	r31, 0xDF	; 223
    3a26:	00 81       	ld	r16, Z
    3a28:	11 81       	ldd	r17, Z+1	; 0x01
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <udd_ep_trans_complet+0x48>
    3a2c:	08 e0       	ldi	r16, 0x08	; 8
    3a2e:	10 e0       	ldi	r17, 0x00	; 0
    3a30:	ed 81       	ldd	r30, Y+5	; 0x05
    3a32:	fe 81       	ldd	r31, Y+6	; 0x06
    3a34:	2b 81       	ldd	r18, Y+3	; 0x03
    3a36:	3c 81       	ldd	r19, Y+4	; 0x04
    3a38:	48 81       	ld	r20, Y
	ep_ctrl = udd_ep_get_ctrl(ep);
	ep_size = udd_ep_get_size(ep_ctrl);

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    3a3a:	d7 01       	movw	r26, r14

	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	ep_size = udd_ep_get_size(ep_ctrl);

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    3a3c:	d7 fe       	sbrs	r13, 7
    3a3e:	4a c0       	rjmp	.+148    	; 0x3ad4 <udd_ep_trans_complet+0xec>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    3a40:	16 96       	adiw	r26, 0x06	; 6
    3a42:	8d 91       	ld	r24, X+
    3a44:	9c 91       	ld	r25, X
    3a46:	17 97       	sbiw	r26, 0x07	; 7

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    3a48:	8e 0f       	add	r24, r30
    3a4a:	9f 1f       	adc	r25, r31
    3a4c:	8d 83       	std	Y+5, r24	; 0x05
    3a4e:	9e 83       	std	Y+6, r25	; 0x06

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    3a50:	82 17       	cp	r24, r18
    3a52:	93 07       	cpc	r25, r19
    3a54:	71 f1       	breq	.+92     	; 0x3ab2 <udd_ep_trans_complet+0xca>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3a56:	28 1b       	sub	r18, r24
    3a58:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3a5a:	21 15       	cp	r18, r1
    3a5c:	b4 e0       	ldi	r27, 0x04	; 4
    3a5e:	3b 07       	cpc	r19, r27
    3a60:	40 f0       	brcs	.+16     	; 0x3a72 <udd_ep_trans_complet+0x8a>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
    3a62:	2f ef       	ldi	r18, 0xFF	; 255
    3a64:	33 e0       	ldi	r19, 0x03	; 3
    3a66:	c9 01       	movw	r24, r18
    3a68:	b8 01       	movw	r22, r16
    3a6a:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodhi4>
		if (ptr_job->nb_trans != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3a6e:	28 1b       	sub	r18, r24
    3a70:	39 0b       	sbc	r19, r25
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
				&& (0==(next_trans % ep_size));
    3a72:	41 ff       	sbrs	r20, 1
    3a74:	0b c0       	rjmp	.+22     	; 0x3a8c <udd_ep_trans_complet+0xa4>
    3a76:	c9 01       	movw	r24, r18
    3a78:	b8 01       	movw	r22, r16
    3a7a:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodhi4>
    3a7e:	ac 01       	movw	r20, r24
    3a80:	91 e0       	ldi	r25, 0x01	; 1
    3a82:	45 2b       	or	r20, r21
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <udd_ep_trans_complet+0xa0>
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	89 2f       	mov	r24, r25
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <udd_ep_trans_complet+0xa6>
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    3a8e:	98 81       	ld	r25, Y
    3a90:	80 fb       	bst	r24, 0
    3a92:	91 f9       	bld	r25, 1
    3a94:	98 83       	st	Y, r25
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    3a96:	f7 01       	movw	r30, r14
    3a98:	16 82       	std	Z+6, r1	; 0x06
    3a9a:	17 82       	std	Z+7, r1	; 0x07
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    3a9c:	22 83       	std	Z+2, r18	; 0x02
    3a9e:	33 83       	std	Z+3, r19	; 0x03
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    3aa0:	29 81       	ldd	r18, Y+1	; 0x01
    3aa2:	3a 81       	ldd	r19, Y+2	; 0x02
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	82 0f       	add	r24, r18
    3aaa:	93 1f       	adc	r25, r19
    3aac:	84 83       	std	Z+4, r24	; 0x04
    3aae:	95 83       	std	Z+5, r25	; 0x05
    3ab0:	0e c0       	rjmp	.+28     	; 0x3ace <udd_ep_trans_complet+0xe6>
			udd_endpoint_clear_NACK0(ep_ctrl);
			return;
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
    3ab2:	41 ff       	sbrs	r20, 1
    3ab4:	74 c0       	rjmp	.+232    	; 0x3b9e <udd_ep_trans_complet+0x1b6>
			ptr_job->b_shortpacket = false;
    3ab6:	4d 7f       	andi	r20, 0xFD	; 253
    3ab8:	48 83       	st	Y, r20
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    3aba:	d7 01       	movw	r26, r14
    3abc:	16 96       	adiw	r26, 0x06	; 6
    3abe:	1d 92       	st	X+, r1
    3ac0:	1c 92       	st	X, r1
    3ac2:	17 97       	sbiw	r26, 0x07	; 7
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    3ac4:	12 96       	adiw	r26, 0x02	; 2
    3ac6:	1d 92       	st	X+, r1
    3ac8:	1c 92       	st	X, r1
    3aca:	13 97       	sbiw	r26, 0x03	; 3
			udd_endpoint_clear_NACK0(ep_ctrl);
    3acc:	f7 01       	movw	r30, r14
    3ace:	02 e0       	ldi	r16, 0x02	; 2
    3ad0:	06 93       	lac	Z, r16
			return;
    3ad2:	7e c0       	rjmp	.+252    	; 0x3bd0 <udd_ep_trans_complet+0x1e8>
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
    3ad4:	12 96       	adiw	r26, 0x02	; 2
    3ad6:	ad 90       	ld	r10, X+
    3ad8:	bc 90       	ld	r11, X
    3ada:	13 97       	sbiw	r26, 0x03	; 3

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    3adc:	42 ff       	sbrs	r20, 2
    3ade:	12 c0       	rjmp	.+36     	; 0x3b04 <udd_ep_trans_complet+0x11c>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    3ae0:	89 80       	ldd	r8, Y+1	; 0x01
    3ae2:	9a 80       	ldd	r9, Y+2	; 0x02
    3ae4:	c9 01       	movw	r24, r18
    3ae6:	b8 01       	movw	r22, r16
    3ae8:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodhi4>
    3aec:	b0 e4       	ldi	r27, 0x40	; 64
    3aee:	db 9e       	mul	r13, r27
    3af0:	b0 01       	movw	r22, r0
    3af2:	11 24       	eor	r1, r1
    3af4:	6b 59       	subi	r22, 0x9B	; 155
    3af6:	7e 4d       	sbci	r23, 0xDE	; 222
    3af8:	ac 01       	movw	r20, r24
    3afa:	c4 01       	movw	r24, r8
    3afc:	8e 0f       	add	r24, r30
    3afe:	9f 1f       	adc	r25, r31
    3b00:	0e 94 0c 24 	call	0x4818	; 0x4818 <memcpy>
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    3b04:	8d 81       	ldd	r24, Y+5	; 0x05
    3b06:	9e 81       	ldd	r25, Y+6	; 0x06
    3b08:	8a 0d       	add	r24, r10
    3b0a:	9b 1d       	adc	r25, r11
    3b0c:	8d 83       	std	Y+5, r24	; 0x05
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    3b10:	2b 81       	ldd	r18, Y+3	; 0x03
    3b12:	3c 81       	ldd	r19, Y+4	; 0x04
    3b14:	28 17       	cp	r18, r24
    3b16:	39 07       	cpc	r19, r25
    3b18:	10 f4       	brcc	.+4      	; 0x3b1e <udd_ep_trans_complet+0x136>
			ptr_job->nb_trans = ptr_job->buf_size;
    3b1a:	2d 83       	std	Y+5, r18	; 0x05
    3b1c:	3e 83       	std	Y+6, r19	; 0x06
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
    3b1e:	f7 01       	movw	r30, r14
    3b20:	86 81       	ldd	r24, Z+6	; 0x06
    3b22:	97 81       	ldd	r25, Z+7	; 0x07
    3b24:	a8 16       	cp	r10, r24
    3b26:	b9 06       	cpc	r11, r25
    3b28:	d1 f5       	brne	.+116    	; 0x3b9e <udd_ep_trans_complet+0x1b6>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	82 17       	cp	r24, r18
    3b30:	93 07       	cpc	r25, r19
    3b32:	a9 f1       	breq	.+106    	; 0x3b9e <udd_ep_trans_complet+0x1b6>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3b34:	28 1b       	sub	r18, r24
    3b36:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3b38:	21 15       	cp	r18, r1
    3b3a:	f4 e0       	ldi	r31, 0x04	; 4
    3b3c:	3f 07       	cpc	r19, r31
    3b3e:	10 f0       	brcs	.+4      	; 0x3b44 <udd_ep_trans_complet+0x15c>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3b40:	2f ef       	ldi	r18, 0xFF	; 255
    3b42:	33 e0       	ldi	r19, 0x03	; 3
			} else {
				next_trans -= next_trans % ep_size;
    3b44:	c9 01       	movw	r24, r18
    3b46:	b8 01       	movw	r22, r16
    3b48:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodhi4>
    3b4c:	28 1b       	sub	r18, r24
    3b4e:	39 0b       	sbc	r19, r25
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    3b50:	d7 01       	movw	r26, r14
    3b52:	12 96       	adiw	r26, 0x02	; 2
    3b54:	1d 92       	st	X+, r1
    3b56:	1c 92       	st	X, r1
    3b58:	13 97       	sbiw	r26, 0x03	; 3
			if (next_trans < ep_size) {
    3b5a:	20 17       	cp	r18, r16
    3b5c:	31 07       	cpc	r19, r17
    3b5e:	78 f4       	brcc	.+30     	; 0x3b7e <udd_ep_trans_complet+0x196>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    3b60:	88 81       	ld	r24, Y
    3b62:	84 60       	ori	r24, 0x04	; 4
    3b64:	88 83       	st	Y, r24
				udd_endpoint_set_buf( ep_ctrl,
    3b66:	b0 e4       	ldi	r27, 0x40	; 64
    3b68:	db 9e       	mul	r13, r27
    3b6a:	c0 01       	movw	r24, r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	8b 59       	subi	r24, 0x9B	; 155
    3b70:	9e 4d       	sbci	r25, 0xDE	; 222
    3b72:	f7 01       	movw	r30, r14
    3b74:	84 83       	std	Z+4, r24	; 0x04
    3b76:	95 83       	std	Z+5, r25	; 0x05
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    3b78:	06 83       	std	Z+6, r16	; 0x06
    3b7a:	17 83       	std	Z+7, r17	; 0x07
    3b7c:	a7 cf       	rjmp	.-178    	; 0x3acc <udd_ep_trans_complet+0xe4>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    3b7e:	49 81       	ldd	r20, Y+1	; 0x01
    3b80:	5a 81       	ldd	r21, Y+2	; 0x02
    3b82:	8d 81       	ldd	r24, Y+5	; 0x05
    3b84:	9e 81       	ldd	r25, Y+6	; 0x06
    3b86:	84 0f       	add	r24, r20
    3b88:	95 1f       	adc	r25, r21
    3b8a:	d7 01       	movw	r26, r14
    3b8c:	14 96       	adiw	r26, 0x04	; 4
    3b8e:	8d 93       	st	X+, r24
    3b90:	9c 93       	st	X, r25
    3b92:	15 97       	sbiw	r26, 0x05	; 5
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    3b94:	16 96       	adiw	r26, 0x06	; 6
    3b96:	2d 93       	st	X+, r18
    3b98:	3c 93       	st	X, r19
    3b9a:	17 97       	sbiw	r26, 0x07	; 7
    3b9c:	97 cf       	rjmp	.-210    	; 0x3acc <udd_ep_trans_complet+0xe4>
			return;
		}
	}

	// Job complete then call callback
	if (ptr_job->busy) {
    3b9e:	88 81       	ld	r24, Y
    3ba0:	80 ff       	sbrs	r24, 0
    3ba2:	16 c0       	rjmp	.+44     	; 0x3bd0 <udd_ep_trans_complet+0x1e8>
		ptr_job->busy = false;
    3ba4:	8e 7f       	andi	r24, 0xFE	; 254
    3ba6:	88 83       	st	Y, r24
		if (NULL != ptr_job->call_trans) {
    3ba8:	ef 81       	ldd	r30, Y+7	; 0x07
    3baa:	f8 85       	ldd	r31, Y+8	; 0x08
    3bac:	30 97       	sbiw	r30, 0x00	; 0
    3bae:	81 f0       	breq	.+32     	; 0x3bd0 <udd_ep_trans_complet+0x1e8>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    3bb0:	6d 81       	ldd	r22, Y+5	; 0x05
    3bb2:	7e 81       	ldd	r23, Y+6	; 0x06
    3bb4:	4d 2d       	mov	r20, r13
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
}
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	1f 91       	pop	r17
    3bbe:	0f 91       	pop	r16
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	df 90       	pop	r13
    3bc6:	bf 90       	pop	r11
    3bc8:	af 90       	pop	r10
    3bca:	9f 90       	pop	r9
    3bcc:	8f 90       	pop	r8

	// Job complete then call callback
	if (ptr_job->busy) {
		ptr_job->busy = false;
		if (NULL != ptr_job->call_trans) {
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    3bce:	19 94       	eijmp
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
}
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	1f 91       	pop	r17
    3bd6:	0f 91       	pop	r16
    3bd8:	ff 90       	pop	r15
    3bda:	ef 90       	pop	r14
    3bdc:	df 90       	pop	r13
    3bde:	bf 90       	pop	r11
    3be0:	af 90       	pop	r10
    3be2:	9f 90       	pop	r9
    3be4:	8f 90       	pop	r8
    3be6:	08 95       	ret

00003be8 <udd_ctrl_in_sent>:
		udd_control_out_ack_tc();
	}
}

static void udd_ctrl_in_sent(void)
{
    3be8:	0f 93       	push	r16
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3bee:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udd_ep_control_state>
    3bf2:	83 30       	cpi	r24, 0x03	; 3
    3bf4:	39 f4       	brne	.+14     	; 0x3c04 <udd_ctrl_in_sent+0x1c>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    3bf6:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <udd_ctrl_endofrequest>
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
	udd_ctrl_payload_nb_trans += nb_remain;

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
}
    3bfa:	df 91       	pop	r29
    3bfc:	cf 91       	pop	r28
    3bfe:	0f 91       	pop	r16

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
    3c00:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <udd_ctrl_init>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3c04:	20 91 d1 23 	lds	r18, 0x23D1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    3c08:	30 91 d2 23 	lds	r19, 0x23D2	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
    3c0c:	c0 91 82 24 	lds	r28, 0x2482	; 0x802482 <udd_g_ctrlreq+0xa>
    3c10:	d0 91 83 24 	lds	r29, 0x2483	; 0x802483 <udd_g_ctrlreq+0xb>
    3c14:	c2 1b       	sub	r28, r18
    3c16:	d3 0b       	sbc	r29, r19
	if (0 == nb_remain) {
    3c18:	61 f5       	brne	.+88     	; 0x3c72 <udd_ctrl_in_sent+0x8a>
		// Update number of total data sending by previous playload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3c1a:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    3c1e:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
    3c22:	82 0f       	add	r24, r18
    3c24:	93 1f       	adc	r25, r19
    3c26:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    3c2a:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    3c2e:	20 91 7e 24 	lds	r18, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3c32:	30 91 7f 24 	lds	r19, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3c36:	28 17       	cp	r18, r24
    3c38:	39 07       	cpc	r19, r25
    3c3a:	21 f0       	breq	.+8      	; 0x3c44 <udd_ctrl_in_sent+0x5c>
				|| b_shortpacket) {
    3c3c:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <b_shortpacket.5260>
    3c40:	88 23       	and	r24, r24
    3c42:	31 f0       	breq	.+12     	; 0x3c50 <udd_ctrl_in_sent+0x68>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3c44:	84 e0       	ldi	r24, 0x04	; 4
    3c46:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    3c4a:	e4 ef       	ldi	r30, 0xF4	; 244
    3c4c:	f3 e2       	ldi	r31, 0x23	; 35
    3c4e:	36 c0       	rjmp	.+108    	; 0x3cbc <udd_ctrl_in_sent+0xd4>
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
    3c50:	e0 91 86 24 	lds	r30, 0x2486	; 0x802486 <udd_g_ctrlreq+0xe>
    3c54:	f0 91 87 24 	lds	r31, 0x2487	; 0x802487 <udd_g_ctrlreq+0xf>
    3c58:	30 97       	sbiw	r30, 0x00	; 0
    3c5a:	99 f0       	breq	.+38     	; 0x3c82 <udd_ctrl_in_sent+0x9a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    3c5c:	19 95       	eicall
    3c5e:	88 23       	and	r24, r24
    3c60:	81 f0       	breq	.+32     	; 0x3c82 <udd_ctrl_in_sent+0x9a>
			// Underrun then send zlp on IN
			// nb_remain == 0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
    3c62:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    3c66:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
			nb_remain = udd_g_ctrlreq.payload_size;
    3c6a:	c0 91 82 24 	lds	r28, 0x2482	; 0x802482 <udd_g_ctrlreq+0xa>
    3c6e:	d0 91 83 24 	lds	r29, 0x2483	; 0x802483 <udd_g_ctrlreq+0xb>
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3c72:	c0 34       	cpi	r28, 0x40	; 64
    3c74:	d1 05       	cpc	r29, r1
    3c76:	28 f0       	brcs	.+10     	; 0x3c82 <udd_ctrl_in_sent+0x9a>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    3c78:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <b_shortpacket.5260>
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    3c7c:	c0 e4       	ldi	r28, 0x40	; 64
    3c7e:	d0 e0       	ldi	r29, 0x00	; 0
    3c80:	03 c0       	rjmp	.+6      	; 0x3c88 <udd_ctrl_in_sent+0xa0>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <b_shortpacket.5260>
	}
	udd_control_in_set_bytecnt(nb_remain);
    3c88:	c0 93 fe 23 	sts	0x23FE, r28	; 0x8023fe <udd_sram+0x26>
    3c8c:	d0 93 ff 23 	sts	0x23FF, r29	; 0x8023ff <udd_sram+0x27>

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    3c90:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    3c94:	90 91 d2 23 	lds	r25, 0x23D2	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
    3c98:	20 91 80 24 	lds	r18, 0x2480	; 0x802480 <udd_g_ctrlreq+0x8>
    3c9c:	30 91 81 24 	lds	r19, 0x2481	; 0x802481 <udd_g_ctrlreq+0x9>
    3ca0:	28 0f       	add	r18, r24
    3ca2:	39 1f       	adc	r19, r25
    3ca4:	20 93 00 24 	sts	0x2400, r18	; 0x802400 <udd_sram+0x28>
    3ca8:	30 93 01 24 	sts	0x2401, r19	; 0x802401 <udd_sram+0x29>
	udd_ctrl_payload_nb_trans += nb_remain;
    3cac:	c8 0f       	add	r28, r24
    3cae:	d9 1f       	adc	r29, r25
    3cb0:	c0 93 d1 23 	sts	0x23D1, r28	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    3cb4:	d0 93 d2 23 	sts	0x23D2, r29	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    3cb8:	ec ef       	ldi	r30, 0xFC	; 252
    3cba:	f3 e2       	ldi	r31, 0x23	; 35
    3cbc:	02 e0       	ldi	r16, 0x02	; 2
    3cbe:	06 93       	lac	Z, r16
}
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	0f 91       	pop	r16
    3cc6:	08 95       	ret

00003cc8 <udd_ctrl_interrupt_tc_setup>:
	}
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
    3cc8:	0f 93       	push	r16
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	1f 92       	push	r1
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
	if (!udd_is_setup_event()) {
    3cd4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    3cd8:	80 ff       	sbrs	r24, 0
    3cda:	6d c0       	rjmp	.+218    	; 0x3db6 <udd_ctrl_interrupt_tc_setup+0xee>
		return false;
	}
	udd_ack_setup_event();
    3cdc:	21 e0       	ldi	r18, 0x01	; 1
    3cde:	20 93 cc 04 	sts	0x04CC, r18	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    3ce2:	84 ef       	ldi	r24, 0xF4	; 244
    3ce4:	93 e2       	ldi	r25, 0x23	; 35
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	00 e8       	ldi	r16, 0x80	; 128
    3cea:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    3cec:	ec ef       	ldi	r30, 0xFC	; 252
    3cee:	f3 e2       	ldi	r31, 0x23	; 35
    3cf0:	00 e8       	ldi	r16, 0x80	; 128
    3cf2:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    3cf4:	20 93 ca 04 	sts	0x04CA, r18	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>

	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	00 e1       	ldi	r16, 0x10	; 16
    3cfc:	06 93       	lac	Z, r16
	udd_ep_control_state = UDD_EPCTRL_SETUP;
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3cfe:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udd_ep_control_state>
    3d02:	88 23       	and	r24, r24
    3d04:	39 f0       	breq	.+14     	; 0x3d14 <udd_ctrl_interrupt_tc_setup+0x4c>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
    3d06:	83 50       	subi	r24, 0x03	; 3
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    3d08:	82 30       	cpi	r24, 0x02	; 2
    3d0a:	10 f4       	brcc	.+4      	; 0x3d10 <udd_ctrl_interrupt_tc_setup+0x48>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// Accept that ZLP event can be hidden by setup packet event
			// in case of setup packet sending quickly after a ZLP
			udd_ctrl_endofrequest();
    3d0c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <udd_ctrl_endofrequest>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    3d10:	0e 94 91 1c 	call	0x3922	; 0x3922 <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    3d14:	80 91 f6 23 	lds	r24, 0x23F6	; 0x8023f6 <udd_sram+0x1e>
    3d18:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <udd_sram+0x1f>
    3d1c:	08 97       	sbiw	r24, 0x08	; 8
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <udd_ctrl_interrupt_tc_setup+0x5a>
    3d20:	4c c0       	rjmp	.+152    	; 0x3dba <udd_ctrl_interrupt_tc_setup+0xf2>
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    3d22:	88 e0       	ldi	r24, 0x08	; 8
    3d24:	e1 e9       	ldi	r30, 0x91	; 145
    3d26:	f3 e2       	ldi	r31, 0x23	; 35
    3d28:	a8 e7       	ldi	r26, 0x78	; 120
    3d2a:	b4 e2       	ldi	r27, 0x24	; 36
    3d2c:	01 90       	ld	r0, Z+
    3d2e:	0d 92       	st	X+, r0
    3d30:	8a 95       	dec	r24
    3d32:	e1 f7       	brne	.-8      	; 0x3d2c <udd_ctrl_interrupt_tc_setup+0x64>

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    3d34:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    3d38:	80 62       	ori	r24, 0x20	; 32
    3d3a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
	udd_enable_underflow_interrupt();
    3d3e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    3d42:	80 62       	ori	r24, 0x20	; 32
    3d44:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>

	// Decode setup request
	if (udc_process_setup() == false) {
    3d48:	0e 94 b8 19 	call	0x3370	; 0x3370 <udc_process_setup>
    3d4c:	81 11       	cpse	r24, r1
    3d4e:	03 c0       	rjmp	.+6      	; 0x3d56 <udd_ctrl_interrupt_tc_setup+0x8e>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    3d50:	0e 94 b6 1c 	call	0x396c	; 0x396c <udd_ctrl_stall_data>
    3d54:	32 c0       	rjmp	.+100    	; 0x3dba <udd_ctrl_interrupt_tc_setup+0xf2>
		return;
	}

	if (Udd_setup_is_in()) {
    3d56:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <udd_g_ctrlreq>
    3d5a:	97 ff       	sbrs	r25, 7
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <udd_ctrl_interrupt_tc_setup+0xb4>
		udd_ctrl_prev_payload_nb_trans = 0;
    3d5e:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    3d62:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    3d66:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    3d6a:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3d6e:	92 e0       	ldi	r25, 0x02	; 2
    3d70:	90 93 d5 23 	sts	0x23D5, r25	; 0x8023d5 <udd_ep_control_state>
		udd_ctrl_in_sent(); // Send first data transfer
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <udd_ctrl_in_sent>
    3d7a:	09 c0       	rjmp	.+18     	; 0x3d8e <udd_ctrl_interrupt_tc_setup+0xc6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    3d7c:	20 91 7e 24 	lds	r18, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    3d80:	30 91 7f 24 	lds	r19, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    3d84:	23 2b       	or	r18, r19
    3d86:	29 f4       	brne	.+10     	; 0x3d92 <udd_ctrl_interrupt_tc_setup+0xca>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <udd_ctrl_send_zlp_in>
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	15 c0       	rjmp	.+42     	; 0x3dbc <udd_ctrl_interrupt_tc_setup+0xf4>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    3d92:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    3d96:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    3d9a:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    3d9e:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3da2:	91 e0       	ldi	r25, 0x01	; 1
    3da4:	90 93 d5 23 	sts	0x23D5, r25	; 0x8023d5 <udd_ep_control_state>
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    3da8:	e4 ef       	ldi	r30, 0xF4	; 244
    3daa:	f3 e2       	ldi	r31, 0x23	; 35
    3dac:	02 e0       	ldi	r16, 0x02	; 2
    3dae:	06 93       	lac	Z, r16
		udd_control_out_ack_tc();
    3db0:	00 e2       	ldi	r16, 0x20	; 32
    3db2:	06 93       	lac	Z, r16
    3db4:	03 c0       	rjmp	.+6      	; 0x3dbc <udd_ctrl_interrupt_tc_setup+0xf4>
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
		return false;
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <udd_ctrl_interrupt_tc_setup+0xf4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    3dba:	81 e0       	ldi	r24, 0x01	; 1

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
}
    3dbc:	0f 90       	pop	r0
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	0f 91       	pop	r16
    3dc4:	08 95       	ret

00003dc6 <udd_disable>:
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
    3dc6:	cf 93       	push	r28
	irqflags_t flags;
	flags = cpu_irq_save();
    3dc8:	0e 94 32 1c 	call	0x3864	; 0x3864 <cpu_irq_save>
    3dcc:	c8 2f       	mov	r28, r24
	udd_detach_device();
    3dce:	e1 ec       	ldi	r30, 0xC1	; 193
    3dd0:	f4 e0       	ldi	r31, 0x04	; 4
    3dd2:	90 81       	ld	r25, Z
    3dd4:	9e 7f       	andi	r25, 0xFE	; 254
    3dd6:	90 83       	st	Z, r25
	// Disable interface
	USB_CTRLA = 0;
    3dd8:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	USB_CTRLB = 0;
    3ddc:	10 82       	st	Z, r1
	sysclk_disable_usb();
    3dde:	0e 94 3b 0b 	call	0x1676	; 0x1676 <sysclk_disable_usb>
	udd_sleep_mode(false);
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	0e 94 65 1c 	call	0x38ca	; 0x38ca <udd_sleep_mode>
#ifndef UDD_NO_SLEEP_MGR
	sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
    3de8:	85 e0       	ldi	r24, 0x05	; 5
    3dea:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <sleepmgr_unlock_mode>
    3dee:	cf bf       	out	0x3f, r28	; 63
#endif
	cpu_irq_restore(flags);
}
    3df0:	cf 91       	pop	r28
    3df2:	08 95       	ret

00003df4 <udd_include_vbus_monitoring>:

bool udd_include_vbus_monitoring(void)
{
	return false; // No Vbus monitoring
}
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	08 95       	ret

00003df8 <udd_attach>:

void udd_attach(void)
{
    3df8:	cf 93       	push	r28
	irqflags_t flags;
	flags = cpu_irq_save();
    3dfa:	0e 94 32 1c 	call	0x3864	; 0x3864 <cpu_irq_save>
    3dfe:	c8 2f       	mov	r28, r24

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	0e 94 65 1c 	call	0x38ca	; 0x38ca <udd_sleep_mode>

	udd_ack_suspend_event();
    3e06:	ea ec       	ldi	r30, 0xCA	; 202
    3e08:	f4 e0       	ldi	r31, 0x04	; 4
    3e0a:	80 e4       	ldi	r24, 0x40	; 64
    3e0c:	80 83       	st	Z, r24
	udd_ack_resume_event();
    3e0e:	80 e2       	ldi	r24, 0x20	; 32
    3e10:	80 83       	st	Z, r24
	udd_attach_device();
    3e12:	e1 ec       	ldi	r30, 0xC1	; 193
    3e14:	f4 e0       	ldi	r31, 0x04	; 4
    3e16:	90 81       	ld	r25, Z
    3e18:	91 60       	ori	r25, 0x01	; 1
    3e1a:	90 83       	st	Z, r25
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    3e1c:	a9 ec       	ldi	r26, 0xC9	; 201
    3e1e:	b4 e0       	ldi	r27, 0x04	; 4
    3e20:	9c 91       	ld	r25, X
    3e22:	92 60       	ori	r25, 0x02	; 2
    3e24:	9c 93       	st	X, r25
	udd_enable_busevt_interrupt();
    3e26:	e8 ec       	ldi	r30, 0xC8	; 200
    3e28:	f4 e0       	ldi	r31, 0x04	; 4
    3e2a:	90 81       	ld	r25, Z
    3e2c:	90 64       	ori	r25, 0x40	; 64
    3e2e:	90 83       	st	Z, r25
	udd_enable_setup_interrupt();
    3e30:	9c 91       	ld	r25, X
    3e32:	91 60       	ori	r25, 0x01	; 1
    3e34:	9c 93       	st	X, r25
	udd_enable_start_of_frame_interrupt();
    3e36:	90 81       	ld	r25, Z
    3e38:	90 68       	ori	r25, 0x80	; 128
    3e3a:	90 83       	st	Z, r25
    3e3c:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
}
    3e3e:	cf 91       	pop	r28
    3e40:	08 95       	ret

00003e42 <udd_enable>:
#endif // (0!=USB_DEVICE_MAX_EP)
//@}


void udd_enable(void)
{
    3e42:	cf 93       	push	r28
# if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// RC oscillator calibration via USB Start Of Frame is not available
	// in low speed mode.
	// Thus, the calibration is disabled
	// when USB interface start in low speed mode
	DFLLRC32M.CTRL = 0;
    3e44:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	// The USB hardware need of 6MHz in low speed mode
	sysclk_enable_usb(6);
	udd_set_low_speed();
#else
	// The USB hardware need of 48MHz in full speed mode
	sysclk_enable_usb(48);
    3e48:	80 e3       	ldi	r24, 0x30	; 48
    3e4a:	0e 94 18 0b 	call	0x1630	; 0x1630 <sysclk_enable_usb>
	udd_set_full_speed();
    3e4e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    3e52:	80 64       	ori	r24, 0x40	; 64
    3e54:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
// The XMEGA_A1U does not support the RC calibration through Keepalive (Low speed).
#if (!defined USB_DEVICE_LOW_SPEED) || (!XMEGA_A1U)
# ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
#   if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// The SOF calibration can be enabled
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
#   endif
# endif
#endif

	flags = cpu_irq_save();
    3e5e:	0e 94 32 1c 	call	0x3864	; 0x3864 <cpu_irq_save>
    3e62:	c8 2f       	mov	r28, r24
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
    3e68:	f9 01       	movw	r30, r18
    3e6a:	83 e0       	ldi	r24, 0x03	; 3
    3e6c:	ee 0f       	add	r30, r30
    3e6e:	ff 1f       	adc	r31, r31
    3e70:	8a 95       	dec	r24
    3e72:	e1 f7       	brne	.-8      	; 0x3e6c <udd_enable+0x2a>
    3e74:	e8 52       	subi	r30, 0x28	; 40
    3e76:	fc 4d       	sbci	r31, 0xDC	; 220
    3e78:	15 8e       	std	Z+29, r1	; 0x1d
    3e7a:	2f 5f       	subi	r18, 0xFF	; 255
    3e7c:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

	flags = cpu_irq_save();

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
    3e7e:	2e 30       	cpi	r18, 0x0E	; 14
    3e80:	31 05       	cpc	r19, r1
    3e82:	91 f7       	brne	.-28     	; 0x3e68 <udd_enable+0x26>
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
		udd_sram.ep_ctrl[i].CTRL = 0;
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
		udd_ep_job[i].busy = false;
    3e88:	99 e0       	ldi	r25, 0x09	; 9
    3e8a:	92 9f       	mul	r25, r18
    3e8c:	f0 01       	movw	r30, r0
    3e8e:	93 9f       	mul	r25, r19
    3e90:	f0 0d       	add	r31, r0
    3e92:	11 24       	eor	r1, r1
    3e94:	eb 5d       	subi	r30, 0xDB	; 219
    3e96:	fc 4d       	sbci	r31, 0xDC	; 220
    3e98:	80 81       	ld	r24, Z
    3e9a:	8e 7f       	andi	r24, 0xFE	; 254
    3e9c:	80 83       	st	Z, r24
    3e9e:	2f 5f       	subi	r18, 0xFF	; 255
    3ea0:	3f 4f       	sbci	r19, 0xFF	; 255
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
    3ea2:	2c 30       	cpi	r18, 0x0C	; 12
    3ea4:	31 05       	cpc	r19, r1
    3ea6:	89 f7       	brne	.-30     	; 0x3e8a <udd_enable+0x48>
    3ea8:	6a e1       	ldi	r22, 0x1A	; 26
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	82 e0       	ldi	r24, 0x02	; 2
    3eae:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
#ifdef USB_PAD_USER_CAL0
	USB_CAL0 = USB_PAD_USER_CAL0;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL0));
	if (cal != 0xFF) {
    3eb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <udd_enable+0x76>
		USB_CAL0 = cal;
	} else {
		USB_CAL0 = 0x1F;
    3eb6:	8f e1       	ldi	r24, 0x1F	; 31
    3eb8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    3ebc:	6b e1       	ldi	r22, 0x1B	; 27
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	82 e0       	ldi	r24, 0x02	; 2
    3ec2:	0e 94 c6 23 	call	0x478c	; 0x478c <nvm_read_byte>
#ifdef USB_PAD_USER_CAL1
	USB_CAL1 = USB_PAD_USER_CAL1;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL1));
	if (cal != 0xFF) {
    3ec6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ec8:	09 f4       	brne	.+2      	; 0x3ecc <udd_enable+0x8a>
		USB_CAL1 = cal;
	} else {
		USB_CAL1 = 0x1F;
    3eca:	8f e1       	ldi	r24, 0x1F	; 31
    3ecc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
	}
#endif

	//** Enable USB hardware
	usb_pad_init();
	udd_set_nb_max_ep(USB_DEVICE_MAX_EP);
    3ed0:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    3ed4:	96 60       	ori	r25, 0x06	; 6
    3ed6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	udd_enable_interface();
    3eda:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    3ede:	90 68       	ori	r25, 0x80	; 128
    3ee0:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	udd_enable_store_frame_number();
    3ee4:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    3ee8:	90 61       	ori	r25, 0x10	; 16
    3eea:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
#if XMEGA_A1U
	Assert(((uint16_t)(&udd_sram) & 0x0F) == 0); /* check align on 16bit */
#else
	Assert(((uint16_t)(&udd_sram) & 0x01) == 0); /* check align on WORD */
#endif
	udd_set_ep_table_addr(udd_sram.ep_ctrl);
    3eee:	84 ef       	ldi	r24, 0xF4	; 244
    3ef0:	93 e2       	ldi	r25, 0x23	; 35
    3ef2:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
    3ef6:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
	// Enable TC fifo management
	udd_enable_fifo();
    3efa:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
    3efe:	90 62       	ori	r25, 0x20	; 32
    3f00:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	udd_reset_fifo();
    3f04:	8f ef       	ldi	r24, 0xFF	; 255
    3f06:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    3f0a:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    3f0e:	91 60       	ori	r25, 0x01	; 1
    3f10:	90 93 c8 04 	sts	0x04C8, r25	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
    3f14:	10 92 66 24 	sts	0x2466, r1	; 0x802466 <udd_b_idle>
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
    3f18:	85 e0       	ldi	r24, 0x05	; 5
    3f1a:	0e 94 3f 1c 	call	0x387e	; 0x387e <sleepmgr_lock_mode>
#endif

#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    3f1e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <udd_attach>
    3f22:	cf bf       	out	0x3f, r28	; 63
#endif
	cpu_irq_restore(flags);
}
    3f24:	cf 91       	pop	r28
    3f26:	08 95       	ret

00003f28 <udd_detach>:
}

void udd_detach(void)
{
	// Detach device from the bus
	udd_detach_device();
    3f28:	e1 ec       	ldi	r30, 0xC1	; 193
    3f2a:	f4 e0       	ldi	r31, 0x04	; 4
    3f2c:	80 81       	ld	r24, Z
    3f2e:	8e 7f       	andi	r24, 0xFE	; 254
    3f30:	80 83       	st	Z, r24
    3f32:	08 95       	ret

00003f34 <udd_is_high_speed>:
}

bool udd_is_high_speed(void)
{
	return false;
}
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	08 95       	ret

00003f38 <udd_set_address>:

void udd_set_address(uint8_t address)
{
	udd_set_device_address(address);
    3f38:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    3f3c:	08 95       	ret

00003f3e <udd_getaddress>:
}

uint8_t udd_getaddress(void)
{
	return udd_get_device_address();
    3f3e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
}
    3f42:	08 95       	ret

00003f44 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
	return udd_sram.frame_number;
    3f44:	80 91 64 24 	lds	r24, 0x2464	; 0x802464 <udd_sram+0x8c>
    3f48:	90 91 65 24 	lds	r25, 0x2465	; 0x802465 <udd_sram+0x8d>
}
    3f4c:	08 95       	ret

00003f4e <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	08 95       	ret

00003f54 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
    3f54:	80 91 66 24 	lds	r24, 0x2466	; 0x802466 <udd_b_idle>
    3f58:	81 11       	cpse	r24, r1
    3f5a:	0d c0       	rjmp	.+26     	; 0x3f76 <udd_send_remotewakeup+0x22>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <udd_sleep_mode>
		udd_send_remote_wake_up();
    3f62:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <__TEXT_REGION_LENGTH__+0x7004c1>
    3f66:	8b 7f       	andi	r24, 0xFB	; 251
    3f68:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <__TEXT_REGION_LENGTH__+0x7004c1>
    3f6c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <__TEXT_REGION_LENGTH__+0x7004c1>
    3f70:	84 60       	ori	r24, 0x04	; 4
    3f72:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <__TEXT_REGION_LENGTH__+0x7004c1>
    3f76:	08 95       	ret

00003f78 <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    3f78:	e8 e7       	ldi	r30, 0x78	; 120
    3f7a:	f4 e2       	ldi	r31, 0x24	; 36
    3f7c:	80 87       	std	Z+8, r24	; 0x08
    3f7e:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    3f80:	62 87       	std	Z+10, r22	; 0x0a
    3f82:	73 87       	std	Z+11, r23	; 0x0b
    3f84:	08 95       	ret

00003f86 <udd_ep_alloc>:
}

#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
    3f86:	0f 93       	push	r16
    3f88:	1f 93       	push	r17
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	1f 92       	push	r1
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	8a 01       	movw	r16, r20
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    3f96:	69 83       	std	Y+1, r22	; 0x01
    3f98:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    3f9c:	fc 01       	movw	r30, r24
	if (udd_endpoint_is_enable(ep_ctrl)) {
    3f9e:	81 81       	ldd	r24, Z+1	; 0x01
    3fa0:	80 7c       	andi	r24, 0xC0	; 192
    3fa2:	69 81       	ldd	r22, Y+1	; 0x01
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	41 c0       	rjmp	.+130    	; 0x402a <udd_ep_alloc+0xa4>
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
    3fa8:	63 70       	andi	r22, 0x03	; 3
    3faa:	61 30       	cpi	r22, 0x01	; 1
    3fac:	19 f0       	breq	.+6      	; 0x3fb4 <udd_ep_alloc+0x2e>
    3fae:	20 f0       	brcs	.+8      	; 0x3fb8 <udd_ep_alloc+0x32>
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
		break;
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
    3fb0:	90 e8       	ldi	r25, 0x80	; 128
    3fb2:	03 c0       	rjmp	.+6      	; 0x3fba <udd_ep_alloc+0x34>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
    3fb4:	90 ec       	ldi	r25, 0xC0	; 192
    3fb6:	01 c0       	rjmp	.+2      	; 0x3fba <udd_ep_alloc+0x34>

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
    3fb8:	90 e4       	ldi	r25, 0x40	; 64
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    3fba:	00 38       	cpi	r16, 0x80	; 128
    3fbc:	11 05       	cpc	r17, r1
    3fbe:	e9 f0       	breq	.+58     	; 0x3ffa <udd_ep_alloc+0x74>
    3fc0:	58 f4       	brcc	.+22     	; 0x3fd8 <udd_ep_alloc+0x52>
    3fc2:	00 32       	cpi	r16, 0x20	; 32
    3fc4:	11 05       	cpc	r17, r1
    3fc6:	a9 f0       	breq	.+42     	; 0x3ff2 <udd_ep_alloc+0x6c>
    3fc8:	00 34       	cpi	r16, 0x40	; 64
    3fca:	11 05       	cpc	r17, r1
    3fcc:	a1 f0       	breq	.+40     	; 0x3ff6 <udd_ep_alloc+0x70>
    3fce:	00 31       	cpi	r16, 0x10	; 16
    3fd0:	11 05       	cpc	r17, r1
    3fd2:	c9 f4       	brne	.+50     	; 0x4006 <udd_ep_alloc+0x80>
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	18 c0       	rjmp	.+48     	; 0x4008 <udd_ep_alloc+0x82>
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    3fd8:	01 15       	cp	r16, r1
    3fda:	82 e0       	ldi	r24, 0x02	; 2
    3fdc:	18 07       	cpc	r17, r24
    3fde:	79 f0       	breq	.+30     	; 0x3ffe <udd_ep_alloc+0x78>
    3fe0:	0f 3f       	cpi	r16, 0xFF	; 255
    3fe2:	83 e0       	ldi	r24, 0x03	; 3
    3fe4:	18 07       	cpc	r17, r24
    3fe6:	69 f0       	breq	.+26     	; 0x4002 <udd_ep_alloc+0x7c>
    3fe8:	01 15       	cp	r16, r1
    3fea:	11 40       	sbci	r17, 0x01	; 1
    3fec:	61 f4       	brne	.+24     	; 0x4006 <udd_ep_alloc+0x80>
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    3fee:	85 e0       	ldi	r24, 0x05	; 5
    3ff0:	0b c0       	rjmp	.+22     	; 0x4008 <udd_ep_alloc+0x82>
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	09 c0       	rjmp	.+18     	; 0x4008 <udd_ep_alloc+0x82>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    3ff6:	83 e0       	ldi	r24, 0x03	; 3
    3ff8:	07 c0       	rjmp	.+14     	; 0x4008 <udd_ep_alloc+0x82>
		break;
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
    3ffa:	84 e0       	ldi	r24, 0x04	; 4
    3ffc:	05 c0       	rjmp	.+10     	; 0x4008 <udd_ep_alloc+0x82>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    3ffe:	86 e0       	ldi	r24, 0x06	; 6
    4000:	03 c0       	rjmp	.+6      	; 0x4008 <udd_ep_alloc+0x82>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    4002:	87 e0       	ldi	r24, 0x07	; 7
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <udd_ep_alloc+0x82>
	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
    4006:	80 e0       	ldi	r24, 0x00	; 0
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4008:	11 82       	std	Z+1, r1	; 0x01
	udd_endpoint_clear_status(ep_ctrl);
    400a:	26 e0       	ldi	r18, 0x06	; 6
    400c:	20 83       	st	Z, r18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    400e:	89 2b       	or	r24, r25
    4010:	81 83       	std	Z+1, r24	; 0x01
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
    4012:	81 81       	ldd	r24, Z+1	; 0x01
    4014:	80 7c       	andi	r24, 0xC0	; 192
    4016:	80 3c       	cpi	r24, 0xC0	; 192
    4018:	21 f4       	brne	.+8      	; 0x4022 <udd_ep_alloc+0x9c>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    401a:	81 81       	ldd	r24, Z+1	; 0x01
    401c:	87 70       	andi	r24, 0x07	; 7
    401e:	87 30       	cpi	r24, 0x07	; 7
    4020:	31 f0       	breq	.+12     	; 0x402e <udd_ep_alloc+0xa8>
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
    4022:	81 81       	ldd	r24, Z+1	; 0x01
    4024:	80 62       	ori	r24, 0x20	; 32
    4026:	81 83       	std	Z+1, r24	; 0x01
    4028:	02 c0       	rjmp	.+4      	; 0x402e <udd_ep_alloc+0xa8>
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	01 c0       	rjmp	.+2      	; 0x4030 <udd_ep_alloc+0xaa>

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
    402e:	81 e0       	ldi	r24, 0x01	; 1
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
    4030:	0f 90       	pop	r0
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	08 95       	ret

0000403c <udd_ep_is_halted>:
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    403c:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
	return (udd_endpoint_is_stall(ep_ctrl));
    4040:	fc 01       	movw	r30, r24
    4042:	81 81       	ldd	r24, Z+1	; 0x01
}
    4044:	82 fb       	bst	r24, 2
    4046:	88 27       	eor	r24, r24
    4048:	80 f9       	bld	r24, 0
    404a:	08 95       	ret

0000404c <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    404c:	0f 93       	push	r16
    404e:	cf 93       	push	r28
    4050:	c8 2f       	mov	r28, r24
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    4052:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    4056:	fc 01       	movw	r30, r24
	udd_endpoint_clear_dtgl(ep_ctrl);
    4058:	01 e0       	ldi	r16, 0x01	; 1
    405a:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    405c:	81 81       	ldd	r24, Z+1	; 0x01
    405e:	82 ff       	sbrs	r24, 2
    4060:	10 c0       	rjmp	.+32     	; 0x4082 <udd_ep_clear_halt+0x36>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	9b 7f       	andi	r25, 0xFB	; 251
    4066:	91 83       	std	Z+1, r25	; 0x01

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
    4068:	8c 2f       	mov	r24, r28
    406a:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <udd_ep_get_job>
    406e:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    4070:	90 81       	ld	r25, Z
    4072:	90 ff       	sbrs	r25, 0
    4074:	06 c0       	rjmp	.+12     	; 0x4082 <udd_ep_clear_halt+0x36>
		ptr_job->busy = false;
    4076:	9e 7f       	andi	r25, 0xFE	; 254
    4078:	90 83       	st	Z, r25
		ptr_job->call_nohalt();
    407a:	07 80       	ldd	r0, Z+7	; 0x07
    407c:	f0 85       	ldd	r31, Z+8	; 0x08
    407e:	e0 2d       	mov	r30, r0
    4080:	19 95       	eicall
	}
	return true;
}
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	cf 91       	pop	r28
    4086:	0f 91       	pop	r16
    4088:	08 95       	ret

0000408a <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
    408a:	8f 92       	push	r8
    408c:	9f 92       	push	r9
    408e:	af 92       	push	r10
    4090:	bf 92       	push	r11
    4092:	cf 92       	push	r12
    4094:	df 92       	push	r13
    4096:	ef 92       	push	r14
    4098:	ff 92       	push	r15
    409a:	0f 93       	push	r16
    409c:	1f 93       	push	r17
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	b8 2e       	mov	r11, r24
    40a4:	a6 2e       	mov	r10, r22
    40a6:	4a 01       	movw	r8, r20
    40a8:	79 01       	movw	r14, r18
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
    40aa:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <udd_ep_get_job>
    40ae:	ec 01       	movw	r28, r24
	ep_ctrl = udd_ep_get_ctrl(ep);
    40b0:	8b 2d       	mov	r24, r11
    40b2:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    40b6:	6c 01       	movw	r12, r24

	if (!udd_endpoint_is_enable(ep_ctrl)) {
    40b8:	dc 01       	movw	r26, r24
    40ba:	11 96       	adiw	r26, 0x01	; 1
    40bc:	8c 91       	ld	r24, X
    40be:	11 97       	sbiw	r26, 0x01	; 1
    40c0:	80 7c       	andi	r24, 0xC0	; 192
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <udd_ep_run+0x3c>
    40c4:	56 c0       	rjmp	.+172    	; 0x4172 <udd_ep_run+0xe8>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    40c6:	11 96       	adiw	r26, 0x01	; 1
    40c8:	8c 91       	ld	r24, X
    40ca:	11 97       	sbiw	r26, 0x01	; 1
    40cc:	80 7c       	andi	r24, 0xC0	; 192
    40ce:	80 3c       	cpi	r24, 0xC0	; 192
    40d0:	21 f0       	breq	.+8      	; 0x40da <udd_ep_run+0x50>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    40d2:	11 96       	adiw	r26, 0x01	; 1
    40d4:	8c 91       	ld	r24, X
    40d6:	82 fd       	sbrc	r24, 2
    40d8:	4c c0       	rjmp	.+152    	; 0x4172 <udd_ep_run+0xe8>
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
    40da:	0e 94 32 1c 	call	0x3864	; 0x3864 <cpu_irq_save>
	if (ptr_job->busy == true) {
    40de:	98 81       	ld	r25, Y
    40e0:	90 ff       	sbrs	r25, 0
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <udd_ep_run+0x5e>
    40e4:	8f bf       	out	0x3f, r24	; 63
    40e6:	45 c0       	rjmp	.+138    	; 0x4172 <udd_ep_run+0xe8>
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
    40e8:	91 60       	ori	r25, 0x01	; 1
    40ea:	98 83       	st	Y, r25
    40ec:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
    40ee:	89 82       	std	Y+1, r8	; 0x01
    40f0:	9a 82       	std	Y+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    40f2:	eb 82       	std	Y+3, r14	; 0x03
    40f4:	fc 82       	std	Y+4, r15	; 0x04
	ptr_job->nb_trans = 0;
    40f6:	1d 82       	std	Y+5, r1	; 0x05
    40f8:	1e 82       	std	Y+6, r1	; 0x06
	ptr_job->call_trans = callback;
    40fa:	0f 83       	std	Y+7, r16	; 0x07
    40fc:	18 87       	std	Y+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	a1 10       	cpse	r10, r1
    4102:	04 c0       	rjmp	.+8      	; 0x410c <udd_ep_run+0x82>
    4104:	e1 14       	cp	r14, r1
    4106:	f1 04       	cpc	r15, r1
    4108:	09 f0       	breq	.+2      	; 0x410c <udd_ep_run+0x82>
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	88 81       	ld	r24, Y
    410e:	90 fb       	bst	r25, 0
    4110:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    4112:	8b 7f       	andi	r24, 0xFB	; 251
    4114:	88 83       	st	Y, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    4116:	b7 fe       	sbrs	r11, 7
    4118:	02 c0       	rjmp	.+4      	; 0x411e <udd_ep_run+0x94>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    411a:	f6 01       	movw	r30, r12
    411c:	23 c0       	rjmp	.+70     	; 0x4164 <udd_ep_run+0xda>
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
    411e:	d6 01       	movw	r26, r12
    4120:	11 96       	adiw	r26, 0x01	; 1
    4122:	8c 91       	ld	r24, X
    4124:	11 97       	sbiw	r26, 0x01	; 1
    4126:	80 7c       	andi	r24, 0xC0	; 192
    4128:	80 3c       	cpi	r24, 0xC0	; 192
    412a:	c9 f4       	brne	.+50     	; 0x415e <udd_ep_run+0xd4>
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
    412c:	11 96       	adiw	r26, 0x01	; 1
    412e:	ec 91       	ld	r30, X
    4130:	e7 70       	andi	r30, 0x07	; 7
    4132:	e1 50       	subi	r30, 0x01	; 1
    4134:	e7 30       	cpi	r30, 0x07	; 7
    4136:	40 f4       	brcc	.+16     	; 0x4148 <udd_ep_run+0xbe>
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	ec 51       	subi	r30, 0x1C	; 28
    4140:	ff 4d       	sbci	r31, 0xDF	; 223
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	02 c0       	rjmp	.+4      	; 0x414c <udd_ep_run+0xc2>
    4148:	68 e0       	ldi	r22, 0x08	; 8
    414a:	70 e0       	ldi	r23, 0x00	; 0
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
    414c:	c7 01       	movw	r24, r14
    414e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__udivmodhi4>
    4152:	89 2b       	or	r24, r25
    4154:	21 f0       	breq	.+8      	; 0x415e <udd_ep_run+0xd4>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    4156:	88 81       	ld	r24, Y
    4158:	8e 7f       	andi	r24, 0xFE	; 254
    415a:	88 83       	st	Y, r24
    415c:	0a c0       	rjmp	.+20     	; 0x4172 <udd_ep_run+0xe8>
			return false;
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    415e:	f6 01       	movw	r30, r12
    4160:	12 82       	std	Z+2, r1	; 0x02
    4162:	13 82       	std	Z+3, r1	; 0x03
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    4164:	16 82       	std	Z+6, r1	; 0x06
    4166:	17 82       	std	Z+7, r1	; 0x07
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    4168:	8b 2d       	mov	r24, r11
    416a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <udd_ep_trans_complet>
	return true;
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <udd_ep_run+0xea>
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
    4172:	80 e0       	ldi	r24, 0x00	; 0
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	df 90       	pop	r13
    4182:	cf 90       	pop	r12
    4184:	bf 90       	pop	r11
    4186:	af 90       	pop	r10
    4188:	9f 90       	pop	r9
    418a:	8f 90       	pop	r8
    418c:	08 95       	ret

0000418e <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    418e:	ef 92       	push	r14
    4190:	ff 92       	push	r15
    4192:	0f 93       	push	r16
    4194:	cf 93       	push	r28
    4196:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    4198:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    419c:	7c 01       	movw	r14, r24
	ptr_job = udd_ep_get_job(ep);
    419e:	8c 2f       	mov	r24, r28
    41a0:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <udd_ep_get_job>
    41a4:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    41a6:	f7 01       	movw	r30, r14
    41a8:	02 e0       	ldi	r16, 0x02	; 2
    41aa:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    41ac:	9c 91       	ld	r25, X
    41ae:	90 ff       	sbrs	r25, 0
    41b0:	1b c0       	rjmp	.+54     	; 0x41e8 <udd_ep_abort+0x5a>
		return; // No job on going
	}
	ptr_job->busy = false;
    41b2:	9e 7f       	andi	r25, 0xFE	; 254
    41b4:	9c 93       	st	X, r25
	if (NULL != ptr_job->call_trans) {
    41b6:	17 96       	adiw	r26, 0x07	; 7
    41b8:	ed 91       	ld	r30, X+
    41ba:	fc 91       	ld	r31, X
    41bc:	18 97       	sbiw	r26, 0x08	; 8
    41be:	30 97       	sbiw	r30, 0x00	; 0
    41c0:	99 f0       	breq	.+38     	; 0x41e8 <udd_ep_abort+0x5a>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    41c2:	d7 01       	movw	r26, r14
    41c4:	c7 ff       	sbrs	r28, 7
    41c6:	05 c0       	rjmp	.+10     	; 0x41d2 <udd_ep_abort+0x44>
    41c8:	16 96       	adiw	r26, 0x06	; 6
    41ca:	6d 91       	ld	r22, X+
    41cc:	7c 91       	ld	r23, X
    41ce:	17 97       	sbiw	r26, 0x07	; 7
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <udd_ep_abort+0x4c>
    41d2:	12 96       	adiw	r26, 0x02	; 2
    41d4:	6d 91       	ld	r22, X+
    41d6:	7c 91       	ld	r23, X
    41d8:	13 97       	sbiw	r26, 0x03	; 3
    41da:	4c 2f       	mov	r20, r28
    41dc:	81 e0       	ldi	r24, 0x01	; 1
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
    41de:	cf 91       	pop	r28
    41e0:	0f 91       	pop	r16
    41e2:	ff 90       	pop	r15
    41e4:	ef 90       	pop	r14
	if (ptr_job->busy == false) {
		return; // No job on going
	}
	ptr_job->busy = false;
	if (NULL != ptr_job->call_trans) {
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    41e6:	19 94       	eijmp
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
    41e8:	cf 91       	pop	r28
    41ea:	0f 91       	pop	r16
    41ec:	ff 90       	pop	r15
    41ee:	ef 90       	pop	r14
    41f0:	08 95       	ret

000041f2 <udd_ep_free>:
	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}

void udd_ep_free(udd_ep_id_t ep)
{
    41f2:	cf 93       	push	r28
    41f4:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
    41f6:	0e 94 c7 20 	call	0x418e	; 0x418e <udd_ep_abort>
	ep_ctrl = udd_ep_get_ctrl(ep);
    41fa:	8c 2f       	mov	r24, r28
    41fc:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
	udd_endpoint_disable(ep_ctrl);
    4200:	fc 01       	movw	r30, r24
    4202:	11 82       	std	Z+1, r1	; 0x01
}
    4204:	cf 91       	pop	r28
    4206:	08 95       	ret

00004208 <udd_ep_set_halt>:
	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
}

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    4208:	cf 93       	push	r28
    420a:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    420c:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    4210:	fc 01       	movw	r30, r24
	udd_endpoint_enable_stall(ep_ctrl);
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	94 60       	ori	r25, 0x04	; 4
    4216:	91 83       	std	Z+1, r25	; 0x01

	udd_ep_abort(ep);
    4218:	8c 2f       	mov	r24, r28
    421a:	0e 94 c7 20 	call	0x418e	; 0x418e <udd_ep_abort>
	return true;
}
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	cf 91       	pop	r28
    4222:	08 95       	ret

00004224 <udd_ep_wait_stall_clear>:
	}
}

bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
    4224:	ef 92       	push	r14
    4226:	ff 92       	push	r15
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	18 2f       	mov	r17, r24
    4230:	eb 01       	movw	r28, r22
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
    4232:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
    4236:	7c 01       	movw	r14, r24
	ptr_job = udd_ep_get_job(ep);
    4238:	81 2f       	mov	r24, r17
    423a:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <udd_ep_get_job>
    423e:	dc 01       	movw	r26, r24

	if (udd_endpoint_is_stall(ep_ctrl)) {
    4240:	f7 01       	movw	r30, r14
    4242:	81 81       	ldd	r24, Z+1	; 0x01
    4244:	82 ff       	sbrs	r24, 2
    4246:	0a c0       	rjmp	.+20     	; 0x425c <udd_ep_wait_stall_clear+0x38>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    4248:	9c 91       	ld	r25, X
    424a:	90 fd       	sbrc	r25, 0
    424c:	0b c0       	rjmp	.+22     	; 0x4264 <udd_ep_wait_stall_clear+0x40>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    424e:	91 60       	ori	r25, 0x01	; 1
    4250:	9c 93       	st	X, r25
		ptr_job->call_nohalt = callback;
    4252:	17 96       	adiw	r26, 0x07	; 7
    4254:	cd 93       	st	X+, r28
    4256:	dc 93       	st	X, r29
    4258:	18 97       	sbiw	r26, 0x08	; 8
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <udd_ep_wait_stall_clear+0x3c>
	} else {
		// endpoint not halted then call directly callback
		callback();
    425c:	fe 01       	movw	r30, r28
    425e:	19 95       	eicall
	}
	return true;
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	01 c0       	rjmp	.+2      	; 0x4266 <udd_ep_wait_stall_clear+0x42>
	ptr_job = udd_ep_get_job(ep);

	if (udd_endpoint_is_stall(ep_ctrl)) {
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
			return false; // Job already on going
    4264:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	1f 91       	pop	r17
    426c:	ff 90       	pop	r15
    426e:	ef 90       	pop	r14
    4270:	08 95       	ret

00004272 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    4272:	1f 92       	push	r1
    4274:	0f 92       	push	r0
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	0f 92       	push	r0
    427a:	11 24       	eor	r1, r1
    427c:	0b b6       	in	r0, 0x3b	; 59
    427e:	0f 92       	push	r0
    4280:	0f 93       	push	r16
    4282:	2f 93       	push	r18
    4284:	3f 93       	push	r19
    4286:	4f 93       	push	r20
    4288:	5f 93       	push	r21
    428a:	6f 93       	push	r22
    428c:	7f 93       	push	r23
    428e:	8f 93       	push	r24
    4290:	9f 93       	push	r25
    4292:	af 93       	push	r26
    4294:	bf 93       	push	r27
    4296:	cf 93       	push	r28
    4298:	ef 93       	push	r30
    429a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    429c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    42a0:	87 ff       	sbrs	r24, 7
    42a2:	08 c0       	rjmp	.+16     	; 0x42b4 <__vector_125+0x42>
		udd_ack_start_of_frame_event();
    42a4:	80 e8       	ldi	r24, 0x80	; 128
    42a6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    42aa:	0e 94 93 19 	call	0x3326	; 0x3326 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    42ae:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    42b2:	8f c0       	rjmp	.+286    	; 0x43d2 <__vector_125+0x160>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    42b4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    42b8:	82 ff       	sbrs	r24, 2
    42ba:	1a c0       	rjmp	.+52     	; 0x42f0 <__vector_125+0x7e>
		udd_ack_underflow_event();
    42bc:	84 e0       	ldi	r24, 0x04	; 4
    42be:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    42c2:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <udd_sram+0x24>
    42c6:	86 ff       	sbrs	r24, 6
    42c8:	84 c0       	rjmp	.+264    	; 0x43d2 <__vector_125+0x160>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    42ca:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    42ce:	81 fd       	sbrc	r24, 1
    42d0:	80 c0       	rjmp	.+256    	; 0x43d2 <__vector_125+0x160>
    42d2:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <udd_ctrl_interrupt_tc_setup>
    42d6:	81 11       	cpse	r24, r1
    42d8:	7c c0       	rjmp	.+248    	; 0x43d2 <__vector_125+0x160>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    42da:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udd_ep_control_state>
    42de:	81 30       	cpi	r24, 0x01	; 1
    42e0:	19 f4       	brne	.+6      	; 0x42e8 <__vector_125+0x76>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    42e2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <udd_ctrl_send_zlp_in>
    42e6:	75 c0       	rjmp	.+234    	; 0x43d2 <__vector_125+0x160>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    42e8:	84 30       	cpi	r24, 0x04	; 4
    42ea:	09 f0       	breq	.+2      	; 0x42ee <__vector_125+0x7c>
    42ec:	72 c0       	rjmp	.+228    	; 0x43d2 <__vector_125+0x160>
    42ee:	22 c0       	rjmp	.+68     	; 0x4334 <__vector_125+0xc2>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    42f0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    42f4:	81 ff       	sbrs	r24, 1
    42f6:	27 c0       	rjmp	.+78     	; 0x4346 <__vector_125+0xd4>
		udd_ack_overflow_event();
    42f8:	82 e0       	ldi	r24, 0x02	; 2
    42fa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    42fe:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_sram+0x1c>
    4302:	86 ff       	sbrs	r24, 6
    4304:	66 c0       	rjmp	.+204    	; 0x43d2 <__vector_125+0x160>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    4306:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    430a:	81 fd       	sbrc	r24, 1
    430c:	62 c0       	rjmp	.+196    	; 0x43d2 <__vector_125+0x160>
    430e:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <udd_ctrl_interrupt_tc_setup>
    4312:	81 11       	cpse	r24, r1
    4314:	5e c0       	rjmp	.+188    	; 0x43d2 <__vector_125+0x160>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    4316:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udd_ep_control_state>
    431a:	82 30       	cpi	r24, 0x02	; 2
    431c:	41 f4       	brne	.+16     	; 0x432e <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    431e:	84 e0       	ldi	r24, 0x04	; 4
    4320:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    4324:	e4 ef       	ldi	r30, 0xF4	; 244
    4326:	f3 e2       	ldi	r31, 0x23	; 35
    4328:	02 e0       	ldi	r16, 0x02	; 2
    432a:	06 93       	lac	Z, r16
    432c:	52 c0       	rjmp	.+164    	; 0x43d2 <__vector_125+0x160>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    432e:	83 30       	cpi	r24, 0x03	; 3
    4330:	09 f0       	breq	.+2      	; 0x4334 <__vector_125+0xc2>
    4332:	4f c0       	rjmp	.+158    	; 0x43d2 <__vector_125+0x160>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    4334:	ed ef       	ldi	r30, 0xFD	; 253
    4336:	f3 e2       	ldi	r31, 0x23	; 35
    4338:	04 e0       	ldi	r16, 0x04	; 4
    433a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    433c:	e5 ef       	ldi	r30, 0xF5	; 245
    433e:	f3 e2       	ldi	r31, 0x23	; 35
    4340:	04 e0       	ldi	r16, 0x04	; 4
    4342:	05 93       	las	Z, r16
    4344:	46 c0       	rjmp	.+140    	; 0x43d2 <__vector_125+0x160>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    4346:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    434a:	84 ff       	sbrs	r24, 4
    434c:	29 c0       	rjmp	.+82     	; 0x43a0 <__vector_125+0x12e>
		udd_ack_reset_event();
    434e:	80 e1       	ldi	r24, 0x10	; 16
    4350:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    4354:	c1 e0       	ldi	r28, 0x01	; 1
			udd_ep_abort(i);
    4356:	8c 2f       	mov	r24, r28
    4358:	0e 94 c7 20 	call	0x418e	; 0x418e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    435c:	8c 2f       	mov	r24, r28
    435e:	80 68       	ori	r24, 0x80	; 128
    4360:	0e 94 c7 20 	call	0x418e	; 0x418e <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    4364:	cf 5f       	subi	r28, 0xFF	; 255
    4366:	c7 30       	cpi	r28, 0x07	; 7
    4368:	b1 f7       	brne	.-20     	; 0x4356 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    436a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    436e:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4372:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <udd_sram+0x1d>
	udd_endpoint_clear_status(ep_ctrl);
    4376:	96 e0       	ldi	r25, 0x06	; 6
    4378:	90 93 f4 23 	sts	0x23F4, r25	; 0x8023f4 <udd_sram+0x1c>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    437c:	83 e4       	ldi	r24, 0x43	; 67
    437e:	80 93 f5 23 	sts	0x23F5, r24	; 0x8023f5 <udd_sram+0x1d>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4382:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <udd_sram+0x25>
	udd_endpoint_clear_status(ep_ctrl);
    4386:	90 93 fc 23 	sts	0x23FC, r25	; 0x8023fc <udd_sram+0x24>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    438a:	80 93 fd 23 	sts	0x23FD, r24	; 0x8023fd <udd_sram+0x25>
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    438e:	81 e9       	ldi	r24, 0x91	; 145
    4390:	93 e2       	ldi	r25, 0x23	; 35
    4392:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <udd_sram+0x20>
    4396:	90 93 f9 23 	sts	0x23F9, r25	; 0x8023f9 <udd_sram+0x21>
		// Reset endpoint control management
		udd_ctrl_init();
    439a:	0e 94 91 1c 	call	0x3922	; 0x3922 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    439e:	19 c0       	rjmp	.+50     	; 0x43d2 <__vector_125+0x160>
	}

	if (udd_is_suspend_event()) {
    43a0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    43a4:	86 ff       	sbrs	r24, 6
    43a6:	09 c0       	rjmp	.+18     	; 0x43ba <__vector_125+0x148>
		udd_ack_suspend_event();
    43a8:	80 e4       	ldi	r24, 0x40	; 64
    43aa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	0e 94 65 1c 	call	0x38ca	; 0x38ca <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    43b4:	0e 94 6f 01 	call	0x2de	; 0x2de <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    43b8:	0c c0       	rjmp	.+24     	; 0x43d2 <__vector_125+0x160>
	}

	if (udd_is_resume_event()) {
    43ba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    43be:	85 ff       	sbrs	r24, 5
    43c0:	08 c0       	rjmp	.+16     	; 0x43d2 <__vector_125+0x160>
		udd_ack_resume_event();
    43c2:	80 e2       	ldi	r24, 0x20	; 32
    43c4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	0e 94 65 1c 	call	0x38ca	; 0x38ca <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    43ce:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main_resume_action>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    43d2:	ff 91       	pop	r31
    43d4:	ef 91       	pop	r30
    43d6:	cf 91       	pop	r28
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 91       	pop	r16
    43ee:	0f 90       	pop	r0
    43f0:	0b be       	out	0x3b, r0	; 59
    43f2:	0f 90       	pop	r0
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	0f 90       	pop	r0
    43f8:	1f 90       	pop	r1
    43fa:	18 95       	reti

000043fc <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    43fc:	1f 92       	push	r1
    43fe:	0f 92       	push	r0
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	0f 92       	push	r0
    4404:	11 24       	eor	r1, r1
    4406:	0b b6       	in	r0, 0x3b	; 59
    4408:	0f 92       	push	r0
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	2f 93       	push	r18
    4410:	3f 93       	push	r19
    4412:	4f 93       	push	r20
    4414:	5f 93       	push	r21
    4416:	6f 93       	push	r22
    4418:	7f 93       	push	r23
    441a:	8f 93       	push	r24
    441c:	9f 93       	push	r25
    441e:	af 93       	push	r26
    4420:	bf 93       	push	r27
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	ef 93       	push	r30
    4428:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    442a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    442e:	81 ff       	sbrs	r24, 1
    4430:	1a c0       	rjmp	.+52     	; 0x4466 <__vector_126+0x6a>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    4432:	82 e0       	ldi	r24, 0x02	; 2
    4434:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    4438:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    443c:	81 95       	neg	r24
    443e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    4440:	e4 ef       	ldi	r30, 0xF4	; 244
    4442:	f3 e2       	ldi	r31, 0x23	; 35
    4444:	e8 1b       	sub	r30, r24
    4446:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    4448:	20 81       	ld	r18, Z
    444a:	31 81       	ldd	r19, Z+1	; 0x01
    444c:	24 5f       	subi	r18, 0xF4	; 244
    444e:	33 42       	sbci	r19, 0x23	; 35
    4450:	83 e0       	ldi	r24, 0x03	; 3
    4452:	36 95       	lsr	r19
    4454:	27 95       	ror	r18
    4456:	8a 95       	dec	r24
    4458:	e1 f7       	brne	.-8      	; 0x4452 <__vector_126+0x56>
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    445a:	82 2f       	mov	r24, r18
    445c:	86 95       	lsr	r24
    445e:	20 fd       	sbrc	r18, 0
    4460:	07 c0       	rjmp	.+14     	; 0x4470 <__vector_126+0x74>
    4462:	c0 e0       	ldi	r28, 0x00	; 0
    4464:	06 c0       	rjmp	.+12     	; 0x4472 <__vector_126+0x76>
#endif

	if (!udd_is_tc_event()) {
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    4466:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <udd_ctrl_interrupt_tc_setup>
    446a:	88 23       	and	r24, r24
    446c:	11 f3       	breq	.-60     	; 0x4432 <__vector_126+0x36>
    446e:	90 c0       	rjmp	.+288    	; 0x4590 <__vector_126+0x194>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    4470:	c0 e8       	ldi	r28, 0x80	; 128
    4472:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    4474:	8c 2f       	mov	r24, r28
    4476:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <udd_ep_get_ctrl>
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    447a:	fc 01       	movw	r30, r24
    447c:	20 81       	ld	r18, Z
    447e:	25 ff       	sbrs	r18, 5
    4480:	87 c0       	rjmp	.+270    	; 0x4590 <__vector_126+0x194>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    4482:	00 e2       	ldi	r16, 0x20	; 32
    4484:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    4486:	c1 11       	cpse	r28, r1
    4488:	7b c0       	rjmp	.+246    	; 0x4580 <__vector_126+0x184>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    448a:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udd_ep_control_state>
    448e:	84 30       	cpi	r24, 0x04	; 4
    4490:	29 f4       	brne	.+10     	; 0x449c <__vector_126+0xa0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    4492:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    4496:	0e 94 91 1c 	call	0x3922	; 0x3922 <udd_ctrl_init>
    449a:	7a c0       	rjmp	.+244    	; 0x4590 <__vector_126+0x194>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    449c:	00 91 f6 23 	lds	r16, 0x23F6	; 0x8023f6 <udd_sram+0x1e>
    44a0:	10 91 f7 23 	lds	r17, 0x23F7	; 0x8023f7 <udd_sram+0x1f>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    44a4:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0xa>
    44a8:	90 91 83 24 	lds	r25, 0x2483	; 0x802483 <udd_g_ctrlreq+0xb>
    44ac:	c0 91 d1 23 	lds	r28, 0x23D1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    44b0:	d0 91 d2 23 	lds	r29, 0x23D2	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
    44b4:	9e 01       	movw	r18, r28
    44b6:	20 0f       	add	r18, r16
    44b8:	31 1f       	adc	r19, r17
    44ba:	82 17       	cp	r24, r18
    44bc:	93 07       	cpc	r25, r19
    44be:	18 f4       	brcc	.+6      	; 0x44c6 <__vector_126+0xca>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    44c0:	8c 01       	movw	r16, r24
    44c2:	0c 1b       	sub	r16, r28
    44c4:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    44c6:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udd_g_ctrlreq+0x8>
    44ca:	90 91 81 24 	lds	r25, 0x2481	; 0x802481 <udd_g_ctrlreq+0x9>
    44ce:	a8 01       	movw	r20, r16
    44d0:	61 e9       	ldi	r22, 0x91	; 145
    44d2:	73 e2       	ldi	r23, 0x23	; 35
    44d4:	8c 0f       	add	r24, r28
    44d6:	9d 1f       	adc	r25, r29
    44d8:	0e 94 0c 24 	call	0x4818	; 0x4818 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    44dc:	c0 0f       	add	r28, r16
    44de:	d1 1f       	adc	r29, r17
    44e0:	c0 93 d1 23 	sts	0x23D1, r28	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    44e4:	d0 93 d2 23 	sts	0x23D2, r29	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    44e8:	00 34       	cpi	r16, 0x40	; 64
    44ea:	11 05       	cpc	r17, r1
    44ec:	69 f4       	brne	.+26     	; 0x4508 <__vector_126+0x10c>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    44ee:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    44f2:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
    44f6:	8c 0f       	add	r24, r28
    44f8:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    44fa:	20 91 7e 24 	lds	r18, 0x247E	; 0x80247e <udd_g_ctrlreq+0x6>
    44fe:	30 91 7f 24 	lds	r19, 0x247F	; 0x80247f <udd_g_ctrlreq+0x7>
    4502:	82 17       	cp	r24, r18
    4504:	93 07       	cpc	r25, r19
    4506:	98 f0       	brcs	.+38     	; 0x452e <__vector_126+0x132>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    4508:	c0 93 82 24 	sts	0x2482, r28	; 0x802482 <udd_g_ctrlreq+0xa>
    450c:	d0 93 83 24 	sts	0x2483, r29	; 0x802483 <udd_g_ctrlreq+0xb>
		if (NULL != udd_g_ctrlreq.over_under_run) {
    4510:	e0 91 86 24 	lds	r30, 0x2486	; 0x802486 <udd_g_ctrlreq+0xe>
    4514:	f0 91 87 24 	lds	r31, 0x2487	; 0x802487 <udd_g_ctrlreq+0xf>
    4518:	30 97       	sbiw	r30, 0x00	; 0
    451a:	31 f0       	breq	.+12     	; 0x4528 <__vector_126+0x12c>
			if (!udd_g_ctrlreq.over_under_run()) {
    451c:	19 95       	eicall
    451e:	81 11       	cpse	r24, r1
    4520:	03 c0       	rjmp	.+6      	; 0x4528 <__vector_126+0x12c>
				// Stall ZLP
				udd_ctrl_stall_data();
    4522:	0e 94 b6 1c 	call	0x396c	; 0x396c <udd_ctrl_stall_data>
    4526:	34 c0       	rjmp	.+104    	; 0x4590 <__vector_126+0x194>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    4528:	0e 94 c4 1c 	call	0x3988	; 0x3988 <udd_ctrl_send_zlp_in>
    452c:	31 c0       	rjmp	.+98     	; 0x4590 <__vector_126+0x194>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    452e:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0xa>
    4532:	90 91 83 24 	lds	r25, 0x2483	; 0x802483 <udd_g_ctrlreq+0xb>
    4536:	8c 17       	cp	r24, r28
    4538:	9d 07       	cpc	r25, r29
    453a:	d9 f4       	brne	.+54     	; 0x4572 <__vector_126+0x176>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    453c:	e0 91 86 24 	lds	r30, 0x2486	; 0x802486 <udd_g_ctrlreq+0xe>
    4540:	f0 91 87 24 	lds	r31, 0x2487	; 0x802487 <udd_g_ctrlreq+0xf>
    4544:	30 97       	sbiw	r30, 0x00	; 0
    4546:	69 f3       	breq	.-38     	; 0x4522 <__vector_126+0x126>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    4548:	19 95       	eicall
    454a:	88 23       	and	r24, r24
    454c:	51 f3       	breq	.-44     	; 0x4522 <__vector_126+0x126>
			udd_ctrl_stall_data();
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    454e:	20 91 d3 23 	lds	r18, 0x23D3	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    4552:	30 91 d4 23 	lds	r19, 0x23D4	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
    4556:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    455a:	90 91 d2 23 	lds	r25, 0x23D2	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
    455e:	82 0f       	add	r24, r18
    4560:	93 1f       	adc	r25, r19
    4562:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udd_ctrl_prev_payload_nb_trans>
    4566:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    456a:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <udd_ctrl_payload_nb_trans>
    456e:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    4572:	e4 ef       	ldi	r30, 0xF4	; 244
    4574:	f3 e2       	ldi	r31, 0x23	; 35
    4576:	02 e0       	ldi	r16, 0x02	; 2
    4578:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    457a:	00 e2       	ldi	r16, 0x20	; 32
    457c:	06 93       	lac	Z, r16
    457e:	08 c0       	rjmp	.+16     	; 0x4590 <__vector_126+0x194>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    4580:	c0 38       	cpi	r28, 0x80	; 128
    4582:	19 f4       	brne	.+6      	; 0x458a <__vector_126+0x18e>
		udd_ctrl_in_sent();
    4584:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    4588:	03 c0       	rjmp	.+6      	; 0x4590 <__vector_126+0x194>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    458a:	8c 2f       	mov	r24, r28
    458c:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    4590:	ff 91       	pop	r31
    4592:	ef 91       	pop	r30
    4594:	df 91       	pop	r29
    4596:	cf 91       	pop	r28
    4598:	bf 91       	pop	r27
    459a:	af 91       	pop	r26
    459c:	9f 91       	pop	r25
    459e:	8f 91       	pop	r24
    45a0:	7f 91       	pop	r23
    45a2:	6f 91       	pop	r22
    45a4:	5f 91       	pop	r21
    45a6:	4f 91       	pop	r20
    45a8:	3f 91       	pop	r19
    45aa:	2f 91       	pop	r18
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	0f 90       	pop	r0
    45b2:	0b be       	out	0x3b, r0	; 59
    45b4:	0f 90       	pop	r0
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	0f 90       	pop	r0
    45ba:	1f 90       	pop	r1
    45bc:	18 95       	reti

000045be <udd_ep_is_valid>:
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
    45be:	98 2f       	mov	r25, r24
    45c0:	9f 70       	andi	r25, 0x0F	; 15
	if (ep == 0) {
    45c2:	19 f0       	breq	.+6      	; 0x45ca <udd_ep_is_valid+0xc>
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	97 30       	cpi	r25, 0x07	; 7
    45c8:	08 f0       	brcs	.+2      	; 0x45cc <udd_ep_is_valid+0xe>

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	if (ep == 0) {
		return false;
    45ca:	80 e0       	ldi	r24, 0x00	; 0
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    45cc:	08 95       	ret

000045ce <main>:
	.paritytype   = USART_PMODE_DISABLED_gc,
	.stopbits     = false
};

int main(void)
{
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	27 97       	sbiw	r28, 0x07	; 7
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	de bf       	out	0x3e, r29	; 62
	irq_initialize_vectors();
    45dc:	87 e0       	ldi	r24, 0x07	; 7
    45de:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    45e2:	78 94       	sei

	sysclk_init();
    45e4:	0e 94 96 0a 	call	0x152c	; 0x152c <sysclk_init>
	board_init();
    45e8:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <board_init>
	// replace everything with simple port assignment pls
    ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
    45ec:	41 e0       	ldi	r20, 0x01	; 1
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	60 e1       	ldi	r22, 0x10	; 16
    45f2:	80 e4       	ldi	r24, 0x40	; 64
    45f4:	96 e0       	ldi	r25, 0x06	; 6
    45f6:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ioport_configure_port_pin>
    ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
    45fa:	43 e0       	ldi	r20, 0x03	; 3
    45fc:	50 e0       	ldi	r21, 0x00	; 0
    45fe:	60 e2       	ldi	r22, 0x20	; 32
    4600:	80 e4       	ldi	r24, 0x40	; 64
    4602:	96 e0       	ldi	r25, 0x06	; 6
    4604:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ioport_configure_port_pin>
    //ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT);
    ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
    4608:	43 e0       	ldi	r20, 0x03	; 3
    460a:	50 e0       	ldi	r21, 0x00	; 0
    460c:	60 e8       	ldi	r22, 0x80	; 128
    460e:	80 e4       	ldi	r24, 0x40	; 64
    4610:	96 e0       	ldi	r25, 0x06	; 6
    4612:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ioport_configure_port_pin>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    4616:	80 ea       	ldi	r24, 0xA0	; 160
    4618:	98 e0       	ldi	r25, 0x08	; 8
    461a:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <stdio_base>
    461e:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4622:	89 e5       	ldi	r24, 0x59	; 89
    4624:	91 e0       	ldi	r25, 0x01	; 1
    4626:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <ptr_put>
    462a:	90 93 6d 24 	sts	0x246D, r25	; 0x80246d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    462e:	80 e5       	ldi	r24, 0x50	; 80
    4630:	91 e0       	ldi	r25, 0x01	; 1
    4632:	80 93 70 24 	sts	0x2470, r24	; 0x802470 <ptr_get>
    4636:	90 93 71 24 	sts	0x2471, r25	; 0x802471 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    463a:	83 e0       	ldi	r24, 0x03	; 3
    463c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    463e:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    4640:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    4642:	80 e8       	ldi	r24, 0x80	; 128
    4644:	95 e2       	ldi	r25, 0x25	; 37
    4646:	a0 e0       	ldi	r26, 0x00	; 0
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	89 83       	std	Y+1, r24	; 0x01
    464c:	9a 83       	std	Y+2, r25	; 0x02
    464e:	ab 83       	std	Y+3, r26	; 0x03
    4650:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    4652:	60 e1       	ldi	r22, 0x10	; 16
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    465a:	be 01       	movw	r22, r28
    465c:	6f 5f       	subi	r22, 0xFF	; 255
    465e:	7f 4f       	sbci	r23, 0xFF	; 255
    4660:	80 ea       	ldi	r24, 0xA0	; 160
    4662:	98 e0       	ldi	r25, 0x08	; 8
    4664:	0e 94 bb 03 	call	0x776	; 0x776 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    4668:	61 e9       	ldi	r22, 0x91	; 145
    466a:	79 e0       	ldi	r23, 0x09	; 9
    466c:	8f e7       	ldi	r24, 0x7F	; 127
    466e:	99 e0       	ldi	r25, 0x09	; 9
    4670:	0e 94 15 24 	call	0x482a	; 0x482a <fdevopen>
	// okay ?
	stdio_serial_init(&USARTC0, &usart_serial_options);
	spi_master_init(&SPIC);
    4674:	80 ec       	ldi	r24, 0xC0	; 192
    4676:	98 e0       	ldi	r25, 0x08	; 8
    4678:	0e 94 a8 09 	call	0x1350	; 0x1350 <spi_master_init>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    467c:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    4680:	80 64       	ori	r24, 0x40	; 64
    4682:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	spi_enable(&SPIC);
	udc_start();
    4686:	0e 94 6e 19 	call	0x32dc	; 0x32dc <udc_start>

	printf("\n\rMCU started\n\r");
    468a:	82 ef       	ldi	r24, 0xF2	; 242
    468c:	90 e2       	ldi	r25, 0x20	; 32
    468e:	9f 93       	push	r25
    4690:	8f 93       	push	r24
    4692:	0e 94 60 24 	call	0x48c0	; 0x48c0 <printf>
	spi_write_packet(&SPIC, "\xFF\xFF\xFF\xFF\xFF", 5);
    4696:	45 e0       	ldi	r20, 0x05	; 5
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	62 e0       	ldi	r22, 0x02	; 2
    469c:	71 e2       	ldi	r23, 0x21	; 33
    469e:	80 ec       	ldi	r24, 0xC0	; 192
    46a0:	98 e0       	ldi	r25, 0x08	; 8
    46a2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <spi_write_packet>
	delay_ms(10);
    46a6:	61 e4       	ldi	r22, 0x41	; 65
    46a8:	7c e9       	ldi	r23, 0x9C	; 156
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	0e 94 45 01 	call	0x28a	; 0x28a <__portable_avr_delay_cycles>
	printf("Reset complete\n\r");
    46b2:	88 e0       	ldi	r24, 0x08	; 8
    46b4:	91 e2       	ldi	r25, 0x21	; 33
    46b6:	9f 93       	push	r25
    46b8:	8f 93       	push	r24
    46ba:	0e 94 60 24 	call	0x48c0	; 0x48c0 <printf>
	spi_write_packet(&SPIC, "\x20\x0C", 2);
    46be:	42 e0       	ldi	r20, 0x02	; 2
    46c0:	50 e0       	ldi	r21, 0x00	; 0
    46c2:	69 e1       	ldi	r22, 0x19	; 25
    46c4:	71 e2       	ldi	r23, 0x21	; 33
    46c6:	80 ec       	ldi	r24, 0xC0	; 192
    46c8:	98 e0       	ldi	r25, 0x08	; 8
    46ca:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <spi_write_packet>
	delay_ms(10);
    46ce:	61 e4       	ldi	r22, 0x41	; 65
    46d0:	7c e9       	ldi	r23, 0x9C	; 156
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	0e 94 45 01 	call	0x28a	; 0x28a <__portable_avr_delay_cycles>
	spi_write_packet(&SPIC, "\x10\x04", 2);
    46da:	42 e0       	ldi	r20, 0x02	; 2
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	6c e1       	ldi	r22, 0x1C	; 28
    46e0:	71 e2       	ldi	r23, 0x21	; 33
    46e2:	80 ec       	ldi	r24, 0xC0	; 192
    46e4:	98 e0       	ldi	r25, 0x08	; 8
    46e6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <spi_write_packet>
	delay_ms(10);
    46ea:	61 e4       	ldi	r22, 0x41	; 65
    46ec:	7c e9       	ldi	r23, 0x9C	; 156
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 45 01 	call	0x28a	; 0x28a <__portable_avr_delay_cycles>
	spi_write_packet(&SPIC, "\x60\x18\x3A\x00", 4);
    46f6:	44 e0       	ldi	r20, 0x04	; 4
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	68 ed       	ldi	r22, 0xD8	; 216
    46fc:	70 e2       	ldi	r23, 0x20	; 32
    46fe:	80 ec       	ldi	r24, 0xC0	; 192
    4700:	98 e0       	ldi	r25, 0x08	; 8
    4702:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <spi_write_packet>
	delay_ms(10);
    4706:	61 e4       	ldi	r22, 0x41	; 65
    4708:	7c e9       	ldi	r23, 0x9C	; 156
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	0e 94 45 01 	call	0x28a	; 0x28a <__portable_avr_delay_cycles>
	spi_write_packet(&SPIC, "\x70\x89\x78\xD7", 4);
    4712:	44 e0       	ldi	r20, 0x04	; 4
    4714:	50 e0       	ldi	r21, 0x00	; 0
    4716:	6f e1       	ldi	r22, 0x1F	; 31
    4718:	71 e2       	ldi	r23, 0x21	; 33
    471a:	80 ec       	ldi	r24, 0xC0	; 192
    471c:	98 e0       	ldi	r25, 0x08	; 8
    471e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <spi_write_packet>
	delay_ms(10);
    4722:	61 e4       	ldi	r22, 0x41	; 65
    4724:	7c e9       	ldi	r23, 0x9C	; 156
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	0e 94 45 01 	call	0x28a	; 0x28a <__portable_avr_delay_cycles>
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	0f 90       	pop	r0
	while (true)
	{
		delay_ms(100);
		spi_write_packet(&SPIC, "\x38", 1);
		spi_read_packet(&SPIC, main_buf_answer, 2);
		printf("%02X %02X\r\n", main_buf_answer[0], main_buf_answer[1]);
    4736:	06 e2       	ldi	r16, 0x26	; 38
    4738:	11 e2       	ldi	r17, 0x21	; 33
	spi_write_packet(&SPIC, "\x70\x89\x78\xD7", 4);
	delay_ms(10);
	
	while (true)
	{
		delay_ms(100);
    473a:	61 e8       	ldi	r22, 0x81	; 129
    473c:	7a e1       	ldi	r23, 0x1A	; 26
    473e:	86 e0       	ldi	r24, 0x06	; 6
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	0e 94 45 01 	call	0x28a	; 0x28a <__portable_avr_delay_cycles>
		spi_write_packet(&SPIC, "\x38", 1);
    4746:	41 e0       	ldi	r20, 0x01	; 1
    4748:	50 e0       	ldi	r21, 0x00	; 0
    474a:	64 e2       	ldi	r22, 0x24	; 36
    474c:	71 e2       	ldi	r23, 0x21	; 33
    474e:	80 ec       	ldi	r24, 0xC0	; 192
    4750:	98 e0       	ldi	r25, 0x08	; 8
    4752:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <spi_write_packet>
		spi_read_packet(&SPIC, main_buf_answer, 2);
    4756:	42 e0       	ldi	r20, 0x02	; 2
    4758:	50 e0       	ldi	r21, 0x00	; 0
    475a:	60 e0       	ldi	r22, 0x00	; 0
    475c:	70 e2       	ldi	r23, 0x20	; 32
    475e:	80 ec       	ldi	r24, 0xC0	; 192
    4760:	98 e0       	ldi	r25, 0x08	; 8
    4762:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <spi_read_packet>
		printf("%02X %02X\r\n", main_buf_answer[0], main_buf_answer[1]);
    4766:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <__data_start+0x1>
    476a:	1f 92       	push	r1
    476c:	8f 93       	push	r24
    476e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    4772:	1f 92       	push	r1
    4774:	8f 93       	push	r24
    4776:	1f 93       	push	r17
    4778:	0f 93       	push	r16
    477a:	0e 94 60 24 	call	0x48c0	; 0x48c0 <printf>
	}
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	d7 cf       	rjmp	.-82     	; 0x473a <main+0x16c>

0000478c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    478c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    4790:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    4792:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    4794:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    4798:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    479a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    479e:	08 95       	ret

000047a0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    47a0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    47a2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    47a4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    47a6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    47a8:	60 83       	st	Z, r22
	ret                             // Return to caller
    47aa:	08 95       	ret

000047ac <__udivmodhi4>:
    47ac:	aa 1b       	sub	r26, r26
    47ae:	bb 1b       	sub	r27, r27
    47b0:	51 e1       	ldi	r21, 0x11	; 17
    47b2:	07 c0       	rjmp	.+14     	; 0x47c2 <__udivmodhi4_ep>

000047b4 <__udivmodhi4_loop>:
    47b4:	aa 1f       	adc	r26, r26
    47b6:	bb 1f       	adc	r27, r27
    47b8:	a6 17       	cp	r26, r22
    47ba:	b7 07       	cpc	r27, r23
    47bc:	10 f0       	brcs	.+4      	; 0x47c2 <__udivmodhi4_ep>
    47be:	a6 1b       	sub	r26, r22
    47c0:	b7 0b       	sbc	r27, r23

000047c2 <__udivmodhi4_ep>:
    47c2:	88 1f       	adc	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	5a 95       	dec	r21
    47c8:	a9 f7       	brne	.-22     	; 0x47b4 <__udivmodhi4_loop>
    47ca:	80 95       	com	r24
    47cc:	90 95       	com	r25
    47ce:	bc 01       	movw	r22, r24
    47d0:	cd 01       	movw	r24, r26
    47d2:	08 95       	ret

000047d4 <__udivmodsi4>:
    47d4:	a1 e2       	ldi	r26, 0x21	; 33
    47d6:	1a 2e       	mov	r1, r26
    47d8:	aa 1b       	sub	r26, r26
    47da:	bb 1b       	sub	r27, r27
    47dc:	fd 01       	movw	r30, r26
    47de:	0d c0       	rjmp	.+26     	; 0x47fa <__udivmodsi4_ep>

000047e0 <__udivmodsi4_loop>:
    47e0:	aa 1f       	adc	r26, r26
    47e2:	bb 1f       	adc	r27, r27
    47e4:	ee 1f       	adc	r30, r30
    47e6:	ff 1f       	adc	r31, r31
    47e8:	a2 17       	cp	r26, r18
    47ea:	b3 07       	cpc	r27, r19
    47ec:	e4 07       	cpc	r30, r20
    47ee:	f5 07       	cpc	r31, r21
    47f0:	20 f0       	brcs	.+8      	; 0x47fa <__udivmodsi4_ep>
    47f2:	a2 1b       	sub	r26, r18
    47f4:	b3 0b       	sbc	r27, r19
    47f6:	e4 0b       	sbc	r30, r20
    47f8:	f5 0b       	sbc	r31, r21

000047fa <__udivmodsi4_ep>:
    47fa:	66 1f       	adc	r22, r22
    47fc:	77 1f       	adc	r23, r23
    47fe:	88 1f       	adc	r24, r24
    4800:	99 1f       	adc	r25, r25
    4802:	1a 94       	dec	r1
    4804:	69 f7       	brne	.-38     	; 0x47e0 <__udivmodsi4_loop>
    4806:	60 95       	com	r22
    4808:	70 95       	com	r23
    480a:	80 95       	com	r24
    480c:	90 95       	com	r25
    480e:	9b 01       	movw	r18, r22
    4810:	ac 01       	movw	r20, r24
    4812:	bd 01       	movw	r22, r26
    4814:	cf 01       	movw	r24, r30
    4816:	08 95       	ret

00004818 <memcpy>:
    4818:	fb 01       	movw	r30, r22
    481a:	dc 01       	movw	r26, r24
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <memcpy+0xa>
    481e:	01 90       	ld	r0, Z+
    4820:	0d 92       	st	X+, r0
    4822:	41 50       	subi	r20, 0x01	; 1
    4824:	50 40       	sbci	r21, 0x00	; 0
    4826:	d8 f7       	brcc	.-10     	; 0x481e <memcpy+0x6>
    4828:	08 95       	ret

0000482a <fdevopen>:
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	00 97       	sbiw	r24, 0x00	; 0
    4834:	31 f4       	brne	.+12     	; 0x4842 <fdevopen+0x18>
    4836:	61 15       	cp	r22, r1
    4838:	71 05       	cpc	r23, r1
    483a:	19 f4       	brne	.+6      	; 0x4842 <fdevopen+0x18>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	3a c0       	rjmp	.+116    	; 0x48b6 <fdevopen+0x8c>
    4842:	8b 01       	movw	r16, r22
    4844:	ec 01       	movw	r28, r24
    4846:	6e e0       	ldi	r22, 0x0E	; 14
    4848:	70 e0       	ldi	r23, 0x00	; 0
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <calloc>
    4852:	fc 01       	movw	r30, r24
    4854:	89 2b       	or	r24, r25
    4856:	91 f3       	breq	.-28     	; 0x483c <fdevopen+0x12>
    4858:	80 e8       	ldi	r24, 0x80	; 128
    485a:	83 83       	std	Z+3, r24	; 0x03
    485c:	01 15       	cp	r16, r1
    485e:	11 05       	cpc	r17, r1
    4860:	71 f0       	breq	.+28     	; 0x487e <fdevopen+0x54>
    4862:	02 87       	std	Z+10, r16	; 0x0a
    4864:	13 87       	std	Z+11, r17	; 0x0b
    4866:	81 e8       	ldi	r24, 0x81	; 129
    4868:	83 83       	std	Z+3, r24	; 0x03
    486a:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <__iob>
    486e:	90 91 89 24 	lds	r25, 0x2489	; 0x802489 <__iob+0x1>
    4872:	89 2b       	or	r24, r25
    4874:	21 f4       	brne	.+8      	; 0x487e <fdevopen+0x54>
    4876:	e0 93 88 24 	sts	0x2488, r30	; 0x802488 <__iob>
    487a:	f0 93 89 24 	sts	0x2489, r31	; 0x802489 <__iob+0x1>
    487e:	20 97       	sbiw	r28, 0x00	; 0
    4880:	c9 f0       	breq	.+50     	; 0x48b4 <fdevopen+0x8a>
    4882:	c0 87       	std	Z+8, r28	; 0x08
    4884:	d1 87       	std	Z+9, r29	; 0x09
    4886:	83 81       	ldd	r24, Z+3	; 0x03
    4888:	82 60       	ori	r24, 0x02	; 2
    488a:	83 83       	std	Z+3, r24	; 0x03
    488c:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <__iob+0x2>
    4890:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <__iob+0x3>
    4894:	89 2b       	or	r24, r25
    4896:	71 f4       	brne	.+28     	; 0x48b4 <fdevopen+0x8a>
    4898:	e0 93 8a 24 	sts	0x248A, r30	; 0x80248a <__iob+0x2>
    489c:	f0 93 8b 24 	sts	0x248B, r31	; 0x80248b <__iob+0x3>
    48a0:	80 91 8c 24 	lds	r24, 0x248C	; 0x80248c <__iob+0x4>
    48a4:	90 91 8d 24 	lds	r25, 0x248D	; 0x80248d <__iob+0x5>
    48a8:	89 2b       	or	r24, r25
    48aa:	21 f4       	brne	.+8      	; 0x48b4 <fdevopen+0x8a>
    48ac:	e0 93 8c 24 	sts	0x248C, r30	; 0x80248c <__iob+0x4>
    48b0:	f0 93 8d 24 	sts	0x248D, r31	; 0x80248d <__iob+0x5>
    48b4:	cf 01       	movw	r24, r30
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	1f 91       	pop	r17
    48bc:	0f 91       	pop	r16
    48be:	08 95       	ret

000048c0 <printf>:
    48c0:	cf 93       	push	r28
    48c2:	df 93       	push	r29
    48c4:	cd b7       	in	r28, 0x3d	; 61
    48c6:	de b7       	in	r29, 0x3e	; 62
    48c8:	ae 01       	movw	r20, r28
    48ca:	4a 5f       	subi	r20, 0xFA	; 250
    48cc:	5f 4f       	sbci	r21, 0xFF	; 255
    48ce:	fa 01       	movw	r30, r20
    48d0:	61 91       	ld	r22, Z+
    48d2:	71 91       	ld	r23, Z+
    48d4:	af 01       	movw	r20, r30
    48d6:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <__iob+0x2>
    48da:	90 91 8b 24 	lds	r25, 0x248B	; 0x80248b <__iob+0x3>
    48de:	0e 94 74 24 	call	0x48e8	; 0x48e8 <vfprintf>
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	08 95       	ret

000048e8 <vfprintf>:
    48e8:	2f 92       	push	r2
    48ea:	3f 92       	push	r3
    48ec:	4f 92       	push	r4
    48ee:	5f 92       	push	r5
    48f0:	6f 92       	push	r6
    48f2:	7f 92       	push	r7
    48f4:	8f 92       	push	r8
    48f6:	9f 92       	push	r9
    48f8:	af 92       	push	r10
    48fa:	bf 92       	push	r11
    48fc:	cf 92       	push	r12
    48fe:	df 92       	push	r13
    4900:	ef 92       	push	r14
    4902:	ff 92       	push	r15
    4904:	0f 93       	push	r16
    4906:	1f 93       	push	r17
    4908:	cf 93       	push	r28
    490a:	df 93       	push	r29
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	2c 97       	sbiw	r28, 0x0c	; 12
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	7c 01       	movw	r14, r24
    4918:	6b 01       	movw	r12, r22
    491a:	8a 01       	movw	r16, r20
    491c:	fc 01       	movw	r30, r24
    491e:	16 82       	std	Z+6, r1	; 0x06
    4920:	17 82       	std	Z+7, r1	; 0x07
    4922:	83 81       	ldd	r24, Z+3	; 0x03
    4924:	81 ff       	sbrs	r24, 1
    4926:	bd c1       	rjmp	.+890    	; 0x4ca2 <vfprintf+0x3ba>
    4928:	ce 01       	movw	r24, r28
    492a:	01 96       	adiw	r24, 0x01	; 1
    492c:	4c 01       	movw	r8, r24
    492e:	f7 01       	movw	r30, r14
    4930:	93 81       	ldd	r25, Z+3	; 0x03
    4932:	f6 01       	movw	r30, r12
    4934:	93 fd       	sbrc	r25, 3
    4936:	85 91       	lpm	r24, Z+
    4938:	93 ff       	sbrs	r25, 3
    493a:	81 91       	ld	r24, Z+
    493c:	6f 01       	movw	r12, r30
    493e:	88 23       	and	r24, r24
    4940:	09 f4       	brne	.+2      	; 0x4944 <vfprintf+0x5c>
    4942:	ab c1       	rjmp	.+854    	; 0x4c9a <vfprintf+0x3b2>
    4944:	85 32       	cpi	r24, 0x25	; 37
    4946:	39 f4       	brne	.+14     	; 0x4956 <vfprintf+0x6e>
    4948:	93 fd       	sbrc	r25, 3
    494a:	85 91       	lpm	r24, Z+
    494c:	93 ff       	sbrs	r25, 3
    494e:	81 91       	ld	r24, Z+
    4950:	6f 01       	movw	r12, r30
    4952:	85 32       	cpi	r24, 0x25	; 37
    4954:	29 f4       	brne	.+10     	; 0x4960 <vfprintf+0x78>
    4956:	b7 01       	movw	r22, r14
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    495e:	e7 cf       	rjmp	.-50     	; 0x492e <vfprintf+0x46>
    4960:	51 2c       	mov	r5, r1
    4962:	31 2c       	mov	r3, r1
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	20 32       	cpi	r18, 0x20	; 32
    4968:	a0 f4       	brcc	.+40     	; 0x4992 <vfprintf+0xaa>
    496a:	8b 32       	cpi	r24, 0x2B	; 43
    496c:	69 f0       	breq	.+26     	; 0x4988 <vfprintf+0xa0>
    496e:	30 f4       	brcc	.+12     	; 0x497c <vfprintf+0x94>
    4970:	80 32       	cpi	r24, 0x20	; 32
    4972:	59 f0       	breq	.+22     	; 0x498a <vfprintf+0xa2>
    4974:	83 32       	cpi	r24, 0x23	; 35
    4976:	69 f4       	brne	.+26     	; 0x4992 <vfprintf+0xaa>
    4978:	20 61       	ori	r18, 0x10	; 16
    497a:	2c c0       	rjmp	.+88     	; 0x49d4 <vfprintf+0xec>
    497c:	8d 32       	cpi	r24, 0x2D	; 45
    497e:	39 f0       	breq	.+14     	; 0x498e <vfprintf+0xa6>
    4980:	80 33       	cpi	r24, 0x30	; 48
    4982:	39 f4       	brne	.+14     	; 0x4992 <vfprintf+0xaa>
    4984:	21 60       	ori	r18, 0x01	; 1
    4986:	26 c0       	rjmp	.+76     	; 0x49d4 <vfprintf+0xec>
    4988:	22 60       	ori	r18, 0x02	; 2
    498a:	24 60       	ori	r18, 0x04	; 4
    498c:	23 c0       	rjmp	.+70     	; 0x49d4 <vfprintf+0xec>
    498e:	28 60       	ori	r18, 0x08	; 8
    4990:	21 c0       	rjmp	.+66     	; 0x49d4 <vfprintf+0xec>
    4992:	27 fd       	sbrc	r18, 7
    4994:	27 c0       	rjmp	.+78     	; 0x49e4 <vfprintf+0xfc>
    4996:	30 ed       	ldi	r19, 0xD0	; 208
    4998:	38 0f       	add	r19, r24
    499a:	3a 30       	cpi	r19, 0x0A	; 10
    499c:	78 f4       	brcc	.+30     	; 0x49bc <vfprintf+0xd4>
    499e:	26 ff       	sbrs	r18, 6
    49a0:	06 c0       	rjmp	.+12     	; 0x49ae <vfprintf+0xc6>
    49a2:	fa e0       	ldi	r31, 0x0A	; 10
    49a4:	5f 9e       	mul	r5, r31
    49a6:	30 0d       	add	r19, r0
    49a8:	11 24       	eor	r1, r1
    49aa:	53 2e       	mov	r5, r19
    49ac:	13 c0       	rjmp	.+38     	; 0x49d4 <vfprintf+0xec>
    49ae:	8a e0       	ldi	r24, 0x0A	; 10
    49b0:	38 9e       	mul	r3, r24
    49b2:	30 0d       	add	r19, r0
    49b4:	11 24       	eor	r1, r1
    49b6:	33 2e       	mov	r3, r19
    49b8:	20 62       	ori	r18, 0x20	; 32
    49ba:	0c c0       	rjmp	.+24     	; 0x49d4 <vfprintf+0xec>
    49bc:	8e 32       	cpi	r24, 0x2E	; 46
    49be:	21 f4       	brne	.+8      	; 0x49c8 <vfprintf+0xe0>
    49c0:	26 fd       	sbrc	r18, 6
    49c2:	6b c1       	rjmp	.+726    	; 0x4c9a <vfprintf+0x3b2>
    49c4:	20 64       	ori	r18, 0x40	; 64
    49c6:	06 c0       	rjmp	.+12     	; 0x49d4 <vfprintf+0xec>
    49c8:	8c 36       	cpi	r24, 0x6C	; 108
    49ca:	11 f4       	brne	.+4      	; 0x49d0 <vfprintf+0xe8>
    49cc:	20 68       	ori	r18, 0x80	; 128
    49ce:	02 c0       	rjmp	.+4      	; 0x49d4 <vfprintf+0xec>
    49d0:	88 36       	cpi	r24, 0x68	; 104
    49d2:	41 f4       	brne	.+16     	; 0x49e4 <vfprintf+0xfc>
    49d4:	f6 01       	movw	r30, r12
    49d6:	93 fd       	sbrc	r25, 3
    49d8:	85 91       	lpm	r24, Z+
    49da:	93 ff       	sbrs	r25, 3
    49dc:	81 91       	ld	r24, Z+
    49de:	6f 01       	movw	r12, r30
    49e0:	81 11       	cpse	r24, r1
    49e2:	c1 cf       	rjmp	.-126    	; 0x4966 <vfprintf+0x7e>
    49e4:	98 2f       	mov	r25, r24
    49e6:	9f 7d       	andi	r25, 0xDF	; 223
    49e8:	95 54       	subi	r25, 0x45	; 69
    49ea:	93 30       	cpi	r25, 0x03	; 3
    49ec:	28 f4       	brcc	.+10     	; 0x49f8 <vfprintf+0x110>
    49ee:	0c 5f       	subi	r16, 0xFC	; 252
    49f0:	1f 4f       	sbci	r17, 0xFF	; 255
    49f2:	ff e3       	ldi	r31, 0x3F	; 63
    49f4:	f9 83       	std	Y+1, r31	; 0x01
    49f6:	0d c0       	rjmp	.+26     	; 0x4a12 <vfprintf+0x12a>
    49f8:	83 36       	cpi	r24, 0x63	; 99
    49fa:	31 f0       	breq	.+12     	; 0x4a08 <vfprintf+0x120>
    49fc:	83 37       	cpi	r24, 0x73	; 115
    49fe:	71 f0       	breq	.+28     	; 0x4a1c <vfprintf+0x134>
    4a00:	83 35       	cpi	r24, 0x53	; 83
    4a02:	09 f0       	breq	.+2      	; 0x4a06 <vfprintf+0x11e>
    4a04:	5b c0       	rjmp	.+182    	; 0x4abc <vfprintf+0x1d4>
    4a06:	22 c0       	rjmp	.+68     	; 0x4a4c <vfprintf+0x164>
    4a08:	f8 01       	movw	r30, r16
    4a0a:	80 81       	ld	r24, Z
    4a0c:	89 83       	std	Y+1, r24	; 0x01
    4a0e:	0e 5f       	subi	r16, 0xFE	; 254
    4a10:	1f 4f       	sbci	r17, 0xFF	; 255
    4a12:	44 24       	eor	r4, r4
    4a14:	43 94       	inc	r4
    4a16:	51 2c       	mov	r5, r1
    4a18:	54 01       	movw	r10, r8
    4a1a:	15 c0       	rjmp	.+42     	; 0x4a46 <vfprintf+0x15e>
    4a1c:	38 01       	movw	r6, r16
    4a1e:	f2 e0       	ldi	r31, 0x02	; 2
    4a20:	6f 0e       	add	r6, r31
    4a22:	71 1c       	adc	r7, r1
    4a24:	f8 01       	movw	r30, r16
    4a26:	a0 80       	ld	r10, Z
    4a28:	b1 80       	ldd	r11, Z+1	; 0x01
    4a2a:	26 ff       	sbrs	r18, 6
    4a2c:	03 c0       	rjmp	.+6      	; 0x4a34 <vfprintf+0x14c>
    4a2e:	65 2d       	mov	r22, r5
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	02 c0       	rjmp	.+4      	; 0x4a38 <vfprintf+0x150>
    4a34:	6f ef       	ldi	r22, 0xFF	; 255
    4a36:	7f ef       	ldi	r23, 0xFF	; 255
    4a38:	c5 01       	movw	r24, r10
    4a3a:	2c 87       	std	Y+12, r18	; 0x0c
    4a3c:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <strnlen>
    4a40:	2c 01       	movw	r4, r24
    4a42:	83 01       	movw	r16, r6
    4a44:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a46:	2f 77       	andi	r18, 0x7F	; 127
    4a48:	22 2e       	mov	r2, r18
    4a4a:	17 c0       	rjmp	.+46     	; 0x4a7a <vfprintf+0x192>
    4a4c:	38 01       	movw	r6, r16
    4a4e:	f2 e0       	ldi	r31, 0x02	; 2
    4a50:	6f 0e       	add	r6, r31
    4a52:	71 1c       	adc	r7, r1
    4a54:	f8 01       	movw	r30, r16
    4a56:	a0 80       	ld	r10, Z
    4a58:	b1 80       	ldd	r11, Z+1	; 0x01
    4a5a:	26 ff       	sbrs	r18, 6
    4a5c:	03 c0       	rjmp	.+6      	; 0x4a64 <vfprintf+0x17c>
    4a5e:	65 2d       	mov	r22, r5
    4a60:	70 e0       	ldi	r23, 0x00	; 0
    4a62:	02 c0       	rjmp	.+4      	; 0x4a68 <vfprintf+0x180>
    4a64:	6f ef       	ldi	r22, 0xFF	; 255
    4a66:	7f ef       	ldi	r23, 0xFF	; 255
    4a68:	c5 01       	movw	r24, r10
    4a6a:	2c 87       	std	Y+12, r18	; 0x0c
    4a6c:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <strnlen_P>
    4a70:	2c 01       	movw	r4, r24
    4a72:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a74:	20 68       	ori	r18, 0x80	; 128
    4a76:	22 2e       	mov	r2, r18
    4a78:	83 01       	movw	r16, r6
    4a7a:	23 fc       	sbrc	r2, 3
    4a7c:	1b c0       	rjmp	.+54     	; 0x4ab4 <vfprintf+0x1cc>
    4a7e:	83 2d       	mov	r24, r3
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	48 16       	cp	r4, r24
    4a84:	59 06       	cpc	r5, r25
    4a86:	b0 f4       	brcc	.+44     	; 0x4ab4 <vfprintf+0x1cc>
    4a88:	b7 01       	movw	r22, r14
    4a8a:	80 e2       	ldi	r24, 0x20	; 32
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4a92:	3a 94       	dec	r3
    4a94:	f4 cf       	rjmp	.-24     	; 0x4a7e <vfprintf+0x196>
    4a96:	f5 01       	movw	r30, r10
    4a98:	27 fc       	sbrc	r2, 7
    4a9a:	85 91       	lpm	r24, Z+
    4a9c:	27 fe       	sbrs	r2, 7
    4a9e:	81 91       	ld	r24, Z+
    4aa0:	5f 01       	movw	r10, r30
    4aa2:	b7 01       	movw	r22, r14
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4aaa:	31 10       	cpse	r3, r1
    4aac:	3a 94       	dec	r3
    4aae:	f1 e0       	ldi	r31, 0x01	; 1
    4ab0:	4f 1a       	sub	r4, r31
    4ab2:	51 08       	sbc	r5, r1
    4ab4:	41 14       	cp	r4, r1
    4ab6:	51 04       	cpc	r5, r1
    4ab8:	71 f7       	brne	.-36     	; 0x4a96 <vfprintf+0x1ae>
    4aba:	e5 c0       	rjmp	.+458    	; 0x4c86 <vfprintf+0x39e>
    4abc:	84 36       	cpi	r24, 0x64	; 100
    4abe:	11 f0       	breq	.+4      	; 0x4ac4 <vfprintf+0x1dc>
    4ac0:	89 36       	cpi	r24, 0x69	; 105
    4ac2:	39 f5       	brne	.+78     	; 0x4b12 <vfprintf+0x22a>
    4ac4:	f8 01       	movw	r30, r16
    4ac6:	27 ff       	sbrs	r18, 7
    4ac8:	07 c0       	rjmp	.+14     	; 0x4ad8 <vfprintf+0x1f0>
    4aca:	60 81       	ld	r22, Z
    4acc:	71 81       	ldd	r23, Z+1	; 0x01
    4ace:	82 81       	ldd	r24, Z+2	; 0x02
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	0c 5f       	subi	r16, 0xFC	; 252
    4ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad6:	08 c0       	rjmp	.+16     	; 0x4ae8 <vfprintf+0x200>
    4ad8:	60 81       	ld	r22, Z
    4ada:	71 81       	ldd	r23, Z+1	; 0x01
    4adc:	07 2e       	mov	r0, r23
    4ade:	00 0c       	add	r0, r0
    4ae0:	88 0b       	sbc	r24, r24
    4ae2:	99 0b       	sbc	r25, r25
    4ae4:	0e 5f       	subi	r16, 0xFE	; 254
    4ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae8:	2f 76       	andi	r18, 0x6F	; 111
    4aea:	72 2e       	mov	r7, r18
    4aec:	97 ff       	sbrs	r25, 7
    4aee:	09 c0       	rjmp	.+18     	; 0x4b02 <vfprintf+0x21a>
    4af0:	90 95       	com	r25
    4af2:	80 95       	com	r24
    4af4:	70 95       	com	r23
    4af6:	61 95       	neg	r22
    4af8:	7f 4f       	sbci	r23, 0xFF	; 255
    4afa:	8f 4f       	sbci	r24, 0xFF	; 255
    4afc:	9f 4f       	sbci	r25, 0xFF	; 255
    4afe:	20 68       	ori	r18, 0x80	; 128
    4b00:	72 2e       	mov	r7, r18
    4b02:	2a e0       	ldi	r18, 0x0A	; 10
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	a4 01       	movw	r20, r8
    4b08:	0e 94 07 28 	call	0x500e	; 0x500e <__ultoa_invert>
    4b0c:	a8 2e       	mov	r10, r24
    4b0e:	a8 18       	sub	r10, r8
    4b10:	44 c0       	rjmp	.+136    	; 0x4b9a <vfprintf+0x2b2>
    4b12:	85 37       	cpi	r24, 0x75	; 117
    4b14:	29 f4       	brne	.+10     	; 0x4b20 <vfprintf+0x238>
    4b16:	2f 7e       	andi	r18, 0xEF	; 239
    4b18:	b2 2e       	mov	r11, r18
    4b1a:	2a e0       	ldi	r18, 0x0A	; 10
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	25 c0       	rjmp	.+74     	; 0x4b6a <vfprintf+0x282>
    4b20:	f2 2f       	mov	r31, r18
    4b22:	f9 7f       	andi	r31, 0xF9	; 249
    4b24:	bf 2e       	mov	r11, r31
    4b26:	8f 36       	cpi	r24, 0x6F	; 111
    4b28:	c1 f0       	breq	.+48     	; 0x4b5a <vfprintf+0x272>
    4b2a:	18 f4       	brcc	.+6      	; 0x4b32 <vfprintf+0x24a>
    4b2c:	88 35       	cpi	r24, 0x58	; 88
    4b2e:	79 f0       	breq	.+30     	; 0x4b4e <vfprintf+0x266>
    4b30:	b4 c0       	rjmp	.+360    	; 0x4c9a <vfprintf+0x3b2>
    4b32:	80 37       	cpi	r24, 0x70	; 112
    4b34:	19 f0       	breq	.+6      	; 0x4b3c <vfprintf+0x254>
    4b36:	88 37       	cpi	r24, 0x78	; 120
    4b38:	21 f0       	breq	.+8      	; 0x4b42 <vfprintf+0x25a>
    4b3a:	af c0       	rjmp	.+350    	; 0x4c9a <vfprintf+0x3b2>
    4b3c:	2f 2f       	mov	r18, r31
    4b3e:	20 61       	ori	r18, 0x10	; 16
    4b40:	b2 2e       	mov	r11, r18
    4b42:	b4 fe       	sbrs	r11, 4
    4b44:	0d c0       	rjmp	.+26     	; 0x4b60 <vfprintf+0x278>
    4b46:	8b 2d       	mov	r24, r11
    4b48:	84 60       	ori	r24, 0x04	; 4
    4b4a:	b8 2e       	mov	r11, r24
    4b4c:	09 c0       	rjmp	.+18     	; 0x4b60 <vfprintf+0x278>
    4b4e:	24 ff       	sbrs	r18, 4
    4b50:	0a c0       	rjmp	.+20     	; 0x4b66 <vfprintf+0x27e>
    4b52:	9f 2f       	mov	r25, r31
    4b54:	96 60       	ori	r25, 0x06	; 6
    4b56:	b9 2e       	mov	r11, r25
    4b58:	06 c0       	rjmp	.+12     	; 0x4b66 <vfprintf+0x27e>
    4b5a:	28 e0       	ldi	r18, 0x08	; 8
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	05 c0       	rjmp	.+10     	; 0x4b6a <vfprintf+0x282>
    4b60:	20 e1       	ldi	r18, 0x10	; 16
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	02 c0       	rjmp	.+4      	; 0x4b6a <vfprintf+0x282>
    4b66:	20 e1       	ldi	r18, 0x10	; 16
    4b68:	32 e0       	ldi	r19, 0x02	; 2
    4b6a:	f8 01       	movw	r30, r16
    4b6c:	b7 fe       	sbrs	r11, 7
    4b6e:	07 c0       	rjmp	.+14     	; 0x4b7e <vfprintf+0x296>
    4b70:	60 81       	ld	r22, Z
    4b72:	71 81       	ldd	r23, Z+1	; 0x01
    4b74:	82 81       	ldd	r24, Z+2	; 0x02
    4b76:	93 81       	ldd	r25, Z+3	; 0x03
    4b78:	0c 5f       	subi	r16, 0xFC	; 252
    4b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b7c:	06 c0       	rjmp	.+12     	; 0x4b8a <vfprintf+0x2a2>
    4b7e:	60 81       	ld	r22, Z
    4b80:	71 81       	ldd	r23, Z+1	; 0x01
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 5f       	subi	r16, 0xFE	; 254
    4b88:	1f 4f       	sbci	r17, 0xFF	; 255
    4b8a:	a4 01       	movw	r20, r8
    4b8c:	0e 94 07 28 	call	0x500e	; 0x500e <__ultoa_invert>
    4b90:	a8 2e       	mov	r10, r24
    4b92:	a8 18       	sub	r10, r8
    4b94:	fb 2d       	mov	r31, r11
    4b96:	ff 77       	andi	r31, 0x7F	; 127
    4b98:	7f 2e       	mov	r7, r31
    4b9a:	76 fe       	sbrs	r7, 6
    4b9c:	0b c0       	rjmp	.+22     	; 0x4bb4 <vfprintf+0x2cc>
    4b9e:	37 2d       	mov	r19, r7
    4ba0:	3e 7f       	andi	r19, 0xFE	; 254
    4ba2:	a5 14       	cp	r10, r5
    4ba4:	50 f4       	brcc	.+20     	; 0x4bba <vfprintf+0x2d2>
    4ba6:	74 fe       	sbrs	r7, 4
    4ba8:	0a c0       	rjmp	.+20     	; 0x4bbe <vfprintf+0x2d6>
    4baa:	72 fc       	sbrc	r7, 2
    4bac:	08 c0       	rjmp	.+16     	; 0x4bbe <vfprintf+0x2d6>
    4bae:	37 2d       	mov	r19, r7
    4bb0:	3e 7e       	andi	r19, 0xEE	; 238
    4bb2:	05 c0       	rjmp	.+10     	; 0x4bbe <vfprintf+0x2d6>
    4bb4:	ba 2c       	mov	r11, r10
    4bb6:	37 2d       	mov	r19, r7
    4bb8:	03 c0       	rjmp	.+6      	; 0x4bc0 <vfprintf+0x2d8>
    4bba:	ba 2c       	mov	r11, r10
    4bbc:	01 c0       	rjmp	.+2      	; 0x4bc0 <vfprintf+0x2d8>
    4bbe:	b5 2c       	mov	r11, r5
    4bc0:	34 ff       	sbrs	r19, 4
    4bc2:	0d c0       	rjmp	.+26     	; 0x4bde <vfprintf+0x2f6>
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	ea 0d       	add	r30, r10
    4bc8:	f1 1d       	adc	r31, r1
    4bca:	80 81       	ld	r24, Z
    4bcc:	80 33       	cpi	r24, 0x30	; 48
    4bce:	11 f4       	brne	.+4      	; 0x4bd4 <vfprintf+0x2ec>
    4bd0:	39 7e       	andi	r19, 0xE9	; 233
    4bd2:	09 c0       	rjmp	.+18     	; 0x4be6 <vfprintf+0x2fe>
    4bd4:	32 ff       	sbrs	r19, 2
    4bd6:	06 c0       	rjmp	.+12     	; 0x4be4 <vfprintf+0x2fc>
    4bd8:	b3 94       	inc	r11
    4bda:	b3 94       	inc	r11
    4bdc:	04 c0       	rjmp	.+8      	; 0x4be6 <vfprintf+0x2fe>
    4bde:	83 2f       	mov	r24, r19
    4be0:	86 78       	andi	r24, 0x86	; 134
    4be2:	09 f0       	breq	.+2      	; 0x4be6 <vfprintf+0x2fe>
    4be4:	b3 94       	inc	r11
    4be6:	33 fd       	sbrc	r19, 3
    4be8:	13 c0       	rjmp	.+38     	; 0x4c10 <vfprintf+0x328>
    4bea:	30 ff       	sbrs	r19, 0
    4bec:	06 c0       	rjmp	.+12     	; 0x4bfa <vfprintf+0x312>
    4bee:	5a 2c       	mov	r5, r10
    4bf0:	b3 14       	cp	r11, r3
    4bf2:	18 f4       	brcc	.+6      	; 0x4bfa <vfprintf+0x312>
    4bf4:	53 0c       	add	r5, r3
    4bf6:	5b 18       	sub	r5, r11
    4bf8:	b3 2c       	mov	r11, r3
    4bfa:	b3 14       	cp	r11, r3
    4bfc:	68 f4       	brcc	.+26     	; 0x4c18 <vfprintf+0x330>
    4bfe:	b7 01       	movw	r22, r14
    4c00:	80 e2       	ldi	r24, 0x20	; 32
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	3c 87       	std	Y+12, r19	; 0x0c
    4c06:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4c0a:	b3 94       	inc	r11
    4c0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c0e:	f5 cf       	rjmp	.-22     	; 0x4bfa <vfprintf+0x312>
    4c10:	b3 14       	cp	r11, r3
    4c12:	10 f4       	brcc	.+4      	; 0x4c18 <vfprintf+0x330>
    4c14:	3b 18       	sub	r3, r11
    4c16:	01 c0       	rjmp	.+2      	; 0x4c1a <vfprintf+0x332>
    4c18:	31 2c       	mov	r3, r1
    4c1a:	34 ff       	sbrs	r19, 4
    4c1c:	12 c0       	rjmp	.+36     	; 0x4c42 <vfprintf+0x35a>
    4c1e:	b7 01       	movw	r22, r14
    4c20:	80 e3       	ldi	r24, 0x30	; 48
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	3c 87       	std	Y+12, r19	; 0x0c
    4c26:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4c2a:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c2c:	32 ff       	sbrs	r19, 2
    4c2e:	17 c0       	rjmp	.+46     	; 0x4c5e <vfprintf+0x376>
    4c30:	31 fd       	sbrc	r19, 1
    4c32:	03 c0       	rjmp	.+6      	; 0x4c3a <vfprintf+0x352>
    4c34:	88 e7       	ldi	r24, 0x78	; 120
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	02 c0       	rjmp	.+4      	; 0x4c3e <vfprintf+0x356>
    4c3a:	88 e5       	ldi	r24, 0x58	; 88
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	b7 01       	movw	r22, r14
    4c40:	0c c0       	rjmp	.+24     	; 0x4c5a <vfprintf+0x372>
    4c42:	83 2f       	mov	r24, r19
    4c44:	86 78       	andi	r24, 0x86	; 134
    4c46:	59 f0       	breq	.+22     	; 0x4c5e <vfprintf+0x376>
    4c48:	31 ff       	sbrs	r19, 1
    4c4a:	02 c0       	rjmp	.+4      	; 0x4c50 <vfprintf+0x368>
    4c4c:	8b e2       	ldi	r24, 0x2B	; 43
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <vfprintf+0x36a>
    4c50:	80 e2       	ldi	r24, 0x20	; 32
    4c52:	37 fd       	sbrc	r19, 7
    4c54:	8d e2       	ldi	r24, 0x2D	; 45
    4c56:	b7 01       	movw	r22, r14
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4c5e:	a5 14       	cp	r10, r5
    4c60:	38 f4       	brcc	.+14     	; 0x4c70 <vfprintf+0x388>
    4c62:	b7 01       	movw	r22, r14
    4c64:	80 e3       	ldi	r24, 0x30	; 48
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4c6c:	5a 94       	dec	r5
    4c6e:	f7 cf       	rjmp	.-18     	; 0x4c5e <vfprintf+0x376>
    4c70:	aa 94       	dec	r10
    4c72:	f4 01       	movw	r30, r8
    4c74:	ea 0d       	add	r30, r10
    4c76:	f1 1d       	adc	r31, r1
    4c78:	80 81       	ld	r24, Z
    4c7a:	b7 01       	movw	r22, r14
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4c82:	a1 10       	cpse	r10, r1
    4c84:	f5 cf       	rjmp	.-22     	; 0x4c70 <vfprintf+0x388>
    4c86:	33 20       	and	r3, r3
    4c88:	09 f4       	brne	.+2      	; 0x4c8c <vfprintf+0x3a4>
    4c8a:	51 ce       	rjmp	.-862    	; 0x492e <vfprintf+0x46>
    4c8c:	b7 01       	movw	r22, r14
    4c8e:	80 e2       	ldi	r24, 0x20	; 32
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <fputc>
    4c96:	3a 94       	dec	r3
    4c98:	f6 cf       	rjmp	.-20     	; 0x4c86 <vfprintf+0x39e>
    4c9a:	f7 01       	movw	r30, r14
    4c9c:	86 81       	ldd	r24, Z+6	; 0x06
    4c9e:	97 81       	ldd	r25, Z+7	; 0x07
    4ca0:	02 c0       	rjmp	.+4      	; 0x4ca6 <vfprintf+0x3be>
    4ca2:	8f ef       	ldi	r24, 0xFF	; 255
    4ca4:	9f ef       	ldi	r25, 0xFF	; 255
    4ca6:	2c 96       	adiw	r28, 0x0c	; 12
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	de bf       	out	0x3e, r29	; 62
    4cac:	df 91       	pop	r29
    4cae:	cf 91       	pop	r28
    4cb0:	1f 91       	pop	r17
    4cb2:	0f 91       	pop	r16
    4cb4:	ff 90       	pop	r15
    4cb6:	ef 90       	pop	r14
    4cb8:	df 90       	pop	r13
    4cba:	cf 90       	pop	r12
    4cbc:	bf 90       	pop	r11
    4cbe:	af 90       	pop	r10
    4cc0:	9f 90       	pop	r9
    4cc2:	8f 90       	pop	r8
    4cc4:	7f 90       	pop	r7
    4cc6:	6f 90       	pop	r6
    4cc8:	5f 90       	pop	r5
    4cca:	4f 90       	pop	r4
    4ccc:	3f 90       	pop	r3
    4cce:	2f 90       	pop	r2
    4cd0:	08 95       	ret

00004cd2 <calloc>:
    4cd2:	0f 93       	push	r16
    4cd4:	1f 93       	push	r17
    4cd6:	cf 93       	push	r28
    4cd8:	df 93       	push	r29
    4cda:	86 9f       	mul	r24, r22
    4cdc:	80 01       	movw	r16, r0
    4cde:	87 9f       	mul	r24, r23
    4ce0:	10 0d       	add	r17, r0
    4ce2:	96 9f       	mul	r25, r22
    4ce4:	10 0d       	add	r17, r0
    4ce6:	11 24       	eor	r1, r1
    4ce8:	c8 01       	movw	r24, r16
    4cea:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <malloc>
    4cee:	ec 01       	movw	r28, r24
    4cf0:	00 97       	sbiw	r24, 0x00	; 0
    4cf2:	29 f0       	breq	.+10     	; 0x4cfe <calloc+0x2c>
    4cf4:	a8 01       	movw	r20, r16
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <memset>
    4cfe:	ce 01       	movw	r24, r28
    4d00:	df 91       	pop	r29
    4d02:	cf 91       	pop	r28
    4d04:	1f 91       	pop	r17
    4d06:	0f 91       	pop	r16
    4d08:	08 95       	ret

00004d0a <malloc>:
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	82 30       	cpi	r24, 0x02	; 2
    4d10:	91 05       	cpc	r25, r1
    4d12:	10 f4       	brcc	.+4      	; 0x4d18 <malloc+0xe>
    4d14:	82 e0       	ldi	r24, 0x02	; 2
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	e0 91 90 24 	lds	r30, 0x2490	; 0x802490 <__flp>
    4d1c:	f0 91 91 24 	lds	r31, 0x2491	; 0x802491 <__flp+0x1>
    4d20:	20 e0       	ldi	r18, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	c0 e0       	ldi	r28, 0x00	; 0
    4d26:	d0 e0       	ldi	r29, 0x00	; 0
    4d28:	30 97       	sbiw	r30, 0x00	; 0
    4d2a:	11 f1       	breq	.+68     	; 0x4d70 <malloc+0x66>
    4d2c:	40 81       	ld	r20, Z
    4d2e:	51 81       	ldd	r21, Z+1	; 0x01
    4d30:	48 17       	cp	r20, r24
    4d32:	59 07       	cpc	r21, r25
    4d34:	c0 f0       	brcs	.+48     	; 0x4d66 <malloc+0x5c>
    4d36:	48 17       	cp	r20, r24
    4d38:	59 07       	cpc	r21, r25
    4d3a:	61 f4       	brne	.+24     	; 0x4d54 <malloc+0x4a>
    4d3c:	82 81       	ldd	r24, Z+2	; 0x02
    4d3e:	93 81       	ldd	r25, Z+3	; 0x03
    4d40:	20 97       	sbiw	r28, 0x00	; 0
    4d42:	19 f0       	breq	.+6      	; 0x4d4a <malloc+0x40>
    4d44:	8a 83       	std	Y+2, r24	; 0x02
    4d46:	9b 83       	std	Y+3, r25	; 0x03
    4d48:	2b c0       	rjmp	.+86     	; 0x4da0 <malloc+0x96>
    4d4a:	80 93 90 24 	sts	0x2490, r24	; 0x802490 <__flp>
    4d4e:	90 93 91 24 	sts	0x2491, r25	; 0x802491 <__flp+0x1>
    4d52:	26 c0       	rjmp	.+76     	; 0x4da0 <malloc+0x96>
    4d54:	21 15       	cp	r18, r1
    4d56:	31 05       	cpc	r19, r1
    4d58:	19 f0       	breq	.+6      	; 0x4d60 <malloc+0x56>
    4d5a:	42 17       	cp	r20, r18
    4d5c:	53 07       	cpc	r21, r19
    4d5e:	18 f4       	brcc	.+6      	; 0x4d66 <malloc+0x5c>
    4d60:	9a 01       	movw	r18, r20
    4d62:	be 01       	movw	r22, r28
    4d64:	df 01       	movw	r26, r30
    4d66:	ef 01       	movw	r28, r30
    4d68:	02 80       	ldd	r0, Z+2	; 0x02
    4d6a:	f3 81       	ldd	r31, Z+3	; 0x03
    4d6c:	e0 2d       	mov	r30, r0
    4d6e:	dc cf       	rjmp	.-72     	; 0x4d28 <malloc+0x1e>
    4d70:	21 15       	cp	r18, r1
    4d72:	31 05       	cpc	r19, r1
    4d74:	09 f1       	breq	.+66     	; 0x4db8 <malloc+0xae>
    4d76:	28 1b       	sub	r18, r24
    4d78:	39 0b       	sbc	r19, r25
    4d7a:	24 30       	cpi	r18, 0x04	; 4
    4d7c:	31 05       	cpc	r19, r1
    4d7e:	90 f4       	brcc	.+36     	; 0x4da4 <malloc+0x9a>
    4d80:	12 96       	adiw	r26, 0x02	; 2
    4d82:	8d 91       	ld	r24, X+
    4d84:	9c 91       	ld	r25, X
    4d86:	13 97       	sbiw	r26, 0x03	; 3
    4d88:	61 15       	cp	r22, r1
    4d8a:	71 05       	cpc	r23, r1
    4d8c:	21 f0       	breq	.+8      	; 0x4d96 <malloc+0x8c>
    4d8e:	fb 01       	movw	r30, r22
    4d90:	82 83       	std	Z+2, r24	; 0x02
    4d92:	93 83       	std	Z+3, r25	; 0x03
    4d94:	04 c0       	rjmp	.+8      	; 0x4d9e <malloc+0x94>
    4d96:	80 93 90 24 	sts	0x2490, r24	; 0x802490 <__flp>
    4d9a:	90 93 91 24 	sts	0x2491, r25	; 0x802491 <__flp+0x1>
    4d9e:	fd 01       	movw	r30, r26
    4da0:	32 96       	adiw	r30, 0x02	; 2
    4da2:	44 c0       	rjmp	.+136    	; 0x4e2c <malloc+0x122>
    4da4:	fd 01       	movw	r30, r26
    4da6:	e2 0f       	add	r30, r18
    4da8:	f3 1f       	adc	r31, r19
    4daa:	81 93       	st	Z+, r24
    4dac:	91 93       	st	Z+, r25
    4dae:	22 50       	subi	r18, 0x02	; 2
    4db0:	31 09       	sbc	r19, r1
    4db2:	2d 93       	st	X+, r18
    4db4:	3c 93       	st	X, r19
    4db6:	3a c0       	rjmp	.+116    	; 0x4e2c <malloc+0x122>
    4db8:	20 91 8e 24 	lds	r18, 0x248E	; 0x80248e <__brkval>
    4dbc:	30 91 8f 24 	lds	r19, 0x248F	; 0x80248f <__brkval+0x1>
    4dc0:	23 2b       	or	r18, r19
    4dc2:	41 f4       	brne	.+16     	; 0x4dd4 <malloc+0xca>
    4dc4:	20 91 d4 20 	lds	r18, 0x20D4	; 0x8020d4 <__malloc_heap_start>
    4dc8:	30 91 d5 20 	lds	r19, 0x20D5	; 0x8020d5 <__malloc_heap_start+0x1>
    4dcc:	20 93 8e 24 	sts	0x248E, r18	; 0x80248e <__brkval>
    4dd0:	30 93 8f 24 	sts	0x248F, r19	; 0x80248f <__brkval+0x1>
    4dd4:	20 91 d2 20 	lds	r18, 0x20D2	; 0x8020d2 <__malloc_heap_end>
    4dd8:	30 91 d3 20 	lds	r19, 0x20D3	; 0x8020d3 <__malloc_heap_end+0x1>
    4ddc:	21 15       	cp	r18, r1
    4dde:	31 05       	cpc	r19, r1
    4de0:	41 f4       	brne	.+16     	; 0x4df2 <malloc+0xe8>
    4de2:	2d b7       	in	r18, 0x3d	; 61
    4de4:	3e b7       	in	r19, 0x3e	; 62
    4de6:	40 91 d6 20 	lds	r20, 0x20D6	; 0x8020d6 <__malloc_margin>
    4dea:	50 91 d7 20 	lds	r21, 0x20D7	; 0x8020d7 <__malloc_margin+0x1>
    4dee:	24 1b       	sub	r18, r20
    4df0:	35 0b       	sbc	r19, r21
    4df2:	e0 91 8e 24 	lds	r30, 0x248E	; 0x80248e <__brkval>
    4df6:	f0 91 8f 24 	lds	r31, 0x248F	; 0x80248f <__brkval+0x1>
    4dfa:	e2 17       	cp	r30, r18
    4dfc:	f3 07       	cpc	r31, r19
    4dfe:	a0 f4       	brcc	.+40     	; 0x4e28 <malloc+0x11e>
    4e00:	2e 1b       	sub	r18, r30
    4e02:	3f 0b       	sbc	r19, r31
    4e04:	28 17       	cp	r18, r24
    4e06:	39 07       	cpc	r19, r25
    4e08:	78 f0       	brcs	.+30     	; 0x4e28 <malloc+0x11e>
    4e0a:	ac 01       	movw	r20, r24
    4e0c:	4e 5f       	subi	r20, 0xFE	; 254
    4e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e10:	24 17       	cp	r18, r20
    4e12:	35 07       	cpc	r19, r21
    4e14:	48 f0       	brcs	.+18     	; 0x4e28 <malloc+0x11e>
    4e16:	4e 0f       	add	r20, r30
    4e18:	5f 1f       	adc	r21, r31
    4e1a:	40 93 8e 24 	sts	0x248E, r20	; 0x80248e <__brkval>
    4e1e:	50 93 8f 24 	sts	0x248F, r21	; 0x80248f <__brkval+0x1>
    4e22:	81 93       	st	Z+, r24
    4e24:	91 93       	st	Z+, r25
    4e26:	02 c0       	rjmp	.+4      	; 0x4e2c <malloc+0x122>
    4e28:	e0 e0       	ldi	r30, 0x00	; 0
    4e2a:	f0 e0       	ldi	r31, 0x00	; 0
    4e2c:	cf 01       	movw	r24, r30
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	08 95       	ret

00004e34 <free>:
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	00 97       	sbiw	r24, 0x00	; 0
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <free+0xe>
    4e40:	8c c0       	rjmp	.+280    	; 0x4f5a <free+0x126>
    4e42:	fc 01       	movw	r30, r24
    4e44:	32 97       	sbiw	r30, 0x02	; 2
    4e46:	12 82       	std	Z+2, r1	; 0x02
    4e48:	13 82       	std	Z+3, r1	; 0x03
    4e4a:	00 91 90 24 	lds	r16, 0x2490	; 0x802490 <__flp>
    4e4e:	10 91 91 24 	lds	r17, 0x2491	; 0x802491 <__flp+0x1>
    4e52:	01 15       	cp	r16, r1
    4e54:	11 05       	cpc	r17, r1
    4e56:	81 f4       	brne	.+32     	; 0x4e78 <free+0x44>
    4e58:	20 81       	ld	r18, Z
    4e5a:	31 81       	ldd	r19, Z+1	; 0x01
    4e5c:	82 0f       	add	r24, r18
    4e5e:	93 1f       	adc	r25, r19
    4e60:	20 91 8e 24 	lds	r18, 0x248E	; 0x80248e <__brkval>
    4e64:	30 91 8f 24 	lds	r19, 0x248F	; 0x80248f <__brkval+0x1>
    4e68:	28 17       	cp	r18, r24
    4e6a:	39 07       	cpc	r19, r25
    4e6c:	79 f5       	brne	.+94     	; 0x4ecc <free+0x98>
    4e6e:	e0 93 8e 24 	sts	0x248E, r30	; 0x80248e <__brkval>
    4e72:	f0 93 8f 24 	sts	0x248F, r31	; 0x80248f <__brkval+0x1>
    4e76:	71 c0       	rjmp	.+226    	; 0x4f5a <free+0x126>
    4e78:	d8 01       	movw	r26, r16
    4e7a:	40 e0       	ldi	r20, 0x00	; 0
    4e7c:	50 e0       	ldi	r21, 0x00	; 0
    4e7e:	ae 17       	cp	r26, r30
    4e80:	bf 07       	cpc	r27, r31
    4e82:	50 f4       	brcc	.+20     	; 0x4e98 <free+0x64>
    4e84:	12 96       	adiw	r26, 0x02	; 2
    4e86:	2d 91       	ld	r18, X+
    4e88:	3c 91       	ld	r19, X
    4e8a:	13 97       	sbiw	r26, 0x03	; 3
    4e8c:	ad 01       	movw	r20, r26
    4e8e:	21 15       	cp	r18, r1
    4e90:	31 05       	cpc	r19, r1
    4e92:	09 f1       	breq	.+66     	; 0x4ed6 <free+0xa2>
    4e94:	d9 01       	movw	r26, r18
    4e96:	f3 cf       	rjmp	.-26     	; 0x4e7e <free+0x4a>
    4e98:	9d 01       	movw	r18, r26
    4e9a:	da 01       	movw	r26, r20
    4e9c:	22 83       	std	Z+2, r18	; 0x02
    4e9e:	33 83       	std	Z+3, r19	; 0x03
    4ea0:	60 81       	ld	r22, Z
    4ea2:	71 81       	ldd	r23, Z+1	; 0x01
    4ea4:	86 0f       	add	r24, r22
    4ea6:	97 1f       	adc	r25, r23
    4ea8:	82 17       	cp	r24, r18
    4eaa:	93 07       	cpc	r25, r19
    4eac:	69 f4       	brne	.+26     	; 0x4ec8 <free+0x94>
    4eae:	ec 01       	movw	r28, r24
    4eb0:	28 81       	ld	r18, Y
    4eb2:	39 81       	ldd	r19, Y+1	; 0x01
    4eb4:	26 0f       	add	r18, r22
    4eb6:	37 1f       	adc	r19, r23
    4eb8:	2e 5f       	subi	r18, 0xFE	; 254
    4eba:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebc:	20 83       	st	Z, r18
    4ebe:	31 83       	std	Z+1, r19	; 0x01
    4ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec4:	82 83       	std	Z+2, r24	; 0x02
    4ec6:	93 83       	std	Z+3, r25	; 0x03
    4ec8:	45 2b       	or	r20, r21
    4eca:	29 f4       	brne	.+10     	; 0x4ed6 <free+0xa2>
    4ecc:	e0 93 90 24 	sts	0x2490, r30	; 0x802490 <__flp>
    4ed0:	f0 93 91 24 	sts	0x2491, r31	; 0x802491 <__flp+0x1>
    4ed4:	42 c0       	rjmp	.+132    	; 0x4f5a <free+0x126>
    4ed6:	12 96       	adiw	r26, 0x02	; 2
    4ed8:	ed 93       	st	X+, r30
    4eda:	fc 93       	st	X, r31
    4edc:	13 97       	sbiw	r26, 0x03	; 3
    4ede:	ed 01       	movw	r28, r26
    4ee0:	49 91       	ld	r20, Y+
    4ee2:	59 91       	ld	r21, Y+
    4ee4:	9e 01       	movw	r18, r28
    4ee6:	24 0f       	add	r18, r20
    4ee8:	35 1f       	adc	r19, r21
    4eea:	e2 17       	cp	r30, r18
    4eec:	f3 07       	cpc	r31, r19
    4eee:	71 f4       	brne	.+28     	; 0x4f0c <free+0xd8>
    4ef0:	80 81       	ld	r24, Z
    4ef2:	91 81       	ldd	r25, Z+1	; 0x01
    4ef4:	84 0f       	add	r24, r20
    4ef6:	95 1f       	adc	r25, r21
    4ef8:	02 96       	adiw	r24, 0x02	; 2
    4efa:	8d 93       	st	X+, r24
    4efc:	9c 93       	st	X, r25
    4efe:	11 97       	sbiw	r26, 0x01	; 1
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	93 81       	ldd	r25, Z+3	; 0x03
    4f04:	12 96       	adiw	r26, 0x02	; 2
    4f06:	8d 93       	st	X+, r24
    4f08:	9c 93       	st	X, r25
    4f0a:	13 97       	sbiw	r26, 0x03	; 3
    4f0c:	e0 e0       	ldi	r30, 0x00	; 0
    4f0e:	f0 e0       	ldi	r31, 0x00	; 0
    4f10:	d8 01       	movw	r26, r16
    4f12:	12 96       	adiw	r26, 0x02	; 2
    4f14:	8d 91       	ld	r24, X+
    4f16:	9c 91       	ld	r25, X
    4f18:	13 97       	sbiw	r26, 0x03	; 3
    4f1a:	00 97       	sbiw	r24, 0x00	; 0
    4f1c:	19 f0       	breq	.+6      	; 0x4f24 <free+0xf0>
    4f1e:	f8 01       	movw	r30, r16
    4f20:	8c 01       	movw	r16, r24
    4f22:	f6 cf       	rjmp	.-20     	; 0x4f10 <free+0xdc>
    4f24:	8d 91       	ld	r24, X+
    4f26:	9c 91       	ld	r25, X
    4f28:	98 01       	movw	r18, r16
    4f2a:	2e 5f       	subi	r18, 0xFE	; 254
    4f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2e:	82 0f       	add	r24, r18
    4f30:	93 1f       	adc	r25, r19
    4f32:	20 91 8e 24 	lds	r18, 0x248E	; 0x80248e <__brkval>
    4f36:	30 91 8f 24 	lds	r19, 0x248F	; 0x80248f <__brkval+0x1>
    4f3a:	28 17       	cp	r18, r24
    4f3c:	39 07       	cpc	r19, r25
    4f3e:	69 f4       	brne	.+26     	; 0x4f5a <free+0x126>
    4f40:	30 97       	sbiw	r30, 0x00	; 0
    4f42:	29 f4       	brne	.+10     	; 0x4f4e <free+0x11a>
    4f44:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <__flp>
    4f48:	10 92 91 24 	sts	0x2491, r1	; 0x802491 <__flp+0x1>
    4f4c:	02 c0       	rjmp	.+4      	; 0x4f52 <free+0x11e>
    4f4e:	12 82       	std	Z+2, r1	; 0x02
    4f50:	13 82       	std	Z+3, r1	; 0x03
    4f52:	00 93 8e 24 	sts	0x248E, r16	; 0x80248e <__brkval>
    4f56:	10 93 8f 24 	sts	0x248F, r17	; 0x80248f <__brkval+0x1>
    4f5a:	df 91       	pop	r29
    4f5c:	cf 91       	pop	r28
    4f5e:	1f 91       	pop	r17
    4f60:	0f 91       	pop	r16
    4f62:	08 95       	ret

00004f64 <strnlen_P>:
    4f64:	fc 01       	movw	r30, r24
    4f66:	05 90       	lpm	r0, Z+
    4f68:	61 50       	subi	r22, 0x01	; 1
    4f6a:	70 40       	sbci	r23, 0x00	; 0
    4f6c:	01 10       	cpse	r0, r1
    4f6e:	d8 f7       	brcc	.-10     	; 0x4f66 <strnlen_P+0x2>
    4f70:	80 95       	com	r24
    4f72:	90 95       	com	r25
    4f74:	8e 0f       	add	r24, r30
    4f76:	9f 1f       	adc	r25, r31
    4f78:	08 95       	ret

00004f7a <memset>:
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	01 c0       	rjmp	.+2      	; 0x4f80 <memset+0x6>
    4f7e:	6d 93       	st	X+, r22
    4f80:	41 50       	subi	r20, 0x01	; 1
    4f82:	50 40       	sbci	r21, 0x00	; 0
    4f84:	e0 f7       	brcc	.-8      	; 0x4f7e <memset+0x4>
    4f86:	08 95       	ret

00004f88 <strnlen>:
    4f88:	fc 01       	movw	r30, r24
    4f8a:	61 50       	subi	r22, 0x01	; 1
    4f8c:	70 40       	sbci	r23, 0x00	; 0
    4f8e:	01 90       	ld	r0, Z+
    4f90:	01 10       	cpse	r0, r1
    4f92:	d8 f7       	brcc	.-10     	; 0x4f8a <strnlen+0x2>
    4f94:	80 95       	com	r24
    4f96:	90 95       	com	r25
    4f98:	8e 0f       	add	r24, r30
    4f9a:	9f 1f       	adc	r25, r31
    4f9c:	08 95       	ret

00004f9e <fputc>:
    4f9e:	0f 93       	push	r16
    4fa0:	1f 93       	push	r17
    4fa2:	cf 93       	push	r28
    4fa4:	df 93       	push	r29
    4fa6:	fb 01       	movw	r30, r22
    4fa8:	23 81       	ldd	r18, Z+3	; 0x03
    4faa:	21 fd       	sbrc	r18, 1
    4fac:	03 c0       	rjmp	.+6      	; 0x4fb4 <fputc+0x16>
    4fae:	8f ef       	ldi	r24, 0xFF	; 255
    4fb0:	9f ef       	ldi	r25, 0xFF	; 255
    4fb2:	28 c0       	rjmp	.+80     	; 0x5004 <fputc+0x66>
    4fb4:	22 ff       	sbrs	r18, 2
    4fb6:	16 c0       	rjmp	.+44     	; 0x4fe4 <fputc+0x46>
    4fb8:	46 81       	ldd	r20, Z+6	; 0x06
    4fba:	57 81       	ldd	r21, Z+7	; 0x07
    4fbc:	24 81       	ldd	r18, Z+4	; 0x04
    4fbe:	35 81       	ldd	r19, Z+5	; 0x05
    4fc0:	42 17       	cp	r20, r18
    4fc2:	53 07       	cpc	r21, r19
    4fc4:	44 f4       	brge	.+16     	; 0x4fd6 <fputc+0x38>
    4fc6:	a0 81       	ld	r26, Z
    4fc8:	b1 81       	ldd	r27, Z+1	; 0x01
    4fca:	9d 01       	movw	r18, r26
    4fcc:	2f 5f       	subi	r18, 0xFF	; 255
    4fce:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd0:	20 83       	st	Z, r18
    4fd2:	31 83       	std	Z+1, r19	; 0x01
    4fd4:	8c 93       	st	X, r24
    4fd6:	26 81       	ldd	r18, Z+6	; 0x06
    4fd8:	37 81       	ldd	r19, Z+7	; 0x07
    4fda:	2f 5f       	subi	r18, 0xFF	; 255
    4fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4fde:	26 83       	std	Z+6, r18	; 0x06
    4fe0:	37 83       	std	Z+7, r19	; 0x07
    4fe2:	10 c0       	rjmp	.+32     	; 0x5004 <fputc+0x66>
    4fe4:	eb 01       	movw	r28, r22
    4fe6:	09 2f       	mov	r16, r25
    4fe8:	18 2f       	mov	r17, r24
    4fea:	00 84       	ldd	r0, Z+8	; 0x08
    4fec:	f1 85       	ldd	r31, Z+9	; 0x09
    4fee:	e0 2d       	mov	r30, r0
    4ff0:	19 95       	eicall
    4ff2:	89 2b       	or	r24, r25
    4ff4:	e1 f6       	brne	.-72     	; 0x4fae <fputc+0x10>
    4ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    4ffa:	01 96       	adiw	r24, 0x01	; 1
    4ffc:	8e 83       	std	Y+6, r24	; 0x06
    4ffe:	9f 83       	std	Y+7, r25	; 0x07
    5000:	81 2f       	mov	r24, r17
    5002:	90 2f       	mov	r25, r16
    5004:	df 91       	pop	r29
    5006:	cf 91       	pop	r28
    5008:	1f 91       	pop	r17
    500a:	0f 91       	pop	r16
    500c:	08 95       	ret

0000500e <__ultoa_invert>:
    500e:	fa 01       	movw	r30, r20
    5010:	aa 27       	eor	r26, r26
    5012:	28 30       	cpi	r18, 0x08	; 8
    5014:	51 f1       	breq	.+84     	; 0x506a <__ultoa_invert+0x5c>
    5016:	20 31       	cpi	r18, 0x10	; 16
    5018:	81 f1       	breq	.+96     	; 0x507a <__ultoa_invert+0x6c>
    501a:	e8 94       	clt
    501c:	6f 93       	push	r22
    501e:	6e 7f       	andi	r22, 0xFE	; 254
    5020:	6e 5f       	subi	r22, 0xFE	; 254
    5022:	7f 4f       	sbci	r23, 0xFF	; 255
    5024:	8f 4f       	sbci	r24, 0xFF	; 255
    5026:	9f 4f       	sbci	r25, 0xFF	; 255
    5028:	af 4f       	sbci	r26, 0xFF	; 255
    502a:	b1 e0       	ldi	r27, 0x01	; 1
    502c:	3e d0       	rcall	.+124    	; 0x50aa <__ultoa_invert+0x9c>
    502e:	b4 e0       	ldi	r27, 0x04	; 4
    5030:	3c d0       	rcall	.+120    	; 0x50aa <__ultoa_invert+0x9c>
    5032:	67 0f       	add	r22, r23
    5034:	78 1f       	adc	r23, r24
    5036:	89 1f       	adc	r24, r25
    5038:	9a 1f       	adc	r25, r26
    503a:	a1 1d       	adc	r26, r1
    503c:	68 0f       	add	r22, r24
    503e:	79 1f       	adc	r23, r25
    5040:	8a 1f       	adc	r24, r26
    5042:	91 1d       	adc	r25, r1
    5044:	a1 1d       	adc	r26, r1
    5046:	6a 0f       	add	r22, r26
    5048:	71 1d       	adc	r23, r1
    504a:	81 1d       	adc	r24, r1
    504c:	91 1d       	adc	r25, r1
    504e:	a1 1d       	adc	r26, r1
    5050:	20 d0       	rcall	.+64     	; 0x5092 <__ultoa_invert+0x84>
    5052:	09 f4       	brne	.+2      	; 0x5056 <__ultoa_invert+0x48>
    5054:	68 94       	set
    5056:	3f 91       	pop	r19
    5058:	2a e0       	ldi	r18, 0x0A	; 10
    505a:	26 9f       	mul	r18, r22
    505c:	11 24       	eor	r1, r1
    505e:	30 19       	sub	r19, r0
    5060:	30 5d       	subi	r19, 0xD0	; 208
    5062:	31 93       	st	Z+, r19
    5064:	de f6       	brtc	.-74     	; 0x501c <__ultoa_invert+0xe>
    5066:	cf 01       	movw	r24, r30
    5068:	08 95       	ret
    506a:	46 2f       	mov	r20, r22
    506c:	47 70       	andi	r20, 0x07	; 7
    506e:	40 5d       	subi	r20, 0xD0	; 208
    5070:	41 93       	st	Z+, r20
    5072:	b3 e0       	ldi	r27, 0x03	; 3
    5074:	0f d0       	rcall	.+30     	; 0x5094 <__ultoa_invert+0x86>
    5076:	c9 f7       	brne	.-14     	; 0x506a <__ultoa_invert+0x5c>
    5078:	f6 cf       	rjmp	.-20     	; 0x5066 <__ultoa_invert+0x58>
    507a:	46 2f       	mov	r20, r22
    507c:	4f 70       	andi	r20, 0x0F	; 15
    507e:	40 5d       	subi	r20, 0xD0	; 208
    5080:	4a 33       	cpi	r20, 0x3A	; 58
    5082:	18 f0       	brcs	.+6      	; 0x508a <__ultoa_invert+0x7c>
    5084:	49 5d       	subi	r20, 0xD9	; 217
    5086:	31 fd       	sbrc	r19, 1
    5088:	40 52       	subi	r20, 0x20	; 32
    508a:	41 93       	st	Z+, r20
    508c:	02 d0       	rcall	.+4      	; 0x5092 <__ultoa_invert+0x84>
    508e:	a9 f7       	brne	.-22     	; 0x507a <__ultoa_invert+0x6c>
    5090:	ea cf       	rjmp	.-44     	; 0x5066 <__ultoa_invert+0x58>
    5092:	b4 e0       	ldi	r27, 0x04	; 4
    5094:	a6 95       	lsr	r26
    5096:	97 95       	ror	r25
    5098:	87 95       	ror	r24
    509a:	77 95       	ror	r23
    509c:	67 95       	ror	r22
    509e:	ba 95       	dec	r27
    50a0:	c9 f7       	brne	.-14     	; 0x5094 <__ultoa_invert+0x86>
    50a2:	00 97       	sbiw	r24, 0x00	; 0
    50a4:	61 05       	cpc	r22, r1
    50a6:	71 05       	cpc	r23, r1
    50a8:	08 95       	ret
    50aa:	9b 01       	movw	r18, r22
    50ac:	ac 01       	movw	r20, r24
    50ae:	0a 2e       	mov	r0, r26
    50b0:	06 94       	lsr	r0
    50b2:	57 95       	ror	r21
    50b4:	47 95       	ror	r20
    50b6:	37 95       	ror	r19
    50b8:	27 95       	ror	r18
    50ba:	ba 95       	dec	r27
    50bc:	c9 f7       	brne	.-14     	; 0x50b0 <__ultoa_invert+0xa2>
    50be:	62 0f       	add	r22, r18
    50c0:	73 1f       	adc	r23, r19
    50c2:	84 1f       	adc	r24, r20
    50c4:	95 1f       	adc	r25, r21
    50c6:	a0 1d       	adc	r26, r0
    50c8:	08 95       	ret

000050ca <_exit>:
    50ca:	f8 94       	cli

000050cc <__stop_program>:
    50cc:	ff cf       	rjmp	.-2      	; 0x50cc <__stop_program>


wiznetweb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00802000  000011a2  00001236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000206  00802022  00802022  00001258  2**0
                  ALLOC
  3 .stab         00000f6c  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003a9  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e8  00000000  00000000  00002570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001305  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000662  00000000  00000000  0000395d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095b  00000000  00000000  00003fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  0000491c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4c  00000000  00000000  00005057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00005fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__ctors_end>
       4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
       8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
       c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      10:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      14:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      18:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      1c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      20:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      24:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      28:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      2c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      30:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      34:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      38:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      3c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      40:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      44:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      48:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      4c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      50:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      54:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      58:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      5c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      60:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      64:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      68:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      6c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      70:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      74:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      78:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      7c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      80:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      84:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      88:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      8c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      90:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      94:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      98:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      9c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      a0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      a4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      a8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      ac:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      b0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      b4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      b8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      bc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      c0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      c4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      c8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      cc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      d0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      d4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      d8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      dc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      e0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      e4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      e8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      ec:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      f0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      f4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      f8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
      fc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     100:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     104:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     108:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     10c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     110:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     114:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     118:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     11c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     120:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     124:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     128:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     12c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     130:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     134:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     138:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     13c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     140:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     144:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     148:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     14c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     150:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     154:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     158:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     15c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     160:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     164:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     168:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     16c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     170:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     174:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     178:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     17c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     180:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     184:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     188:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     18c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     190:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     194:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     198:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     19c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1a0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1a4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1a8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1ac:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1b0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1b4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1b8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1bc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1c0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1c4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1c8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1cc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1d0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1d4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1d8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1dc:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1e0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1e4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1e8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1ec:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1f0:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1f4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
     1f8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>

000001fc <__c.4094>:
     1fc:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     20c:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     21c:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000229 <__c.4096>:
     229:	3c 68 74 6d 6c 3e 3c 62 6f 64 79 3e 3c 73 70 61     <html><body><spa
     239:	6e 20 73 74 79 6c 65 3d 22 63 6f 6c 6f 72 3a 23     n style="color:#
     249:	30 30 30 30 41 30 22 3e 0d 0a 00                    0000A0">...

00000254 <__c.4098>:
     254:	3c 68 31 3e 45 6d 62 65 64 64 65 64 20 57 65 62     <h1>Embedded Web
     264:	20 53 65 72 76 65 72 3c 2f 68 31 3e 0d 0a 00         Server</h1>...

00000273 <__c.4100>:
     273:	3c 68 33 3e 41 56 52 4a 61 7a 7a 20 4d 65 67 61     <h3>AVRJazz Mega
     283:	33 32 38 20 61 6e 64 20 57 49 5a 38 31 31 4d 4a     328 and WIZ811MJ
     293:	3c 2f 68 33 3e 0d 0a 00                             </h3>...

0000029b <__c.4102>:
     29b:	3c 70 3e 3c 66 6f 72 6d 20 6d 65 74 68 6f 64 3d     <p><form method=
     2ab:	22 50 4f 53 54 22 3e 0d 0a 00                       "POST">...

000002b5 <__c.4104>:
     2b5:	3c 73 74 72 6f 6e 67 3e 54 65 6d 70 3a 20 3c 69     <strong>Temp: <i
     2c5:	6e 70 75 74 20 74 79 70 65 3d 22 74 65 78 74 22     nput type="text"
     2d5:	20 73 69 7a 65 3d 32 20 76 61 6c 75 65 3d 22 00      size=2 value=".

000002e5 <__c.4106>:
     2e5:	22 3e 20 3c 73 75 70 3e 4f 3c 2f 73 75 70 3e 43     "> <sup>O</sup>C
     2f5:	0d 0a 00                                            ...

000002f8 <__c.4108>:
     2f8:	63 68 65 63 6b 65 64 00                             checked.

00000300 <__c.4110>:
     300:	63 68 65 63 6b 65 64 00                             checked.

00000308 <__c.4112>:
     308:	3c 70 3e 3c 69 6e 70 75 74 20 74 79 70 65 3d 22     <p><input type="
     318:	72 61 64 69 6f 22 20 6e 61 6d 65 3d 22 72 61 64     radio" name="rad
     328:	69 6f 22 20 76 61 6c 75 65 3d 22 30 22 20 00        io" value="0" .

00000337 <__c.4114>:
     337:	3e 42 6c 69 6e 6b 69 6e 67 20 4c 45 44 0d 0a 00     >Blinking LED...

00000347 <__c.4116>:
     347:	3c 62 72 3e 3c 69 6e 70 75 74 20 74 79 70 65 3d     <br><input type=
     357:	22 72 61 64 69 6f 22 20 6e 61 6d 65 3d 22 72 61     "radio" name="ra
     367:	64 69 6f 22 20 76 61 6c 75 65 3d 22 31 22 20 00     dio" value="1" .

00000377 <__c.4118>:
     377:	3e 53 63 61 6e 6e 69 6e 67 20 4c 45 44 0d 0a 00     >Scanning LED...

00000387 <__c.4120>:
     387:	3c 2f 73 74 72 6f 6e 67 3e 3c 70 3e 0d 0a 00        </strong><p>...

00000396 <__c.4122>:
     396:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     3a6:	6d 69 74 22 3e 0d 0a 00                             mit">...

000003ae <__c.4124>:
     3ae:	3c 2f 66 6f 72 6d 3e 3c 2f 73 70 61 6e 3e 3c 2f     </form></span></
     3be:	62 6f 64 79 3e 3c 2f 68 74 6d 6c 3e 0d 0a 00 00     body></html>....

000003ce <__ctors_end>:
     3ce:	11 24       	eor	r1, r1
     3d0:	1f be       	out	0x3f, r1	; 63
     3d2:	cf ef       	ldi	r28, 0xFF	; 255
     3d4:	df e5       	ldi	r29, 0x5F	; 95
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	0c bf       	out	0x3c, r16	; 60

000003de <__do_copy_data>:
     3de:	10 e2       	ldi	r17, 0x20	; 32
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b0 e2       	ldi	r27, 0x20	; 32
     3e4:	e2 ea       	ldi	r30, 0xA2	; 162
     3e6:	f1 e1       	ldi	r31, 0x11	; 17
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	0b bf       	out	0x3b, r16	; 59
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x14>
     3ee:	07 90       	elpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a2 32       	cpi	r26, 0x22	; 34
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0x10>
     3f8:	1b be       	out	0x3b, r1	; 59

000003fa <__do_clear_bss>:
     3fa:	12 e2       	ldi	r17, 0x22	; 34
     3fc:	a2 e2       	ldi	r26, 0x22	; 34
     3fe:	b0 e2       	ldi	r27, 0x20	; 32
     400:	01 c0       	rjmp	.+2      	; 0x404 <.do_clear_bss_start>

00000402 <.do_clear_bss_loop>:
     402:	1d 92       	st	X+, r1

00000404 <.do_clear_bss_start>:
     404:	a8 32       	cpi	r26, 0x28	; 40
     406:	b1 07       	cpc	r27, r17
     408:	e1 f7       	brne	.-8      	; 0x402 <.do_clear_bss_loop>
     40a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <main>
     40e:	0c 94 cf 08 	jmp	0x119e	; 0x119e <_exit>

00000412 <__bad_interrupt>:
     412:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000416 <SPI_Write>:
#endif

void SPI_Write(uint16_t addr,uint8_t data)
{
  // Activate the CS pin
  SPI_PORT &= ~(1<<SPI_CS);
     416:	20 91 44 06 	lds	r18, 0x0644
     41a:	2f 7e       	andi	r18, 0xEF	; 239
     41c:	e0 e4       	ldi	r30, 0x40	; 64
     41e:	f6 e0       	ldi	r31, 0x06	; 6
     420:	24 83       	std	Z+4, r18	; 0x04

  // Start Wiznet W5100 Write OpCode transmission
  SPIC.DATA = WIZNET_WRITE_OPCODE;
     422:	20 ef       	ldi	r18, 0xF0	; 240
     424:	e0 ec       	ldi	r30, 0xC0	; 192
     426:	f8 e0       	ldi	r31, 0x08	; 8
     428:	23 83       	std	Z+3, r18	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     42a:	20 91 c2 08 	lds	r18, 0x08C2
     42e:	27 ff       	sbrs	r18, 7
     430:	fc cf       	rjmp	.-8      	; 0x42a <SPI_Write+0x14>

  // Start Wiznet W5100 Address High Bytes transmission
  SPIC.DATA = (addr & 0xFF00) >> 8;
     432:	e0 ec       	ldi	r30, 0xC0	; 192
     434:	f8 e0       	ldi	r31, 0x08	; 8
     436:	93 83       	std	Z+3, r25	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     438:	90 91 c2 08 	lds	r25, 0x08C2
     43c:	97 ff       	sbrs	r25, 7
     43e:	fc cf       	rjmp	.-8      	; 0x438 <SPI_Write+0x22>

  // Start Wiznet W5100 Address Low Bytes transmission
  SPIC.DATA = addr & 0x00FF;
     440:	e0 ec       	ldi	r30, 0xC0	; 192
     442:	f8 e0       	ldi	r31, 0x08	; 8
     444:	83 83       	std	Z+3, r24	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     446:	80 91 c2 08 	lds	r24, 0x08C2
     44a:	87 ff       	sbrs	r24, 7
     44c:	fc cf       	rjmp	.-8      	; 0x446 <SPI_Write+0x30>

  // Start Data transmission
  SPIC.DATA = data;
     44e:	e0 ec       	ldi	r30, 0xC0	; 192
     450:	f8 e0       	ldi	r31, 0x08	; 8
     452:	63 83       	std	Z+3, r22	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     454:	80 91 c2 08 	lds	r24, 0x08C2
     458:	87 ff       	sbrs	r24, 7
     45a:	fc cf       	rjmp	.-8      	; 0x454 <SPI_Write+0x3e>

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
     45c:	80 91 44 06 	lds	r24, 0x0644
     460:	80 61       	ori	r24, 0x10	; 16
     462:	e0 e4       	ldi	r30, 0x40	; 64
     464:	f6 e0       	ldi	r31, 0x06	; 6
     466:	84 83       	std	Z+4, r24	; 0x04
}
     468:	08 95       	ret

0000046a <SPI_Read>:

unsigned char SPI_Read(uint16_t addr)
{
  // Activate the CS pin
  SPI_PORT &= ~(1<<SPI_CS);
     46a:	20 91 44 06 	lds	r18, 0x0644
     46e:	2f 7e       	andi	r18, 0xEF	; 239
     470:	e0 e4       	ldi	r30, 0x40	; 64
     472:	f6 e0       	ldi	r31, 0x06	; 6
     474:	24 83       	std	Z+4, r18	; 0x04

  // Start Wiznet W5100 Read OpCode transmission
  SPIC.DATA = WIZNET_READ_OPCODE;
     476:	2f e0       	ldi	r18, 0x0F	; 15
     478:	e0 ec       	ldi	r30, 0xC0	; 192
     47a:	f8 e0       	ldi	r31, 0x08	; 8
     47c:	23 83       	std	Z+3, r18	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     47e:	20 91 c2 08 	lds	r18, 0x08C2
     482:	27 ff       	sbrs	r18, 7
     484:	fc cf       	rjmp	.-8      	; 0x47e <SPI_Read+0x14>

  // Start Wiznet W5100 Address High Bytes transmission
  SPIC.DATA = (addr & 0xFF00) >> 8;
     486:	e0 ec       	ldi	r30, 0xC0	; 192
     488:	f8 e0       	ldi	r31, 0x08	; 8
     48a:	93 83       	std	Z+3, r25	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     48c:	90 91 c2 08 	lds	r25, 0x08C2
     490:	97 ff       	sbrs	r25, 7
     492:	fc cf       	rjmp	.-8      	; 0x48c <SPI_Read+0x22>

  // Start Wiznet W5100 Address Low Bytes transmission
  SPIC.DATA = addr & 0x00FF;
     494:	e0 ec       	ldi	r30, 0xC0	; 192
     496:	f8 e0       	ldi	r31, 0x08	; 8
     498:	83 83       	std	Z+3, r24	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     49a:	80 91 c2 08 	lds	r24, 0x08C2
     49e:	87 ff       	sbrs	r24, 7
     4a0:	fc cf       	rjmp	.-8      	; 0x49a <SPI_Read+0x30>

  // Send Dummy transmission for reading the data
  SPIC.DATA = 0x00;
     4a2:	e0 ec       	ldi	r30, 0xC0	; 192
     4a4:	f8 e0       	ldi	r31, 0x08	; 8
     4a6:	13 82       	std	Z+3, r1	; 0x03

  // Wait for transmission complete
  while(!(SPIC.STATUS & (1<<SPI_IF_bp)));
     4a8:	80 91 c2 08 	lds	r24, 0x08C2
     4ac:	87 ff       	sbrs	r24, 7
     4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <SPI_Read+0x3e>

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
     4b0:	80 91 44 06 	lds	r24, 0x0644
     4b4:	80 61       	ori	r24, 0x10	; 16
     4b6:	e0 e4       	ldi	r30, 0x40	; 64
     4b8:	f6 e0       	ldi	r31, 0x06	; 6
     4ba:	84 83       	std	Z+4, r24	; 0x04

  return(SPIC.DATA);
     4bc:	80 91 c3 08 	lds	r24, 0x08C3
}
     4c0:	08 95       	ret

000004c2 <W5100_Init>:
  unsigned char ip_addr[] = {192,168,1,150};
  unsigned char sub_mask[] = {255,255,255,0};
  unsigned char gtw_addr[] = {192,168,1,1};

  // Setting the Wiznet W5100 Mode Register: 0x0000
  SPI_Write(MR,0x80);            // MR = 0b10000000;
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	60 e8       	ldi	r22, 0x80	; 128
     4c8:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

  // Setting the Wiznet W5100 Gateway Address (GAR): 0x0001 to 0x0004
  SPI_Write(GAR + 0,gtw_addr[0]);
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	60 ec       	ldi	r22, 0xC0	; 192
     4d2:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(GAR + 1,gtw_addr[1]);
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	68 ea       	ldi	r22, 0xA8	; 168
     4dc:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(GAR + 2,gtw_addr[2]);
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(GAR + 3,gtw_addr[3]);
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

  // Setting the Wiznet W5100 Source Address Register (SAR): 0x0009 to 0x000E
  SPI_Write(SAR + 0,mac_addr[0]);
     4f4:	89 e0       	ldi	r24, 0x09	; 9
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SAR + 1,mac_addr[1]);
     4fe:	8a e0       	ldi	r24, 0x0A	; 10
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	66 e1       	ldi	r22, 0x16	; 22
     504:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SAR + 2,mac_addr[2]);
     508:	8b e0       	ldi	r24, 0x0B	; 11
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	66 e3       	ldi	r22, 0x36	; 54
     50e:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SAR + 3,mac_addr[3]);
     512:	8c e0       	ldi	r24, 0x0C	; 12
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	6e ed       	ldi	r22, 0xDE	; 222
     518:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SAR + 4,mac_addr[4]);
     51c:	8d e0       	ldi	r24, 0x0D	; 13
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	68 e5       	ldi	r22, 0x58	; 88
     522:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SAR + 5,mac_addr[5]);
     526:	8e e0       	ldi	r24, 0x0E	; 14
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	66 ef       	ldi	r22, 0xF6	; 246
     52c:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

  // Setting the Wiznet W5100 Sub Mask Address (SUBR): 0x0005 to 0x0008
  SPI_Write(SUBR + 0,sub_mask[0]);
     530:	85 e0       	ldi	r24, 0x05	; 5
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	6f ef       	ldi	r22, 0xFF	; 255
     536:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SUBR + 1,sub_mask[1]);
     53a:	86 e0       	ldi	r24, 0x06	; 6
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SUBR + 2,sub_mask[2]);
     544:	87 e0       	ldi	r24, 0x07	; 7
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	6f ef       	ldi	r22, 0xFF	; 255
     54a:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SUBR + 3,sub_mask[3]);
     54e:	88 e0       	ldi	r24, 0x08	; 8
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

  // Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
  SPI_Write(SIPR + 0,ip_addr[0]);
     558:	8f e0       	ldi	r24, 0x0F	; 15
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	60 ec       	ldi	r22, 0xC0	; 192
     55e:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SIPR + 1,ip_addr[1]);
     562:	80 e1       	ldi	r24, 0x10	; 16
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	68 ea       	ldi	r22, 0xA8	; 168
     568:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SIPR + 2,ip_addr[2]);
     56c:	81 e1       	ldi	r24, 0x11	; 17
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(SIPR + 3,ip_addr[3]);
     576:	82 e1       	ldi	r24, 0x12	; 18
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	66 e9       	ldi	r22, 0x96	; 150
     57c:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

  // Setting the Wiznet W5100 RX and TX Memory Size (2KB),
  SPI_Write(RMSR,NET_MEMALLOC);
     580:	8a e1       	ldi	r24, 0x1A	; 26
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	65 e0       	ldi	r22, 0x05	; 5
     586:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
  SPI_Write(TMSR,NET_MEMALLOC);
     58a:	8b e1       	ldi	r24, 0x1B	; 27
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	65 e0       	ldi	r22, 0x05	; 5
     590:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
}
     594:	08 95       	ret

00000596 <close>:

void close(uint8_t sock)
{
   if (sock != 0) return;
     596:	88 23       	and	r24, r24
     598:	59 f4       	brne	.+22     	; 0x5b0 <close+0x1a>

   // Send Close Command
   SPI_Write(S0_CR,CR_CLOSE);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	94 e0       	ldi	r25, 0x04	; 4
     59e:	60 e1       	ldi	r22, 0x10	; 16
     5a0:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

   // Waiting until the S0_CR is clear
   while(SPI_Read(S0_CR));
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     5ac:	88 23       	and	r24, r24
     5ae:	d1 f7       	brne	.-12     	; 0x5a4 <close+0xe>
     5b0:	08 95       	ret

000005b2 <disconnect>:
}

void disconnect(uint8_t sock)
{
   if (sock != 0) return;
     5b2:	88 23       	and	r24, r24
     5b4:	59 f4       	brne	.+22     	; 0x5cc <disconnect+0x1a>

   // Send Disconnect Command
   SPI_Write(S0_CR,CR_DISCON);
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	94 e0       	ldi	r25, 0x04	; 4
     5ba:	68 e0       	ldi	r22, 0x08	; 8
     5bc:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

   // Wait for Disconecting Process
   while(SPI_Read(S0_CR));
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	94 e0       	ldi	r25, 0x04	; 4
     5c4:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     5c8:	88 23       	and	r24, r24
     5ca:	d1 f7       	brne	.-12     	; 0x5c0 <disconnect+0xe>
     5cc:	08 95       	ret

000005ce <socket>:
}

uint8_t socket(uint8_t sock,uint8_t eth_protocol,uint16_t tcp_port)
{
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	d6 2f       	mov	r29, r22
     5d6:	c4 2f       	mov	r28, r20
     5d8:	15 2f       	mov	r17, r21
    uint8_t retval=0;

    if (sock != 0) return retval;
     5da:	88 23       	and	r24, r24
     5dc:	59 f5       	brne	.+86     	; 0x634 <socket+0x66>

    // Make sure we close the socket first
    if (SPI_Read(S0_SR) == SOCK_CLOSED) {
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	94 e0       	ldi	r25, 0x04	; 4
     5e2:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     5e6:	88 23       	and	r24, r24
     5e8:	11 f4       	brne	.+4      	; 0x5ee <socket+0x20>
      close(sock);
     5ea:	0e 94 cb 02 	call	0x596	; 0x596 <close>
    }

    // Assigned Socket 0 Mode Register
    SPI_Write(S0_MR,eth_protocol);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	94 e0       	ldi	r25, 0x04	; 4
     5f2:	6d 2f       	mov	r22, r29
     5f4:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

    // Now open the Socket 0
    SPI_Write(S0_PORT,((tcp_port & 0xFF00) >> 8 ));
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	61 2f       	mov	r22, r17
     5fe:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
    SPI_Write(S0_PORT + 1,(tcp_port & 0x00FF));
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	94 e0       	ldi	r25, 0x04	; 4
     606:	6c 2f       	mov	r22, r28
     608:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
    SPI_Write(S0_CR,CR_OPEN);                   // Open Socket
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

    // Wait for Opening Process
    while(SPI_Read(S0_CR));
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     61e:	88 23       	and	r24, r24
     620:	d1 f7       	brne	.-12     	; 0x616 <socket+0x48>

    // Check for Init Status
    if (SPI_Read(S0_SR) == SOCK_INIT)
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	94 e0       	ldi	r25, 0x04	; 4
     626:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     62a:	83 31       	cpi	r24, 0x13	; 19
     62c:	29 f0       	breq	.+10     	; 0x638 <socket+0x6a>
      retval=1;
    else
      close(sock);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 cb 02 	call	0x596	; 0x596 <close>

uint8_t socket(uint8_t sock,uint8_t eth_protocol,uint16_t tcp_port)
{
    uint8_t retval=0;

    if (sock != 0) return retval;
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	01 c0       	rjmp	.+2      	; 0x63a <socket+0x6c>
    // Wait for Opening Process
    while(SPI_Read(S0_CR));

    // Check for Init Status
    if (SPI_Read(S0_SR) == SOCK_INIT)
      retval=1;
     638:	81 e0       	ldi	r24, 0x01	; 1
    else
      close(sock);

    return retval;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	08 95       	ret

00000642 <listen>:

uint8_t listen(uint8_t sock)
{
   uint8_t retval = 0;

   if (sock != 0) return retval;
     642:	88 23       	and	r24, r24
     644:	d1 f4       	brne	.+52     	; 0x67a <listen+0x38>

   if (SPI_Read(S0_SR) == SOCK_INIT) {
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	94 e0       	ldi	r25, 0x04	; 4
     64a:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     64e:	83 31       	cpi	r24, 0x13	; 19
     650:	a1 f4       	brne	.+40     	; 0x67a <listen+0x38>
     // Send the LISTEN Command
     SPI_Write(S0_CR,CR_LISTEN);
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	62 e0       	ldi	r22, 0x02	; 2
     658:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

     // Wait for Listening Process
     while(SPI_Read(S0_CR));
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	94 e0       	ldi	r25, 0x04	; 4
     660:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     664:	88 23       	and	r24, r24
     666:	d1 f7       	brne	.-12     	; 0x65c <listen+0x1a>

     // Check for Listen Status
     if (SPI_Read(S0_SR) == SOCK_LISTEN)
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	94 e0       	ldi	r25, 0x04	; 4
     66c:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     670:	84 31       	cpi	r24, 0x14	; 20
     672:	29 f0       	breq	.+10     	; 0x67e <listen+0x3c>
       retval=1;
     else
       close(sock);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 cb 02 	call	0x596	; 0x596 <close>
    return retval;
}

uint8_t listen(uint8_t sock)
{
   uint8_t retval = 0;
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret
     // Wait for Listening Process
     while(SPI_Read(S0_CR));

     // Check for Listen Status
     if (SPI_Read(S0_SR) == SOCK_LISTEN)
       retval=1;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     else
       close(sock);
    }
    return retval;
}
     680:	08 95       	ret

00000682 <send>:

uint16_t send(uint8_t sock,const uint8_t *buf,uint16_t buflen)
{
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	5b 01       	movw	r10, r22
     698:	6a 01       	movw	r12, r20
    uint16_t ptr,offaddr,realaddr,txsize,timeout;

    if (buflen <= 0 || sock != 0) return 0;
     69a:	41 15       	cp	r20, r1
     69c:	51 05       	cpc	r21, r1
     69e:	09 f4       	brne	.+2      	; 0x6a2 <send+0x20>
     6a0:	69 c0       	rjmp	.+210    	; 0x774 <send+0xf2>
     6a2:	88 23       	and	r24, r24
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <send+0x26>
     6a6:	66 c0       	rjmp	.+204    	; 0x774 <send+0xf2>
#if _DEBUG_MODE
    printf("Send Size: %d\n",buflen);
#endif

    // Make sure the TX Free Size Register is available
    txsize=SPI_Read(SO_TX_FSR);
     6a8:	80 e2       	ldi	r24, 0x20	; 32
     6aa:	94 e0       	ldi	r25, 0x04	; 4
     6ac:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
    txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     6b0:	d8 2f       	mov	r29, r24
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	c8 2f       	mov	r28, r24
     6b6:	81 e2       	ldi	r24, 0x21	; 33
     6b8:	94 e0       	ldi	r25, 0x04	; 4
     6ba:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     6be:	c8 0f       	add	r28, r24
     6c0:	d1 1d       	adc	r29, r1
#if _DEBUG_MODE
    printf("TX Free Size: %d\n",txsize);
#endif

    timeout=0;
    while (txsize < buflen) {
     6c2:	0a ee       	ldi	r16, 0xEA	; 234
     6c4:	13 e0       	ldi	r17, 0x03	; 3
     6c6:	1a c0       	rjmp	.+52     	; 0x6fc <send+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c8:	e3 ef       	ldi	r30, 0xF3	; 243
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <send+0x4a>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <send+0x50>
     6d2:	00 00       	nop
      _delay_ms(1);

     txsize=SPI_Read(SO_TX_FSR);
     6d4:	80 e2       	ldi	r24, 0x20	; 32
     6d6:	94 e0       	ldi	r25, 0x04	; 4
     6d8:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
     6dc:	f8 2e       	mov	r15, r24
     6de:	ee 24       	eor	r14, r14
     6e0:	81 e2       	ldi	r24, 0x21	; 33
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     6e8:	e7 01       	movw	r28, r14
     6ea:	c8 0f       	add	r28, r24
     6ec:	d1 1d       	adc	r29, r1
     6ee:	01 50       	subi	r16, 0x01	; 1
     6f0:	10 40       	sbci	r17, 0x00	; 0

     // Timeout for approx 1000 ms
     if (timeout++ > 1000) {
     6f2:	21 f4       	brne	.+8      	; 0x6fc <send+0x7a>
#if _DEBUG_MODE
       printf("TX Free Size Error!\n");
#endif
       // Disconnect the connection
       disconnect(sock);
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <disconnect>
     6fa:	3c c0       	rjmp	.+120    	; 0x774 <send+0xf2>
#if _DEBUG_MODE
    printf("TX Free Size: %d\n",txsize);
#endif

    timeout=0;
    while (txsize < buflen) {
     6fc:	cc 15       	cp	r28, r12
     6fe:	dd 05       	cpc	r29, r13
     700:	18 f3       	brcs	.-58     	; 0x6c8 <send+0x46>
       return 0;
     }
   }

   // Read the Tx Write Pointer
   ptr = SPI_Read(S0_TX_WR);
     702:	84 e2       	ldi	r24, 0x24	; 36
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     70a:	c8 2f       	mov	r28, r24
   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
     70c:	85 e2       	ldi	r24, 0x25	; 37
     70e:	94 e0       	ldi	r25, 0x04	; 4
     710:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     714:	3c 2f       	mov	r19, r28
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	79 01       	movw	r14, r18
     71a:	e8 0e       	add	r14, r24
     71c:	f1 1c       	adc	r15, r1
     71e:	e7 01       	movw	r28, r14
     720:	86 01       	movw	r16, r12
#if _DEBUG_MODE
    printf("TX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
      buflen--;
     722:	01 50       	subi	r16, 0x01	; 1
     724:	10 40       	sbci	r17, 0x00	; 0
      // Calculate the real W5100 physical Tx Buffer Address
      realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
     726:	ce 01       	movw	r24, r28
     728:	97 70       	andi	r25, 0x07	; 7

      // Copy the application data to the W5100 Tx Buffer
      SPI_Write(realaddr,*buf);
     72a:	80 50       	subi	r24, 0x00	; 0
     72c:	90 4c       	sbci	r25, 0xC0	; 192
     72e:	f5 01       	movw	r30, r10
     730:	61 91       	ld	r22, Z+
     732:	5f 01       	movw	r10, r30
     734:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
      offaddr++;
     738:	21 96       	adiw	r28, 0x01	; 1
   offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
#if _DEBUG_MODE
    printf("TX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
     73a:	01 15       	cp	r16, r1
     73c:	11 05       	cpc	r17, r1
     73e:	89 f7       	brne	.-30     	; 0x722 <send+0xa0>
     740:	ec 0c       	add	r14, r12
     742:	fd 1c       	adc	r15, r13
      offaddr++;
      buf++;
    }

    // Increase the S0_TX_WR value, so it point to the next transmit
    SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
     744:	84 e2       	ldi	r24, 0x24	; 36
     746:	94 e0       	ldi	r25, 0x04	; 4
     748:	6f 2d       	mov	r22, r15
     74a:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
    SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
     74e:	85 e2       	ldi	r24, 0x25	; 37
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	6e 2d       	mov	r22, r14
     754:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

    // Now Send the SEND command
    SPI_Write(S0_CR,CR_SEND);
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	60 e2       	ldi	r22, 0x20	; 32
     75e:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

    // Wait for Sending Process
    while(SPI_Read(S0_CR));
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     76a:	88 23       	and	r24, r24
     76c:	d1 f7       	brne	.-12     	; 0x762 <send+0xe0>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <send+0xf6>

uint16_t send(uint8_t sock,const uint8_t *buf,uint16_t buflen)
{
    uint16_t ptr,offaddr,realaddr,txsize,timeout;

    if (buflen <= 0 || sock != 0) return 0;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0

    // Wait for Sending Process
    while(SPI_Read(S0_CR));

    return 1;
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	bf 90       	pop	r11
     78a:	af 90       	pop	r10
     78c:	08 95       	ret

0000078e <recv>:

uint16_t recv(uint8_t sock,uint8_t *buf,uint16_t buflen)
{
     78e:	8f 92       	push	r8
     790:	9f 92       	push	r9
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	4b 01       	movw	r8, r22
     7a8:	ea 01       	movw	r28, r20
    uint16_t ptr,offaddr,realaddr;

    if (buflen <= 0 || sock != 0) return 1;
     7aa:	20 97       	sbiw	r28, 0x00	; 0
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <recv+0x22>
     7ae:	44 c0       	rjmp	.+136    	; 0x838 <recv+0xaa>
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <recv+0x28>
     7b4:	41 c0       	rjmp	.+130    	; 0x838 <recv+0xaa>

    // If the request size > MAX_BUF,just truncate it
    if (buflen > MAX_BUF)
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	41 30       	cpi	r20, 0x01	; 1
     7ba:	58 07       	cpc	r21, r24
     7bc:	10 f0       	brcs	.+4      	; 0x7c2 <recv+0x34>
      buflen=MAX_BUF - 2;
     7be:	ce ef       	ldi	r28, 0xFE	; 254
     7c0:	d1 e0       	ldi	r29, 0x01	; 1

    // Read the Rx Read Pointer
    ptr = SPI_Read(S0_RX_RD);
     7c2:	88 e2       	ldi	r24, 0x28	; 40
     7c4:	94 e0       	ldi	r25, 0x04	; 4
     7c6:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     7ca:	e8 2e       	mov	r14, r24
    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
     7cc:	89 e2       	ldi	r24, 0x29	; 41
     7ce:	94 e0       	ldi	r25, 0x04	; 4
     7d0:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     7d4:	1e 2d       	mov	r17, r14
     7d6:	00 e0       	ldi	r16, 0x00	; 0
     7d8:	58 01       	movw	r10, r16
     7da:	a8 0e       	add	r10, r24
     7dc:	b1 1c       	adc	r11, r1
     7de:	85 01       	movw	r16, r10
     7e0:	7e 01       	movw	r14, r28
     7e2:	64 01       	movw	r12, r8
#if _DEBUG_MODE
    printf("RX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
      buflen--;
     7e4:	08 94       	sec
     7e6:	e1 08       	sbc	r14, r1
     7e8:	f1 08       	sbc	r15, r1
      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
     7ea:	c8 01       	movw	r24, r16
     7ec:	97 70       	andi	r25, 0x07	; 7
      *buf = SPI_Read(realaddr);
     7ee:	80 50       	subi	r24, 0x00	; 0
     7f0:	90 4a       	sbci	r25, 0xA0	; 160
     7f2:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     7f6:	f6 01       	movw	r30, r12
     7f8:	81 93       	st	Z+, r24
     7fa:	6f 01       	movw	r12, r30
      offaddr++;
     7fc:	0f 5f       	subi	r16, 0xFF	; 255
     7fe:	1f 4f       	sbci	r17, 0xFF	; 255
    offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_RX_RD + 1));
#if _DEBUG_MODE
    printf("RX Buffer: %x\n",offaddr);
#endif

    while(buflen) {
     800:	e1 14       	cp	r14, r1
     802:	f1 04       	cpc	r15, r1
     804:	79 f7       	brne	.-34     	; 0x7e4 <recv+0x56>
     806:	85 01       	movw	r16, r10
     808:	0c 0f       	add	r16, r28
     80a:	1d 1f       	adc	r17, r29
      realaddr=RXBUFADDR + (offaddr & RX_BUF_MASK);
      *buf = SPI_Read(realaddr);
      offaddr++;
      buf++;
    }
    *buf='\0';        // String terminated character
     80c:	c8 0d       	add	r28, r8
     80e:	d9 1d       	adc	r29, r9
     810:	18 82       	st	Y, r1

    // Increase the S0_RX_RD value, so it point to the next receive
    SPI_Write(S0_RX_RD,(offaddr & 0xFF00) >> 8 );
     812:	88 e2       	ldi	r24, 0x28	; 40
     814:	94 e0       	ldi	r25, 0x04	; 4
     816:	61 2f       	mov	r22, r17
     818:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
    SPI_Write(S0_RX_RD + 1,(offaddr & 0x00FF));
     81c:	89 e2       	ldi	r24, 0x29	; 41
     81e:	94 e0       	ldi	r25, 0x04	; 4
     820:	60 2f       	mov	r22, r16
     822:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>

    // Now Send the RECV command
    SPI_Write(S0_CR,CR_RECV);
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	60 e4       	ldi	r22, 0x40	; 64
     82c:	0e 94 0b 02 	call	0x416	; 0x416 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     830:	f3 e0       	ldi	r31, 0x03	; 3
     832:	fa 95       	dec	r31
     834:	f1 f7       	brne	.-4      	; 0x832 <recv+0xa4>
     836:	00 00       	nop
    _delay_us(5);    // Wait for Receive Process

    return 1;
}
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	08 95       	ret

00000856 <recv_size>:

uint16_t recv_size(void)
{
     856:	cf 93       	push	r28
  return ((SPI_Read(S0_RX_RSR) & 0x00FF) << 8 ) + SPI_Read(S0_RX_RSR + 1);
     858:	86 e2       	ldi	r24, 0x26	; 38
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     860:	c8 2f       	mov	r28, r24
     862:	87 e2       	ldi	r24, 0x27	; 39
     864:	94 e0       	ldi	r25, 0x04	; 4
     866:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
     86a:	3c 2f       	mov	r19, r28
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	a9 01       	movw	r20, r18
     870:	48 0f       	add	r20, r24
     872:	51 1d       	adc	r21, r1
     874:	ca 01       	movw	r24, r20
}
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <strindex>:

int strindex(char *s,char *t)
{
     87a:	cf 92       	push	r12
     87c:	df 92       	push	r13
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	16 2f       	mov	r17, r22
     88c:	07 2f       	mov	r16, r23
  uint16_t i,n;

  n=strlen(t);
     88e:	e6 2f       	mov	r30, r22
     890:	f7 2f       	mov	r31, r23
     892:	ef 01       	movw	r28, r30
     894:	09 90       	ld	r0, Y+
     896:	00 20       	and	r0, r0
     898:	e9 f7       	brne	.-6      	; 0x894 <strindex+0x1a>
     89a:	21 97       	sbiw	r28, 0x01	; 1
     89c:	ce 1b       	sub	r28, r30
     89e:	df 0b       	sbc	r29, r31
     8a0:	7c 01       	movw	r14, r24
  for(i=0;*(s+i); i++) {
     8a2:	cc 24       	eor	r12, r12
     8a4:	dd 24       	eor	r13, r13
     8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <strindex+0x46>
    if (strncmp(s+i,t,n) == 0)
     8a8:	61 2f       	mov	r22, r17
     8aa:	70 2f       	mov	r23, r16
     8ac:	ae 01       	movw	r20, r28
     8ae:	0e 94 f7 05 	call	0xbee	; 0xbee <strncmp>
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	11 f4       	brne	.+4      	; 0x8ba <strindex+0x40>
      return i;
     8b6:	c6 01       	movw	r24, r12
     8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <strindex+0x5a>
int strindex(char *s,char *t)
{
  uint16_t i,n;

  n=strlen(t);
  for(i=0;*(s+i); i++) {
     8ba:	08 94       	sec
     8bc:	c1 1c       	adc	r12, r1
     8be:	d1 1c       	adc	r13, r1
     8c0:	c7 01       	movw	r24, r14
     8c2:	08 94       	sec
     8c4:	e1 1c       	adc	r14, r1
     8c6:	f1 1c       	adc	r15, r1
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 81       	ld	r18, Z
     8cc:	22 23       	and	r18, r18
     8ce:	61 f7       	brne	.-40     	; 0x8a8 <strindex+0x2e>
    if (strncmp(s+i,t,n) == 0)
      return i;
  }
  return -1;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	9f ef       	ldi	r25, 0xFF	; 255
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	08 95       	ret

000008e6 <main>:
#if _DEBUG_MODE
// Assign I/O stream to UART
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);
#endif

int main(void){
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	68 97       	sbiw	r28, 0x18	; 24
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	de bf       	out	0x3e, r29	; 62
  uart_flush();
#endif

  // Initial the AVR ATMega328 SPI Peripheral
  // Set MOSI (PORTC5),SCK (PORTC7) and PORTC4 (SS) as output, others as input
  SPI_DDR = (1<<PIN5_bp)|(1<<PIN7_bp)|(1<<PIN4_bp);
     8f4:	80 eb       	ldi	r24, 0xB0	; 176
     8f6:	80 93 40 06 	sts	0x0640, r24

  // CS pin is not active
  SPI_PORT |= (1<<SPI_CS);
     8fa:	80 91 44 06 	lds	r24, 0x0644
     8fe:	80 61       	ori	r24, 0x10	; 16
     900:	e0 e4       	ldi	r30, 0x40	; 64
     902:	f6 e0       	ldi	r31, 0x06	; 6
     904:	84 83       	std	Z+4, r24	; 0x04

  // Enable SPI, Master Mode 0, set the clock rate fck/2
  SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm;
     906:	80 e5       	ldi	r24, 0x50	; 80
     908:	80 93 c0 08 	sts	0x08C0, r24

  // Initial the W5100 Ethernet
  W5100_Init();
     90c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <W5100_Init>

  // Initial variable used
  sockreg=0;
     910:	10 92 25 20 	sts	0x2025, r1
  tempvalue=0;
     914:	10 92 23 20 	sts	0x2023, r1
     918:	10 92 24 20 	sts	0x2024, r1
  ledmode=1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 26 22 	sts	0x2226, r24
  ledeye=0x01;                  // Initial LED Eye Variables
     922:	80 93 27 22 	sts	0x2227, r24
  ledsign=0;
     926:	10 92 22 20 	sts	0x2022, r1
#if _DEBUG_MODE
	printf("Size: %d\n",rsize);
#endif
	if (rsize > 0) {
	  // Now read the client Request
	  if (recv(sockreg,buf,rsize) <= 0) break;
     92a:	86 e2       	ldi	r24, 0x26	; 38
     92c:	c8 2e       	mov	r12, r24
     92e:	80 e2       	ldi	r24, 0x20	; 32
     930:	d8 2e       	mov	r13, r24

	    // Now Send the HTTP Response
	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;

	    // Create the HTTP Temperature Response
	    sprintf((char *)temp,"%d",tempvalue);        // Convert temperature value to string
     932:	7e 01       	movw	r14, r28
     934:	08 94       	sec
     936:	e1 1c       	adc	r14, r1
     938:	f1 1c       	adc	r15, r1
     93a:	9d e1       	ldi	r25, 0x1D	; 29
     93c:	a9 2e       	mov	r10, r25
     93e:	90 e2       	ldi	r25, 0x20	; 32
     940:	b9 2e       	mov	r11, r25
  printf("WEB Server Debug Mode\n\n");
#endif

  // Loop forever
  for(;;){
    sockstat=SPI_Read(S0_SR);
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_Read>
    switch(sockstat) {
     94a:	88 31       	cpi	r24, 0x18	; 24
     94c:	09 f4       	brne	.+2      	; 0x950 <main+0x6a>
     94e:	26 c1       	rjmp	.+588    	; 0xb9c <main+0x2b6>
     950:	89 31       	cpi	r24, 0x19	; 25
     952:	28 f4       	brcc	.+10     	; 0x95e <main+0x78>
     954:	88 23       	and	r24, r24
     956:	39 f0       	breq	.+14     	; 0x966 <main+0x80>
     958:	87 31       	cpi	r24, 0x17	; 23
     95a:	99 f7       	brne	.-26     	; 0x942 <main+0x5c>
     95c:	1a c0       	rjmp	.+52     	; 0x992 <main+0xac>
     95e:	8a 51       	subi	r24, 0x1A	; 26
     960:	84 30       	cpi	r24, 0x04	; 4
     962:	78 f7       	brcc	.-34     	; 0x942 <main+0x5c>
     964:	1b c1       	rjmp	.+566    	; 0xb9c <main+0x2b6>
     case SOCK_CLOSED:
        if (socket(sockreg,MR_TCP,TCP_PORT) > 0) {
     966:	80 91 25 20 	lds	r24, 0x2025
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	40 e5       	ldi	r20, 0x50	; 80
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	0e 94 e7 02 	call	0x5ce	; 0x5ce <socket>
     974:	88 23       	and	r24, r24
     976:	29 f3       	breq	.-54     	; 0x942 <main+0x5c>
	  // Listen to Socket 0
	  if (listen(sockreg) <= 0)
     978:	80 91 25 20 	lds	r24, 0x2025
     97c:	0e 94 21 03 	call	0x642	; 0x642 <listen>
     980:	88 23       	and	r24, r24
     982:	f9 f6       	brne	.-66     	; 0x942 <main+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     984:	83 ef       	ldi	r24, 0xF3	; 243
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <main+0xa2>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <main+0xa8>
     98e:	00 00       	nop
     990:	d8 cf       	rjmp	.-80     	; 0x942 <main+0x5c>
	}
	break;

     case SOCK_ESTABLISHED:
	// Get the client request size
        rsize=recv_size();
     992:	0e 94 2b 04 	call	0x856	; 0x856 <recv_size>
     996:	ac 01       	movw	r20, r24
#if _DEBUG_MODE
	printf("Size: %d\n",rsize);
#endif
	if (rsize > 0) {
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	09 f4       	brne	.+2      	; 0x99e <main+0xb8>
     99c:	fa c0       	rjmp	.+500    	; 0xb92 <main+0x2ac>
	  // Now read the client Request
	  if (recv(sockreg,buf,rsize) <= 0) break;
     99e:	80 91 25 20 	lds	r24, 0x2025
     9a2:	66 e2       	ldi	r22, 0x26	; 38
     9a4:	70 e2       	ldi	r23, 0x20	; 32
     9a6:	0e 94 c7 03 	call	0x78e	; 0x78e <recv>
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	51 f2       	breq	.-108    	; 0x942 <main+0x5c>
#if _DEBUG_MODE
  	  printf("Content:\n%s\n",buf);
#endif
          // Check the Request Header
	  getidx=strindex((char *)buf,"GET /");
     9ae:	86 e2       	ldi	r24, 0x26	; 38
     9b0:	90 e2       	ldi	r25, 0x20	; 32
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	70 e2       	ldi	r23, 0x20	; 32
     9b6:	0e 94 3d 04 	call	0x87a	; 0x87a <strindex>
     9ba:	8c 01       	movw	r16, r24
	  postidx=strindex((char *)buf,"POST /");
     9bc:	86 e2       	ldi	r24, 0x26	; 38
     9be:	90 e2       	ldi	r25, 0x20	; 32
     9c0:	66 e0       	ldi	r22, 0x06	; 6
     9c2:	70 e2       	ldi	r23, 0x20	; 32
     9c4:	0e 94 3d 04 	call	0x87a	; 0x87a <strindex>

	  if (getidx >= 0 || postidx >= 0) {
     9c8:	17 ff       	sbrs	r17, 7
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <main+0xec>
     9cc:	97 ff       	sbrs	r25, 7
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <main+0xf0>
     9d0:	db c0       	rjmp	.+438    	; 0xb88 <main+0x2a2>
#if _DEBUG_MODE
	    printf("Req. Check!\n");
#endif
            // Now check the Radio Button for POST request
	    if (postidx >= 0) {
     9d2:	97 fd       	sbrc	r25, 7
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <main+0x11e>
	      if (strindex((char *)buf,"radio=0") > 0)
     9d6:	86 e2       	ldi	r24, 0x26	; 38
     9d8:	90 e2       	ldi	r25, 0x20	; 32
     9da:	6d e0       	ldi	r22, 0x0D	; 13
     9dc:	70 e2       	ldi	r23, 0x20	; 32
     9de:	0e 94 3d 04 	call	0x87a	; 0x87a <strindex>
     9e2:	18 16       	cp	r1, r24
     9e4:	19 06       	cpc	r1, r25
     9e6:	14 f4       	brge	.+4      	; 0x9ec <main+0x106>
	        ledmode=0;
     9e8:	10 92 26 22 	sts	0x2226, r1

	      if (strindex((char *)buf,"radio=1") > 0)
     9ec:	86 e2       	ldi	r24, 0x26	; 38
     9ee:	90 e2       	ldi	r25, 0x20	; 32
     9f0:	65 e1       	ldi	r22, 0x15	; 21
     9f2:	70 e2       	ldi	r23, 0x20	; 32
     9f4:	0e 94 3d 04 	call	0x87a	; 0x87a <strindex>
     9f8:	18 16       	cp	r1, r24
     9fa:	19 06       	cpc	r1, r25
     9fc:	1c f4       	brge	.+6      	; 0xa04 <main+0x11e>
	        ledmode=1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 26 22 	sts	0x2226, r24
            }
#if _DEBUG_MODE
	    printf("Req. Send!\n");
#endif
	    // Create the HTTP Response	Header
	    strcpy_P((char *)buf,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
     a04:	86 e2       	ldi	r24, 0x26	; 38
     a06:	90 e2       	ldi	r25, 0x20	; 32
     a08:	6c ef       	ldi	r22, 0xFC	; 252
     a0a:	71 e0       	ldi	r23, 0x01	; 1
     a0c:	0e 94 de 05 	call	0xbbc	; 0xbbc <strcpy_P>
	    strcat_P((char *)buf,PSTR("<html><body><span style=\"color:#0000A0\">\r\n"));
     a10:	86 e2       	ldi	r24, 0x26	; 38
     a12:	90 e2       	ldi	r25, 0x20	; 32
     a14:	69 e2       	ldi	r22, 0x29	; 41
     a16:	72 e0       	ldi	r23, 0x02	; 2
     a18:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat_P((char *)buf,PSTR("<h1>Embedded Web Server</h1>\r\n"));
     a1c:	86 e2       	ldi	r24, 0x26	; 38
     a1e:	90 e2       	ldi	r25, 0x20	; 32
     a20:	64 e5       	ldi	r22, 0x54	; 84
     a22:	72 e0       	ldi	r23, 0x02	; 2
     a24:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat_P((char *)buf,PSTR("<h3>AVRJazz Mega328 and WIZ811MJ</h3>\r\n"));
     a28:	86 e2       	ldi	r24, 0x26	; 38
     a2a:	90 e2       	ldi	r25, 0x20	; 32
     a2c:	63 e7       	ldi	r22, 0x73	; 115
     a2e:	72 e0       	ldi	r23, 0x02	; 2
     a30:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat_P((char *)buf,PSTR("<p><form method=\"POST\">\r\n"));
     a34:	86 e2       	ldi	r24, 0x26	; 38
     a36:	90 e2       	ldi	r25, 0x20	; 32
     a38:	6b e9       	ldi	r22, 0x9B	; 155
     a3a:	72 e0       	ldi	r23, 0x02	; 2
     a3c:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>

	    // Now Send the HTTP Response
	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;
     a40:	d6 01       	movw	r26, r12
     a42:	0d 90       	ld	r0, X+
     a44:	00 20       	and	r0, r0
     a46:	e9 f7       	brne	.-6      	; 0xa42 <main+0x15c>
     a48:	ad 01       	movw	r20, r26
     a4a:	41 50       	subi	r20, 0x01	; 1
     a4c:	50 40       	sbci	r21, 0x00	; 0
     a4e:	46 52       	subi	r20, 0x26	; 38
     a50:	50 42       	sbci	r21, 0x20	; 32
     a52:	80 91 25 20 	lds	r24, 0x2025
     a56:	66 e2       	ldi	r22, 0x26	; 38
     a58:	70 e2       	ldi	r23, 0x20	; 32
     a5a:	0e 94 41 03 	call	0x682	; 0x682 <send>
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	09 f4       	brne	.+2      	; 0xa64 <main+0x17e>
     a62:	6f cf       	rjmp	.-290    	; 0x942 <main+0x5c>

	    // Create the HTTP Temperature Response
	    sprintf((char *)temp,"%d",tempvalue);        // Convert temperature value to string
     a64:	00 d0       	rcall	.+0      	; 0xa66 <main+0x180>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <main+0x182>
     a68:	ed b7       	in	r30, 0x3d	; 61
     a6a:	fe b7       	in	r31, 0x3e	; 62
     a6c:	31 96       	adiw	r30, 0x01	; 1
     a6e:	ad b7       	in	r26, 0x3d	; 61
     a70:	be b7       	in	r27, 0x3e	; 62
     a72:	11 96       	adiw	r26, 0x01	; 1
     a74:	ed 92       	st	X+, r14
     a76:	fc 92       	st	X, r15
     a78:	12 97       	sbiw	r26, 0x02	; 2
     a7a:	a2 82       	std	Z+2, r10	; 0x02
     a7c:	b3 82       	std	Z+3, r11	; 0x03
     a7e:	80 91 23 20 	lds	r24, 0x2023
     a82:	90 91 24 20 	lds	r25, 0x2024
     a86:	84 83       	std	Z+4, r24	; 0x04
     a88:	95 83       	std	Z+5, r25	; 0x05
     a8a:	0e 94 05 06 	call	0xc0a	; 0xc0a <sprintf>

	    strcpy_P((char *)buf,PSTR("<strong>Temp: <input type=\"text\" size=2 value=\""));
     a8e:	ed b7       	in	r30, 0x3d	; 61
     a90:	fe b7       	in	r31, 0x3e	; 62
     a92:	36 96       	adiw	r30, 0x06	; 6
     a94:	ed bf       	out	0x3d, r30	; 61
     a96:	fe bf       	out	0x3e, r31	; 62
     a98:	86 e2       	ldi	r24, 0x26	; 38
     a9a:	90 e2       	ldi	r25, 0x20	; 32
     a9c:	65 eb       	ldi	r22, 0xB5	; 181
     a9e:	72 e0       	ldi	r23, 0x02	; 2
     aa0:	0e 94 de 05 	call	0xbbc	; 0xbbc <strcpy_P>
	    strcat((char *)buf,temp);
     aa4:	86 e2       	ldi	r24, 0x26	; 38
     aa6:	90 e2       	ldi	r25, 0x20	; 32
     aa8:	b7 01       	movw	r22, r14
     aaa:	0e 94 e5 05 	call	0xbca	; 0xbca <strcat>
	    strcat_P((char *)buf,PSTR("\"> <sup>O</sup>C\r\n"));
     aae:	86 e2       	ldi	r24, 0x26	; 38
     ab0:	90 e2       	ldi	r25, 0x20	; 32
     ab2:	65 ee       	ldi	r22, 0xE5	; 229
     ab4:	72 e0       	ldi	r23, 0x02	; 2
     ab6:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>

	    if (ledmode == 1) {
     aba:	80 91 26 22 	lds	r24, 0x2226
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	69 f4       	brne	.+26     	; 0xadc <main+0x1f6>
	      strcpy(radiostat0,"");
     ac2:	ce 01       	movw	r24, r28
     ac4:	0f 96       	adiw	r24, 0x0f	; 15
     ac6:	60 e2       	ldi	r22, 0x20	; 32
     ac8:	70 e2       	ldi	r23, 0x20	; 32
     aca:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <strcpy>
	      strcpy_P(radiostat1,PSTR("checked"));
     ace:	ce 01       	movw	r24, r28
     ad0:	05 96       	adiw	r24, 0x05	; 5
     ad2:	68 ef       	ldi	r22, 0xF8	; 248
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	0e 94 de 05 	call	0xbbc	; 0xbbc <strcpy_P>
     ada:	0c c0       	rjmp	.+24     	; 0xaf4 <main+0x20e>
	    } else {
	      strcpy_P(radiostat0,PSTR("checked"));
     adc:	ce 01       	movw	r24, r28
     ade:	0f 96       	adiw	r24, 0x0f	; 15
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	73 e0       	ldi	r23, 0x03	; 3
     ae4:	0e 94 de 05 	call	0xbbc	; 0xbbc <strcpy_P>
	      strcpy(radiostat1,"");
     ae8:	ce 01       	movw	r24, r28
     aea:	05 96       	adiw	r24, 0x05	; 5
     aec:	60 e2       	ldi	r22, 0x20	; 32
     aee:	70 e2       	ldi	r23, 0x20	; 32
     af0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <strcpy>
	    }

            // Create the HTTP Radio Button 0 Response
	    strcat_P((char *)buf,PSTR("<p><input type=\"radio\" name=\"radio\" value=\"0\" "));
     af4:	86 e2       	ldi	r24, 0x26	; 38
     af6:	90 e2       	ldi	r25, 0x20	; 32
     af8:	68 e0       	ldi	r22, 0x08	; 8
     afa:	73 e0       	ldi	r23, 0x03	; 3
     afc:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat((char *)buf,radiostat0);
     b00:	86 e2       	ldi	r24, 0x26	; 38
     b02:	90 e2       	ldi	r25, 0x20	; 32
     b04:	be 01       	movw	r22, r28
     b06:	61 5f       	subi	r22, 0xF1	; 241
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	0e 94 e5 05 	call	0xbca	; 0xbca <strcat>
	    strcat_P((char *)buf,PSTR(">Blinking LED\r\n"));
     b0e:	86 e2       	ldi	r24, 0x26	; 38
     b10:	90 e2       	ldi	r25, 0x20	; 32
     b12:	67 e3       	ldi	r22, 0x37	; 55
     b14:	73 e0       	ldi	r23, 0x03	; 3
     b16:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat_P((char *)buf,PSTR("<br><input type=\"radio\" name=\"radio\" value=\"1\" "));
     b1a:	86 e2       	ldi	r24, 0x26	; 38
     b1c:	90 e2       	ldi	r25, 0x20	; 32
     b1e:	67 e4       	ldi	r22, 0x47	; 71
     b20:	73 e0       	ldi	r23, 0x03	; 3
     b22:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat((char *)buf,radiostat1);
     b26:	86 e2       	ldi	r24, 0x26	; 38
     b28:	90 e2       	ldi	r25, 0x20	; 32
     b2a:	be 01       	movw	r22, r28
     b2c:	6b 5f       	subi	r22, 0xFB	; 251
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	0e 94 e5 05 	call	0xbca	; 0xbca <strcat>
	    strcat_P((char *)buf,PSTR(">Scanning LED\r\n"));
     b34:	86 e2       	ldi	r24, 0x26	; 38
     b36:	90 e2       	ldi	r25, 0x20	; 32
     b38:	67 e7       	ldi	r22, 0x77	; 119
     b3a:	73 e0       	ldi	r23, 0x03	; 3
     b3c:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
 	    strcat_P((char *)buf,PSTR("</strong><p>\r\n"));
     b40:	86 e2       	ldi	r24, 0x26	; 38
     b42:	90 e2       	ldi	r25, 0x20	; 32
     b44:	67 e8       	ldi	r22, 0x87	; 135
     b46:	73 e0       	ldi	r23, 0x03	; 3
     b48:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat_P((char *)buf,PSTR("<input type=\"submit\">\r\n"));
     b4c:	86 e2       	ldi	r24, 0x26	; 38
     b4e:	90 e2       	ldi	r25, 0x20	; 32
     b50:	66 e9       	ldi	r22, 0x96	; 150
     b52:	73 e0       	ldi	r23, 0x03	; 3
     b54:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>
	    strcat_P((char *)buf,PSTR("</form></span></body></html>\r\n"));
     b58:	86 e2       	ldi	r24, 0x26	; 38
     b5a:	90 e2       	ldi	r25, 0x20	; 32
     b5c:	6e ea       	ldi	r22, 0xAE	; 174
     b5e:	73 e0       	ldi	r23, 0x03	; 3
     b60:	0e 94 d3 05 	call	0xba6	; 0xba6 <strcat_P>

            // Now Send the HTTP Remaining Response
	    if (send(sockreg,buf,strlen((char *)buf)) <= 0) break;
     b64:	d6 01       	movw	r26, r12
     b66:	0d 90       	ld	r0, X+
     b68:	00 20       	and	r0, r0
     b6a:	e9 f7       	brne	.-6      	; 0xb66 <main+0x280>
     b6c:	ad 01       	movw	r20, r26
     b6e:	41 50       	subi	r20, 0x01	; 1
     b70:	50 40       	sbci	r21, 0x00	; 0
     b72:	46 52       	subi	r20, 0x26	; 38
     b74:	50 42       	sbci	r21, 0x20	; 32
     b76:	80 91 25 20 	lds	r24, 0x2025
     b7a:	66 e2       	ldi	r22, 0x26	; 38
     b7c:	70 e2       	ldi	r23, 0x20	; 32
     b7e:	0e 94 41 03 	call	0x682	; 0x682 <send>
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	09 f4       	brne	.+2      	; 0xb88 <main+0x2a2>
     b86:	dd ce       	rjmp	.-582    	; 0x942 <main+0x5c>
          }

	  // Disconnect the socket
	  disconnect(sockreg);
     b88:	80 91 25 20 	lds	r24, 0x2025
     b8c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <disconnect>
     b90:	d8 ce       	rjmp	.-592    	; 0x942 <main+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b92:	b6 e0       	ldi	r27, 0x06	; 6
     b94:	ba 95       	dec	r27
     b96:	f1 f7       	brne	.-4      	; 0xb94 <main+0x2ae>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <main+0x2b4>
     b9a:	d3 ce       	rjmp	.-602    	; 0x942 <main+0x5c>
      case SOCK_CLOSING:
      case SOCK_TIME_WAIT:
      case SOCK_CLOSE_WAIT:
      case SOCK_LAST_ACK:
        // Force to close the socket
	close(sockreg);
     b9c:	80 91 25 20 	lds	r24, 0x2025
     ba0:	0e 94 cb 02 	call	0x596	; 0x596 <close>
#if _DEBUG_MODE
	printf("Socket Close!\n");
#endif
	break;
     ba4:	ce ce       	rjmp	.-612    	; 0x942 <main+0x5c>

00000ba6 <strcat_P>:
     ba6:	fb 01       	movw	r30, r22
     ba8:	dc 01       	movw	r26, r24
     baa:	0d 90       	ld	r0, X+
     bac:	00 20       	and	r0, r0
     bae:	e9 f7       	brne	.-6      	; 0xbaa <strcat_P+0x4>
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	05 90       	lpm	r0, Z+
     bb4:	0d 92       	st	X+, r0
     bb6:	00 20       	and	r0, r0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <strcat_P+0xc>
     bba:	08 95       	ret

00000bbc <strcpy_P>:
     bbc:	fb 01       	movw	r30, r22
     bbe:	dc 01       	movw	r26, r24
     bc0:	05 90       	lpm	r0, Z+
     bc2:	0d 92       	st	X+, r0
     bc4:	00 20       	and	r0, r0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <strcpy_P+0x4>
     bc8:	08 95       	ret

00000bca <strcat>:
     bca:	fb 01       	movw	r30, r22
     bcc:	dc 01       	movw	r26, r24
     bce:	0d 90       	ld	r0, X+
     bd0:	00 20       	and	r0, r0
     bd2:	e9 f7       	brne	.-6      	; 0xbce <strcat+0x4>
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	01 90       	ld	r0, Z+
     bd8:	0d 92       	st	X+, r0
     bda:	00 20       	and	r0, r0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <strcat+0xc>
     bde:	08 95       	ret

00000be0 <strcpy>:
     be0:	fb 01       	movw	r30, r22
     be2:	dc 01       	movw	r26, r24
     be4:	01 90       	ld	r0, Z+
     be6:	0d 92       	st	X+, r0
     be8:	00 20       	and	r0, r0
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <strcpy+0x4>
     bec:	08 95       	ret

00000bee <strncmp>:
     bee:	fb 01       	movw	r30, r22
     bf0:	dc 01       	movw	r26, r24
     bf2:	41 50       	subi	r20, 0x01	; 1
     bf4:	50 40       	sbci	r21, 0x00	; 0
     bf6:	30 f0       	brcs	.+12     	; 0xc04 <strncmp+0x16>
     bf8:	8d 91       	ld	r24, X+
     bfa:	01 90       	ld	r0, Z+
     bfc:	80 19       	sub	r24, r0
     bfe:	19 f4       	brne	.+6      	; 0xc06 <strncmp+0x18>
     c00:	00 20       	and	r0, r0
     c02:	b9 f7       	brne	.-18     	; 0xbf2 <strncmp+0x4>
     c04:	88 1b       	sub	r24, r24
     c06:	99 0b       	sbc	r25, r25
     c08:	08 95       	ret

00000c0a <sprintf>:
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	2e 97       	sbiw	r28, 0x0e	; 14
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0e 89       	ldd	r16, Y+22	; 0x16
     c1e:	1f 89       	ldd	r17, Y+23	; 0x17
     c20:	86 e0       	ldi	r24, 0x06	; 6
     c22:	8c 83       	std	Y+4, r24	; 0x04
     c24:	09 83       	std	Y+1, r16	; 0x01
     c26:	1a 83       	std	Y+2, r17	; 0x02
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	9f e7       	ldi	r25, 0x7F	; 127
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	9e 83       	std	Y+6, r25	; 0x06
     c30:	ae 01       	movw	r20, r28
     c32:	46 5e       	subi	r20, 0xE6	; 230
     c34:	5f 4f       	sbci	r21, 0xFF	; 255
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	68 8d       	ldd	r22, Y+24	; 0x18
     c3c:	79 8d       	ldd	r23, Y+25	; 0x19
     c3e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <vfprintf>
     c42:	ef 81       	ldd	r30, Y+7	; 0x07
     c44:	f8 85       	ldd	r31, Y+8	; 0x08
     c46:	e0 0f       	add	r30, r16
     c48:	f1 1f       	adc	r31, r17
     c4a:	10 82       	st	Z, r1
     c4c:	2e 96       	adiw	r28, 0x0e	; 14
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <vfprintf>:
     c5c:	2f 92       	push	r2
     c5e:	3f 92       	push	r3
     c60:	4f 92       	push	r4
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	2d 97       	sbiw	r28, 0x0d	; 13
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	3c 01       	movw	r6, r24
     c8c:	6c 87       	std	Y+12, r22	; 0x0c
     c8e:	7d 87       	std	Y+13, r23	; 0x0d
     c90:	5a 01       	movw	r10, r20
     c92:	fc 01       	movw	r30, r24
     c94:	16 82       	std	Z+6, r1	; 0x06
     c96:	17 82       	std	Z+7, r1	; 0x07
     c98:	83 81       	ldd	r24, Z+3	; 0x03
     c9a:	81 ff       	sbrs	r24, 1
     c9c:	c8 c1       	rjmp	.+912    	; 0x102e <vfprintf+0x3d2>
     c9e:	2e 01       	movw	r4, r28
     ca0:	08 94       	sec
     ca2:	41 1c       	adc	r4, r1
     ca4:	51 1c       	adc	r5, r1
     ca6:	f3 01       	movw	r30, r6
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	ec 85       	ldd	r30, Y+12	; 0x0c
     cac:	fd 85       	ldd	r31, Y+13	; 0x0d
     cae:	93 fd       	sbrc	r25, 3
     cb0:	85 91       	lpm	r24, Z+
     cb2:	93 ff       	sbrs	r25, 3
     cb4:	81 91       	ld	r24, Z+
     cb6:	ec 87       	std	Y+12, r30	; 0x0c
     cb8:	fd 87       	std	Y+13, r31	; 0x0d
     cba:	88 23       	and	r24, r24
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <vfprintf+0x64>
     cbe:	b3 c1       	rjmp	.+870    	; 0x1026 <vfprintf+0x3ca>
     cc0:	85 32       	cpi	r24, 0x25	; 37
     cc2:	41 f4       	brne	.+16     	; 0xcd4 <vfprintf+0x78>
     cc4:	93 fd       	sbrc	r25, 3
     cc6:	85 91       	lpm	r24, Z+
     cc8:	93 ff       	sbrs	r25, 3
     cca:	81 91       	ld	r24, Z+
     ccc:	ec 87       	std	Y+12, r30	; 0x0c
     cce:	fd 87       	std	Y+13, r31	; 0x0d
     cd0:	85 32       	cpi	r24, 0x25	; 37
     cd2:	29 f4       	brne	.+10     	; 0xcde <vfprintf+0x82>
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	b3 01       	movw	r22, r6
     cd8:	0e 94 45 08 	call	0x108a	; 0x108a <fputc>
     cdc:	e4 cf       	rjmp	.-56     	; 0xca6 <vfprintf+0x4a>
     cde:	ff 24       	eor	r15, r15
     ce0:	ee 24       	eor	r14, r14
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	10 32       	cpi	r17, 0x20	; 32
     ce6:	b0 f4       	brcc	.+44     	; 0xd14 <vfprintf+0xb8>
     ce8:	8b 32       	cpi	r24, 0x2B	; 43
     cea:	69 f0       	breq	.+26     	; 0xd06 <vfprintf+0xaa>
     cec:	8c 32       	cpi	r24, 0x2C	; 44
     cee:	28 f4       	brcc	.+10     	; 0xcfa <vfprintf+0x9e>
     cf0:	80 32       	cpi	r24, 0x20	; 32
     cf2:	51 f0       	breq	.+20     	; 0xd08 <vfprintf+0xac>
     cf4:	83 32       	cpi	r24, 0x23	; 35
     cf6:	71 f4       	brne	.+28     	; 0xd14 <vfprintf+0xb8>
     cf8:	0b c0       	rjmp	.+22     	; 0xd10 <vfprintf+0xb4>
     cfa:	8d 32       	cpi	r24, 0x2D	; 45
     cfc:	39 f0       	breq	.+14     	; 0xd0c <vfprintf+0xb0>
     cfe:	80 33       	cpi	r24, 0x30	; 48
     d00:	49 f4       	brne	.+18     	; 0xd14 <vfprintf+0xb8>
     d02:	11 60       	ori	r17, 0x01	; 1
     d04:	2c c0       	rjmp	.+88     	; 0xd5e <vfprintf+0x102>
     d06:	12 60       	ori	r17, 0x02	; 2
     d08:	14 60       	ori	r17, 0x04	; 4
     d0a:	29 c0       	rjmp	.+82     	; 0xd5e <vfprintf+0x102>
     d0c:	18 60       	ori	r17, 0x08	; 8
     d0e:	27 c0       	rjmp	.+78     	; 0xd5e <vfprintf+0x102>
     d10:	10 61       	ori	r17, 0x10	; 16
     d12:	25 c0       	rjmp	.+74     	; 0xd5e <vfprintf+0x102>
     d14:	17 fd       	sbrc	r17, 7
     d16:	2e c0       	rjmp	.+92     	; 0xd74 <vfprintf+0x118>
     d18:	28 2f       	mov	r18, r24
     d1a:	20 53       	subi	r18, 0x30	; 48
     d1c:	2a 30       	cpi	r18, 0x0A	; 10
     d1e:	98 f4       	brcc	.+38     	; 0xd46 <vfprintf+0xea>
     d20:	16 ff       	sbrs	r17, 6
     d22:	08 c0       	rjmp	.+16     	; 0xd34 <vfprintf+0xd8>
     d24:	8f 2d       	mov	r24, r15
     d26:	88 0f       	add	r24, r24
     d28:	f8 2e       	mov	r15, r24
     d2a:	ff 0c       	add	r15, r15
     d2c:	ff 0c       	add	r15, r15
     d2e:	f8 0e       	add	r15, r24
     d30:	f2 0e       	add	r15, r18
     d32:	15 c0       	rjmp	.+42     	; 0xd5e <vfprintf+0x102>
     d34:	8e 2d       	mov	r24, r14
     d36:	88 0f       	add	r24, r24
     d38:	e8 2e       	mov	r14, r24
     d3a:	ee 0c       	add	r14, r14
     d3c:	ee 0c       	add	r14, r14
     d3e:	e8 0e       	add	r14, r24
     d40:	e2 0e       	add	r14, r18
     d42:	10 62       	ori	r17, 0x20	; 32
     d44:	0c c0       	rjmp	.+24     	; 0xd5e <vfprintf+0x102>
     d46:	8e 32       	cpi	r24, 0x2E	; 46
     d48:	21 f4       	brne	.+8      	; 0xd52 <vfprintf+0xf6>
     d4a:	16 fd       	sbrc	r17, 6
     d4c:	6c c1       	rjmp	.+728    	; 0x1026 <vfprintf+0x3ca>
     d4e:	10 64       	ori	r17, 0x40	; 64
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x102>
     d52:	8c 36       	cpi	r24, 0x6C	; 108
     d54:	11 f4       	brne	.+4      	; 0xd5a <vfprintf+0xfe>
     d56:	10 68       	ori	r17, 0x80	; 128
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <vfprintf+0x102>
     d5a:	88 36       	cpi	r24, 0x68	; 104
     d5c:	59 f4       	brne	.+22     	; 0xd74 <vfprintf+0x118>

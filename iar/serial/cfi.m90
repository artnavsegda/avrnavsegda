#ifndef CFI_M90
#define CFI_M90


#define AVR_PROC_OPTION         ((__TID__ >> 4) & 0x0F)

#if (A90_PROC_OPTION == 0)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_R28 R28 DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:8
    CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 2

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_R28 R28+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R29 SameValue
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_R28 R28
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_R28 sub(R28,\1)        
    ENDM

CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_R28 add(R28,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_R28 add(R28,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_R28 add(R28,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_R28 add(R28,sub(10,R26))
    ENDM


CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_R28 R28 + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_R28 R28 + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_R28, CFI_Y_OFFSET)
    ENDM

#endif

#if (A90_PROC_OPTION == 1)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_Y Y DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
    CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
    CFI ResourceParts SP SPH, SPL
    CFI ResourceParts Y R29, R28
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 2

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_Y Y+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R28 Undefined
    CFI R29 Undefined
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI SPH Undefined
    CFI SPL Undefined
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_Y Y
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_Y sub(Y,\1)        
    ENDM

CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_Y add(Y,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_Y add(Y,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_Y add(Y,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_Y add(Y,sub(10,R26))
    ENDM

CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_Y Y + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_Y Y + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_Y, CFI_Y_OFFSET)
    ENDM

#endif

#if (A90_PROC_OPTION == 2)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_R28 R28 DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:8
    CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 2

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_R28 R28+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R29 SameValue
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_R28 R28
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_R28 sub(R28,\1)        
    ENDM

CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_R28 add(R28,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_R28 add(R28,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_R28 add(R28,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_R28 add(R28,sub(10,R26))
    ENDM

CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_R28 R28 + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_R28 R28 + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_R28, CFI_Y_OFFSET)
    ENDM

#endif

#if (A90_PROC_OPTION == 3)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_Y Y DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
    CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
    CFI ResourceParts SP SPH, SPL
    CFI ResourceParts Y R29, R28
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 2

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_Y Y+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R28 Undefined
    CFI R29 Undefined
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI SPH Undefined
    CFI SPL Undefined
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_Y Y
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_Y sub(Y,\1)        
    ENDM

CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_Y add(Y,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_Y add(Y,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_Y add(Y,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_Y add(Y,sub(10,R26))
    ENDM

CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_Y Y + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_Y Y + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_Y, CFI_Y_OFFSET)
    ENDM

#endif

#if (A90_PROC_OPTION == 4)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_Y24 Y24 DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y24:24, RAMPY:8
    CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
    CFI ResourceParts SP SPH, SPL
    CFI ResourceParts Y24 RAMPY, R29, R28
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 2

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_Y24 Y24+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R28 Undefined
    CFI R29 Undefined
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI SPH Undefined
    CFI SPL Undefined
    CFI RAMPY Undefined
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_Y24 Y24
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_Y24 sub(Y24,\1)        
    ENDM

CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_Y24 add(Y24,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_Y24 add(Y24,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_Y24 add(Y24,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_Y24 add(Y24,sub(10,R26))
    ENDM

CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_Y24 Y24 + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_Y24 Y24 + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_Y24, CFI_Y_OFFSET)
    ENDM

#endif

#if (A90_PROC_OPTION == 5)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_Y Y DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetByte3:8, ?RetHigh:8, ?RetLow:8
    CFI VirtualResource ?Ret:25
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
    CFI ResourceParts ?Ret ?RetByte3, ?RetHigh, ?RetLow, ?RetPad
    CFI ResourceParts SP SPH, SPL
    CFI ResourceParts Y R29, R28
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 3

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_Y Y+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetByte3 and(load(1, DATA, sub(CFA_SP, 2)), ?RetHighByteMask)
    CFI ?RetHigh Frame(CFA_SP, -1)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R28 Undefined
    CFI R29 Undefined
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI SPH Undefined
    CFI SPL Undefined
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_Y Y
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_Y sub(Y,\1)        
    ENDM


CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_Y add(Y,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_Y add(Y,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_Y add(Y,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_Y add(Y,sub(10,R26))
    ENDM

CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_Y Y + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_Y Y + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_Y, CFI_Y_OFFSET)
    ENDM

#endif

#if (A90_PROC_OPTION == 6)

    //////////////////////////////////////////////////////////
    // Declare a names block containing all known resources //
    //////////////////////////////////////////////////////////

CFI_NAMES MACRO
    CFI Names AVR_NAMES
    CFI StackFrame CFA_Y24 Y24 DATA
    CFI StackFrame CFA_SP SP DATA
    CFI VirtualResource ?RetPad:1, ?RetByte3:8, ?RetHigh:8, ?RetLow:8
    CFI VirtualResource ?Ret:25
    CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
    CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
    CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
    CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
    CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y24:24, RAMPY:8
    CFI ResourceParts ?Ret ?RetByte3, ?RetHigh, ?RetLow, ?RetPad
    CFI ResourceParts SP SPH, SPL
    CFI ResourceParts Y24 RAMPY, R29, R28
    CFI EndNames AVR_NAMES
    ENDM

    //////////////////////////////////////////////////////////
    // Common block for standard calling convention.        //
    //////////////////////////////////////////////////////////
bytesOnRstack DEFINE 3

CFI_COMMON_DEFAULT MACRO
    CFI Common AVR_COMMON_DEFAULT Using AVR_NAMES
    CFI CodeAlign 1
    CFI DataAlign 1
    CFI ReturnAddress ?Ret CODE
    CFI CFA_Y24 Y24+0
    CFI CFA_SP SP+bytesOnRstack
    CFI ?RetPad 0
    CFI ?RetByte3 and(load(1, DATA, sub(CFA_SP, 2)), ?RetHighByteMask)
    CFI ?RetHigh Frame(CFA_SP, -1)
    CFI ?RetLow Frame(CFA_SP, 0)
    CFI ?Ret Concat
    CFI R0 Undefined
    CFI R1 Undefined
    CFI R2 Undefined
    CFI R3 Undefined
    CFI R4 SameValue
    CFI R5 SameValue
    CFI R6 SameValue
    CFI R7 SameValue
    CFI R8 SameValue
    CFI R9 SameValue
    CFI R10 SameValue
    CFI R11 SameValue
    CFI R12 SameValue
    CFI R13 SameValue
    CFI R14 SameValue
    CFI R15 SameValue
    CFI R16 Undefined
    CFI R17 Undefined
    CFI R18 Undefined
    CFI R19 Undefined
    CFI R20 Undefined
    CFI R21 Undefined
    CFI R22 Undefined
    CFI R23 Undefined
    CFI R24 SameValue
    CFI R25 SameValue
    CFI R26 SameValue
    CFI R27 SameValue
    CFI R28 Undefined
    CFI R29 Undefined
    CFI R30 Undefined
    CFI R31 Undefined
    CFI ?RetHighByteMask SameValue
    CFI SPH Undefined
    CFI SPL Undefined
    CFI RAMPY Undefined
    CFI EndCommon AVR_COMMON_DEFAULT
    ENDM

CFI_OTHER_FRAME MACRO
    CFI CFA_Y24 Y24
    ENDM

CFI_OTHER_FRAME_PUSH MACRO
    CFI CFA_Y24 sub(Y24,\1)        
    ENDM

CFI_POP_CSTACK_MUL_LOOP_1 MACRO
    CFI CFA_Y24 add(Y24,add(3,sub(R31,1)))
    ENDM
CFI_POP_CSTACK_MUL_LOOP_2 MACRO
    CFI CFA_Y24 add(Y24,add(3,R31))
    ENDM

CFI_PUSH_CSTACK_DIV_LOOP_1 MACRO
    CFI CFA_Y24 add(Y24,sub(10,sub(R26,1)))
    ENDM
CFI_PUSH_CSTACK_DIV_LOOP_2 MACRO
    CFI CFA_Y24 add(Y24,sub(10,R26))
    ENDM

CFI_ADJUST_CSTACK MACRO
CFI_Y_OFFSET      VAR CFI_Y_OFFSET + \1
    CFI CFA_Y24 Y24 + -CFI_Y_OFFSET
    ENDM

CFI_SET_CSTACK MACRO
CFI_Y_OFFSET      VAR \1
    CFI CFA_Y24 Y24 + -CFI_Y_OFFSET
    ENDM

CFI_Y_PUSH MACRO
    CFI_ADJUST_CSTACK -1
    CFI \1 Frame(CFA_Y24, CFI_Y_OFFSET)
    ENDM

#endif


    //////////////////////////////////////////////////////////
    // Begin a routine using default calling convention     //
    //                                                      //
    // You should use this macro when starting a new        //
    // routine. Besides declaring the CFI block, it will    //
    // also initialize the symbol CFI_OFFSET which is later //
    // used to track the changes to the stack pointer.      //
    //                                                      //
    // Example:                                             //
    //      CFI_BEGIN MYROUTINE                             //
    //                                                      //
    //////////////////////////////////////////////////////////

CFI_BEGIN MACRO
    CFI BLOCK cfiBlock\1 USING AVR_COMMON_\2
    IF _args == 2
    CFI FUNCTION \1
    ELSE // This is for segment parts of the same function
    CFI FUNCTION \3
    ENDIF

CFI_R_OFFSET    VAR -bytesOnRstack
CFI_Y_OFFSET    VAR 0
CFI_SEEN_CALL   VAR 0

    ENDM

    //////////////////////////////////////////////////////////
    // End a routine started with CFI_BEGIN                 //
    //                                                      //
    // Example:                                             //
    //      CFI_END MYROUTINE                               //
    //                                                      //
    //////////////////////////////////////////////////////////

CFI_END MACRO
    IF      CFI_SEEN_CALL == 0
    CFI     NOCALLS
    ENDIF

    CFI ENDBLOCK cfiBlock\1

    ENDM

    //////////////////////////////////////////////////////////
    // Notify the stack usage system about the call         //
    //                                                      //
    // Example:                                             //
    //      CFI_CALL OTHERROUTINE                           //
    //                                                      //
    //////////////////////////////////////////////////////////

CFI_CALL MACRO name

    CFI     FUNCALL name

CFI_SEEN_CALL   VAR 1

    ENDM


CFI_ADJUST_RSTACK MACRO
CFI_R_OFFSET      VAR CFI_R_OFFSET + \1
    CFI CFA_SP SP + -CFI_R_OFFSET
    ENDM

CFI_R_PUSH MACRO
    CFI_ADJUST_RSTACK -1
    CFI \1 Frame(CFA_SP, CFI_R_OFFSET)
    ENDM

CFI_R_POP MACRO
    CFI_ADJUST_RSTACK +1
    CFI \1 SameValue
    ENDM
CFI_R_PUSH_SCRATCH MACRO
    CFI_ADJUST_RSTACK -1
    ENDM
CFI_R_POP_SCRATCH MACRO
    CFI_ADJUST_RSTACK +1
    ENDM


CFI_Y_POP MACRO
    CFI_ADJUST_CSTACK +1
    CFI \1 SameValue
    ENDM

CFI_Y_PUSH_SCRATCH MACRO
    CFI_ADJUST_CSTACK -1
    ENDM

CFI_Y_POP_SCRATCH MACRO
    CFI_ADJUST_CSTACK +1
    ENDM

CFI_SET_Y_OFFSET MACRO
CFI_Y_OFFSET      VAR \1
    ENDM

#define CFI_P8 R16
#define CFI_PUSH_P8 sub(R16,1)
#define CFI_POST_PUSH_P8 R16

#define CFI_P16 add(R16,lshift(R17,8))
#define CFI_PUSH_P16 sub(add(R16,lshift(R17,8)),1)
#define CFI_POST_PUSH_P16 add(R16,lshift(R17,8))

#define CFI_Z8 R30
#define CFI_PUSH_Z8 sub(R30,1)
#define CFI_POST_PUSH_Z8 R30

#define CFI_Z16 add(R30,lshift(R31,8))
#define CFI_PUSH_Z16 sub(add(R30,lshift(R31,8)),1)
#define CFI_POST_PUSH_Z16 add(R30,lshift(R31,8))


#endif // CFI_M90
